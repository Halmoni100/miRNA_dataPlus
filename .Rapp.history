load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_sample_factors.r")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "bl_s"#
grp2 <- "bl_as"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), as.matrix(df_sub[,n]), alpha=1, lambda=grid)#
cv.out=cv.glmnet(as.matrix(df_sub[,1:n-1]), as.matrix(df_sub[,n]), alpha=1, nfolds=m)#
plot(cv.out)#
#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_quantile_norm_data.r")
# Load the following...#
# quantile_norm_data#
# sample_factors#
#
# Do PCA Analysis#
pca_analysis <- dget("R_Code/PCA/analyze_PCs_samples.r")#
pca_analysis(quantile_norm_data, sample_factors, 10)
# Load the following...#
# 	quantile_norm_data#
#	sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
v_s_bool_vec <- sample_factors == "v_s"#
v_as_bool_vec <- sample_factors == "v_as"#
bl_s_bool_vec <- sample_factors == "bl_s"#
bl_as_bool_vec <- sample_factors == "bl_as"#
bc_bool_vec <- sample_factors == "bc"#
#
viral_symptomatic <- quantile_norm_data[, v_s_bool_vec]#
viral_asymptomatic <- quantile_norm_data[, v_as_bool_vec]#
baseline_symptomatic <- quantile_norm_data[, bl_s_bool_vec]#
baseline_asymptomatic <- quantile_norm_data[, bl_as_bool_vec]#
bacterial <- quantile_norm_data[, bc_bool_vec]#
allviral <- quantile_norm_data[, v_s_bool_vec | v_as_bool_vec]#
baseline <- quantile_norm_data[, bl_s_bool_vec | bl_as_bool_vec]#
allviral_and_bacterial <- quantile_norm_data[, v_s_bool_vec | v_as_bool_vec | bc_bool_vec]#
#
v_s_ordered <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
v_as_ordered <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
b_s_ordered <- quantile_norm_data[,c(22,41,24,31,27,42,29,26,28,23,37,33,34)]#
b_as_ordered <- quantile_norm_data[,c(40,25,39,38,36,30,35,32)]#
#
# t-test function#
do_t_test <- function(s1, s2, is_paired) {#
	result <- t.test(s1, s2, alternative="two.sided", paired=is_paired)#
	out = list()#
	out[[1]] <- result$p.value#
	out[[2]] <- result$conf.int#
	return(out)#
}#
#
# make an output matrix for the p values of all the tests#
p_vals <- matrix( , nrow=nrow(quantile_norm_data), ncol=7)#
# make an output matrix for the standard errors of all the p values#
conf_ints <- matrix( , nrow=nrow(quantile_norm_data), ncol=7)#
#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
	p_val_vec <- vector(length=7)#
	conf_int_vec <- vector(length=7)#
	result_1 <- do_t_test(v_s_ordered[k,], b_s_ordered[k,], TRUE)#
	p_val_vec[1] <- result_1[[1]]#
	conf_int_vec[1] <- result_1[[2]]#
	result_2 <- do_t_test(v_as_ordered[k,], b_as_ordered[k,], TRUE)#
	p_val_vec[2] <- result_2[[1]]#
	conf_int_vec[2] <- result_2[[2]]#
	result_3 <- do_t_test(viral_symptomatic[k,], viral_asymptomatic[k,], FALSE)#
	p_val_vec[3] <- result_3[[1]]#
	conf_int_vec[3] <- result_3[[2]]#
	result_4 <- do_t_test(viral_symptomatic[k,], bacterial[k,], FALSE)#
	p_val_vec[4] <- result_4[[1]]#
	conf_int_vec[4] <- result_4[[2]]#
	result_5 <- do_t_test(baseline_symptomatic[k,], baseline_asymptomatic[k,], FALSE)#
	p_val_vec[5] <- result_5[[1]]#
	conf_int_vec[5] <- result_5[[2]]#
	result_6 <- do_t_test(bacterial[k,], baseline[k,], FALSE)#
	p_val_vec[6] <- result_6[[1]]#
	conf_int_vec[6] <- result_6[[2]]#
	result_7 <- do_t_test(allviral_and_bacterial[k,], baseline[k,], FALSE)#
	p_val_vec[7] <- result_7[[1]]#
	conf_int_vec[7] <- result_7[[2]]#
	p_vals[k,] <- p_val_vec#
	conf_ints[k,] <- conf_int_vec#
}#
#
# save p_vals matrix#
save(p_vals, file="Data_out/saved_p_vals.r")#
# save conf_ints matrix#
save(conf_ints, file="Data_out/saved_conf_ints_p_vals.r")
warnings()
# Load the following...#
#	p_vals#
#	conf_ints#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- bonferroni_adjust(i)#
}
significant_miRNAs
save(significant_miRNAs, "Data_out/significant_t-test.r")
wd()
getwd()
save(significant_miRNAs, "R_Code/Data_out/significant_t-test.r")
save(significant_miRNAs, "Data_out/significant_t-test.r")
save(significant_miRNAs, file="R_Code/Data_out/significant_t-test.r")
save(significant_miRNAs, file="Data_out/significant_t-test.r")
# Load the following...#
# sample_factors#
# quantile_norm_data#
#
# For reference, factors are#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Baseline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load permtest package#
library(permtest)#
#
# Assign names for data matrix for input into permtest#
column_names <- 1:ncol(quantile_norm_data)#
colnames(quantile_norm_data) <- column_names#
#
assign_truth_table <- function(class_list, num_samples) {#
	# initialize truth_table to all false#
	truth_table <- vector(mode="logical", length=num_samples)#
	# do logical or to make all considered samples true#
	for (class in class_list) {#
		truth_vals <- sample_factors == class#
		truth_table <- truth_table | truth_vals#
	}#
	return(truth_table)#
}#
#
create_two_grps <- function(class_list_1, class_list_2) {#
# The output is a list... #
# 1. list of 1s and 2s for grp assignment#
# 2. column numbers used#
# 3. truth table for samples used#
	num_samples <- ncol(quantile_norm_data)#
	truth_table_1 <- assign_truth_table(class_list_1, num_samples)#
	truth_table_2 <- assign_truth_table(class_list_2, num_samples)#
	# get truth table for samples used in classes 1 & 2#
	samples_used <- truth_table_1 | truth_table_2#
	# find number of samples for both classes#
	num_true_1 <- length(which(truth_table_1))#
	num_true_2 <- length(which(truth_table_2))#
	num_true <- num_true_1 + num_true_2#
	# create vector of group category per sample#
	grp_vec <- vector(length=num_true)#
	# assign column names for design matrix#
	col_name_vec <- vector(length=num_true)#
	# j is current number to fill in truth_vec#
	j <- 1#
	for (i in 1:num_samples) {#
		if (truth_table_1[i]) {#
			grp_vec[j] <- 1#
			col_name_vec[j] <- i#
			j <- j + 1#
		}#
		else if (truth_table_2[i]) {#
			grp_vec[j] <- 2#
			col_name_vec[j] <- i#
			j <- j + 1#
		}#
	}#
	if (j != num_true + 1) {#
		stop("Error: Not all of truth_vec covered")#
	}#
	out <- list()#
	out[[1]] <- grp_vec#
	out[[2]] <- col_name_vec#
	out[[3]] <- samples_used#
	return(out)#
}#
#
perform_permtest <- function(class_list_1, class_list_2) {#
	out_two_grps <- create_two_grps(class_list_1, class_list_2)#
	samples_used <- out_two_grps[[3]]#
	# assign data matrix based on subset used for classes 1 & 2#
	data_matrix <- quantile_norm_data[,samples_used]#
	# create designmatrix#
	dm <- cbind(out_two_grps[[2]], out_two_grps[[1]])#
	# do permtest#
	result <- permtest(data_matrix, dm, distance="euclid", nperms=100000, designtype="random")#
	return(result)#
}#
#
# Do permutation tests#
v_s_vs_bl_s_result <- perform_permtest("v_s", "bl_s")#
v_as_vs_bl_as_result <- perform_permtest("v_as", "bl_as")#
v_s_vs_v_as_result <- perform_permtest("v_s", "v_as")#
v_s_vs_bc_result <- perform_permtest("v_s", "bc")#
bl_s_vs_bl_as_result <- perform_permtest("bl_s", "bl_as")#
bc_vs_bl_result <- perform_permtest("bc", c("bl_s", "bl_as"))#
bl_vs_sick_result <- perform_permtest(c("bl_s", "bl_as"), c("v_s", "v_as", "bc"))#
#
# Write out summaries to txt files#
write.table(v_s_vs_bl_s_result, "Data_out/viral_symp_vs_baseline_symp.txt", sep="\t", quote=FALSE)#
write.table(v_as_vs_bl_as_result, "Data_out/viral_asymp_vs_baseline_asymp.txt", sep="\t", quote=FALSE)#
write.table(v_s_vs_v_as_result, "Data_out/viral_symp_vs_viral_asymp.txt", sep="\t", quote=FALSE)#
write.table(v_s_vs_bc_result, "Data_out/viral_symp_vs_bacteria.txt", sep="\t", quote=FALSE)#
write.table(bl_s_vs_bl_as_result, "Data_out/baseline_symp_vs_baseline_asymp.txt", sep="\t", quote=FALSE)#
write.table(bc_vs_bl_result, "Data_out/bacteria_vs_baseline.txt", sep="\t", quote=FALSE)#
write.table(bl_vs_sick_result, "Data_out/baseline_vs_sick.txt", sep="\t", quote=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "bl_s"#
grp2 <- "bl_as"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), as.matrix(df_sub[,n]), alpha=1, lambda=grid)#
cv.out=cv.glmnet(as.matrix(df_sub[,1:n-1]), as.matrix(df_sub[,n]), alpha=1, nfolds=m)#
plot(cv.out)#
#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
sample_factors
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "bl_s"#
grp2 <- "bl_as"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), as.matrix(df_sub[,n]), alpha=1, lambda=grid)#
cv.out=cv.glmnet(as.matrix(df_sub[,1:n-1]), as.matrix(df_sub[,n]), alpha=1, nfolds=m)#
plot(cv.out)#
#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
significant_miRNAs
print(head(df_sub))
n-1
n
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "bl_s"#
grp2 <- "bl_as"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
print(head(df_sub))#
#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), as.matrix(df_sub[,n]), alpha=1, lambda=grid)#
cv.out=cv.glmnet(as.matrix(df_sub[,1:n-1]), as.matrix(df_sub[,n]), alpha=1, nfolds=m)#
plot(cv.out)#
#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "bl_s"#
grp2 <- "bl_as"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
print(head(df_sub))#
#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), df_sub[,n], alpha=1, lambda=grid)#
cv.out=cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub[,n], alpha=1, nfolds=m)#
plot(cv.out)#
#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
y <- as.integer(df_sub[,n])#
y <- y-1#
y
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, lambda=grid)#
cv.out=cv.glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, nfolds=m)#
plot(cv.out)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
print(head(df_sub))#
#
y <- as.integer(df_sub[,n])#
y <- y-1#
y#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, lambda=grid)#
cv.out=cv.glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, nfolds=m)#
plot(cv.out)#
#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
lasso.coef
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
print(head(df_sub))#
#
y <- as.integer(df_sub[,n])#
y <- y-1#
y#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, lambda=grid)#
cv.out=cv.glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, nfolds=m)#
plot(cv.out)#
#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_sample_factors.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
print(head(df_sub))#
#
y <- as.integer(df_sub[,n])#
y <- y-1#
y#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, lambda=grid)#
cv.out=cv.glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, nfolds=m)#
plot(cv.out)#
#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
print(head(df_sub))#
#
y <- as.integer(df_sub[,n])#
y <- y-1#
y#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, lambda=grid)#
cv.out=cv.glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, nfolds=m)#
plot(cv.out)#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_sample_factors.r")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
print(head(df_sub))#
#
y <- as.integer(df_sub[,n])#
y <- y-1#
y#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, lambda=grid)#
cv.out=cv.glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, nfolds=m)#
plot(cv.out)#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
lasso.coef
str(lasso.mod)
plot(lasso.mod)
cv.out=cv.glmnet(as.matrix(df_sub), y, type.measure="class" alpha=1, nfolds=m)#
plot(cv.out)
quartz()#
cv.out=cv.glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, nfolds=m)#
plot(cv.out)
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), y, alpha=1, nfolds=m)#
plot(cv.out)#
quartz()#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub[,n], type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub[,n], family="binomial" type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial" type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)
bestlam = cv.out$lambda.min#
bestlm#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
cv.out
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
lasso.coef
lasso.coef$f25
lasso.coef[f25]
str(lambda.coef)
str(lasso.coef)
nonzero_coef <- lasso.coef(which(lasso.coef > 0))
nonzero_coef <- lasso.coef[which(lasso.coef > 0)]
nonzero_coef_ordered <- sort(nonzero_coef)#
nonzero_coef ordered
nonzero_coef_ordered
nonzero_coef <- lasso.coef[which(abs(lasso.coef) > 0)]#
nonzero_coef_ordered <- sort(nonzero_coef)#
nonzero_coef_ordered
names(nonzero_coef_ordered)
rownames(nonzero_coef_ordered)
colnames(nonzero_coef_ordered)
dimnames(nonzero_coef_ordered)
lasso.coef[1]
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_sorted <- nonzero_coef[order(coef),]#
nonzero_coef_sorted
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_sorted <- nonzero_coef[order(nonzero_coef$coef),]#
nonzero_coef_sorted
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
nonzero_coef_sorted <- nonzero_coef_df[order(nonzero_coef_df$coef),]#
nonzero_coef_sorted
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
nonzero_coef_sorted <- nonzero_coef_df[order(abs(nonzero_coef_df$coef)),]#
nonzero_coef_sorted
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
nonzero_coef_sorted
rownames(nonzero_coef_sorted) <- NULL#
nonzero_coef_sorted
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/cv_plot.jpeg", res=300)#
cv.out#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/cv_plot.jpeg", res=300)#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
plot(cv.out)#
jpeg(filename="Data_out/cv_plot.jpeg", width=480, height=480, res=300)
plot(cv.out)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
set.seed(1)#
grid=10^seq(10,-2,length=100)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_sample_factors.r")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg", res = 300)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg", res = 300)#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_sample_factors.r")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
nonzero_coef
rownames(lasso.coef)
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(rownames(lasso.coef)[i], lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(rownames(lasso.coef)[i], lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
nonzero_cof
nonzero_coef
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		index_str <- rownames(lasso.coef)[i]#
		index <- as.integer(index_str[-1])#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
nonzero_coef
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
indices <- rownames(lasso.coef)#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		index_str <- indices[i]#
		index <- as.integer(index_str[-1])#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
nonzero_coef
indices
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
indices <- rownames(lasso.coef)#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		index_str <- indices[i]#
		index <- as.integer(index_str[-1])#
		new_coef <- c(index, lasso.coef[i])#
		new_coef#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
indices <- rownames(lasso.coef)#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		index_str <- indices[i]#
		index <- as.integer(index_str[-1])#
		print(index)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
indices <- rownames(lasso.coef)#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		index_str <- indices[i]#
		print(index_str)#
		index <- as.integer(index_str[-1])#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
lasso.coef
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
bestlam = cv.out$lambda.min#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)
lasso.coef
n
str(df_sub)
df_sub$y
rownames(df_sub)
str(cv.out)
lasso.coef = coef(cv.out)
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		new_coef <- c(i-1, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
lasso.coef
indices <- rownames(lasso.coef)
indices
x <- indices[1][-1]
x
x <- indices
x <- indices[1]
x
x <- indices[2]
x
x <- substr(x, 2)
lasso.coef = coef(cv.out)#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		index_str <- indices[i]#
		index <- substring(index_str, 2)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
lasso.coef = coef(cv.out)#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		feat_string <- indices[i]#
		index_string <- substring(index_str, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
lasso.coef = coef(cv.out)#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print("ran")#
		feat_string <- indices[i]#
		index_string <- substring(index_str, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_sample_factors.r")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
lasso.coef = coef(cv.out)#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print("ran")#
		feat_string <- indices[i]#
		index_string <- substring(index_str, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
length(lasso.coef)
lasso.coef <- coef(cv.out)
lasso.coef
lasso.coef[88]
lasso.coef[87]
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
lasso.coef = coef(cv.out)#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(index_str, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
indices
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
lasso.coef = coef(cv.out)#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print[i]#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(index_str, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
lasso.coef = coef(cv.out)#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(index_str, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
indices[i]
indices(87)
indices[87]
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
lasso.coef = coef(cv.out)#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_str, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg")#
#
lasso.coef = coef(cv.out)#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_string, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
lasso.coef
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
jpeg(filename="Data_out/logistic_lasso_misclassification.jpeg", width=800, height=800)#
#
lasso.coef = coef(cv.out)#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_string, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
#
lasso.coef = coef(cv.out)#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_string, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_sample_factors.r")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
plot(cv.out)#
#
lasso.coef = coef(cv.out)#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_string, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
lasso.coef
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
# Perform lasso logistic regression on all of the data#
grid = 10^seq(10, -2, length=100)#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
#
# Do leave one out cross validation#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
# Choose best lambda from LOOCV#
bestlam = cv.out$lambda.min#
#
# Do lasso logistic regression on all of the data using best lambda#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
# Print out coefficients#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_string, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
# Perform lasso logistic regression on all of the data#
grid = 10^seq(10, -2, length=100)#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", alpha=1)#
#
# Do leave one out cross validation#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
# Choose best lambda from LOOCV#
bestlam = cv.out$lambda.min#
#
# Do lasso logistic regression on all of the data using best lambda#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
# Print out coefficients#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_string, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
plot(cv.out)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
print(str(df_sub$y))#
#
# Perform lasso logistic regression on all of the data#
grid = 10^seq(10, -2, length=100)#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", alpha=1)#
#
# Do leave one out cross validation#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
# Plot misclassification rates from LOOCV vs lambda parameter#
plot(cv.out)#
# Choose best lambda from LOOCV#
bestlam = cv.out$lambda.min#
#
# Do lasso logistic regression on all of the data using best lambda#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
# Print out coefficients#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_string, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("G1", "G2")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
print(str(df_sub$y))#
#
# Perform lasso logistic regression on all of the data#
grid = 10^seq(10, -2, length=100)#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", alpha=1)#
#
# Do leave one out cross validation#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
# Plot misclassification rates from LOOCV vs lambda parameter#
plot(cv.out)#
# Choose best lambda from LOOCV#
bestlam = cv.out$lambda.min#
#
# Do lasso logistic regression on all of the data using best lambda#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
# Print out coefficients#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_string, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c(1, 0)#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
print(str(df_sub$y))#
#
# Perform lasso logistic regression on all of the data#
grid = 10^seq(10, -2, length=100)#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", alpha=1)#
#
# Do leave one out cross validation#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
# Plot misclassification rates from LOOCV vs lambda parameter#
plot(cv.out)#
# Choose best lambda from LOOCV#
bestlam = cv.out$lambda.min#
#
# Do lasso logistic regression on all of the data using best lambda#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
# Print out coefficients#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_string, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
print(str(df_sub$y))#
#
# Perform lasso logistic regression on all of the data#
grid = 10^seq(10, -2, length=100)#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", alpha=1)#
#
# Do leave one out cross validation#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
# Plot misclassification rates from LOOCV vs lambda parameter#
plot(cv.out)#
# Choose best lambda from LOOCV#
bestlam = cv.out$lambda.min#
#
# Do lasso logistic regression on all of the data using best lambda#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
# Print out coefficients#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_string, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_v <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_v)) {#
		val <- adjusted_v[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(significant_miRNA_dfs[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- significant_miRNA_dfs[[i]]#
	p_vals <- new_frame$p_val#
	quartz()#
	plot_name <- paste("Test #", i)#
	hist(p_vals, main = plot_name)#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_v <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_v)) {#
		val <- adjusted_v[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(significant_miRNA_dfs[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- significant_miRNA_dfs[[i]]#
	p_vals <- new_frame$p_val#
	quartz()#
	plot_name <- paste("Test #", i)#
	hist(p_vals, main = plot_name)#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- bonferroni_adjust(i)#
}#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_v <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_v)) {#
		val <- adjusted_v[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# perform function for each column#
for (i in 1:n) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNA_dfs[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNA_dfs[[i]]#
	p_vals <- new_frame$p_val#
	quartz()#
	plot_name <- paste("Test #", i)#
	hist(p_vals, main = plot_name)#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_conf_ints_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- bonferroni_adjust(i)#
}#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_v <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_v)) {#
		val <- adjusted_v[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# perform function for each column#
for (i in 1:n) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNA_dfs[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNA_dfs[[i]]#
	p_vals <- new_frame$p_val#
	quartz()#
	plot_name <- paste("Test #", i)#
	hist(p_vals, main = plot_name)#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- bonferroni_adjust(i)#
}#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_v <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_v)) {#
		val <- adjusted_v[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# perform function for each column#
for (i in 1:n) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNA[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	p_vals <- new_frame$p_val#
	quartz()#
	plot_name <- paste("Test #", i)#
	hist(p_vals, main = plot_name)#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- bonferroni_adjust(i)#
}#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_v <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_v)) {#
		val <- adjusted_v[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# perform function for each column#
for (i in 1:n) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	p_vals <- new_frame$p_val#
	quartz()#
	plot_name <- paste("Test #", i)#
	hist(p_vals, main = plot_name)#
}
n
# Load the following...#
#	p_vals#
#	conf_ints#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- bonferroni_adjust(i)#
}#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_v <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_v)) {#
		val <- adjusted_v[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	p_vals <- new_frame$p_val#
	quartz()#
	plot_name <- paste("Test #", i)#
	hist(p_vals, main = plot_name)#
}
n
ncol(p_vals)
p_vals
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
p_vals
# Load the following...#
#	p_vals#
#	conf_ints#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- bonferroni_adjust(i)#
}#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_v <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_v)) {#
		val <- adjusted_v[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	p_vals <- new_frame$p_val#
	quartz()#
	plot_name <- paste("Test #", i)#
	hist(p_vals, main = plot_name)#
}
p_vals
significant_miRNAs
fdr_significant_miRNAs
# Load the following...#
#	p_vals#
#	conf_ints#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- bonferroni_adjust(i)#
}#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_v <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_v)) {#
		val <- adjusted_v[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	if (nrow(new_frame) > 0) {#
		p_vals <- new_frame$p_val#
		quartz()#
		plot_name <- paste("Test #", i)#
		hist(p_vals, main = plot_name)#
	}#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- bonferroni_adjust(i)#
}#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_v <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_v)) {#
		val <- adjusted_v[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	if (nrow(new_frame) > 0) {#
		p_vals <- new_frame$p_val#
		quartz()#
		plot_name <- paste("Test #", i)#
		hist(p_vals, main = plot_name)#
	}#
}
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}
p_vals
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}
fdr_significant_miRNAs
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	if (nrow(new_frame) > 0) {#
		p_vals <- new_frame$p_val#
		quartz()#
		plot_name <- paste("Test #", i)#
		hist(p_vals, main = plot_name)#
	}#
}
p_vals
# Load the following...#
#	p_vals#
#	conf_ints#
load("Data_in/saved_p_vals.r")#
load("Data_in/saved_conf_ints_p_vals.r")#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- bonferroni_adjust(i)#
}#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	if (nrow(new_frame) > 0) {#
		adjusted_fdr_pvals <- new_frame$p_val#
		quartz()#
		plot_name <- paste("Test #", i)#
		hist(adjusted_fdr_pvals, main = plot_name)#
	}#
}
# Load the following...#
#	p_vals#
load("Data_in/saved_p_vals.r")#
#
# get # cols#
n <- ncol(p_vals)#
#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=2)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		entry <- c(i, val)#
		significant_mat <- rbind(significant_mat, entry)#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	if (nrow(new_frame) > 0) {#
		adjusted_fdr_pvals <- new_frame$p_val#
		quartz()#
		plot_name <- paste("Test #", i)#
		hist(adjusted_fdr_pvals, main = plot_name)#
	}#
}
# Load the following...#
#	p_vals#
load("Data_in/saved_p_vals.r")#
#
# get # cols#
n <- ncol(p_vals)#
#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=2)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		entry <- c(i, val)#
		significant_mat <- rbind(significant_mat, entry)#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
# get save directory#
#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	adjusted_fdr_pvals <- new_frame$p_val#
	plot_name <- paste("Test_num_", i, sep="")#
	hist(adjusted_fdr_pvals, main = plot_name)#
	dir_name <- paste("Data_out/", plot_name, ".jpeg", sep="")#
	jpeg(dir_name, res=300)#
}
# Load the following...#
#	p_vals#
load("Data_in/saved_p_vals.r")#
#
# get # cols#
n <- ncol(p_vals)#
#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=2)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		entry <- c(i, val)#
		significant_mat <- rbind(significant_mat, entry)#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
# get save directory#
#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	adjusted_fdr_pvals <- new_frame$p_val#
	plot_name <- paste("Test_num_", i, sep="")#
	hist(adjusted_fdr_pvals, main = plot_name)#
	dir_name <- paste("Data_out/", plot_name, ".jpeg", sep="")#
	jpeg(dir_name)#
}
# Load the following...#
#	p_vals#
load("Data_in/saved_p_vals.r")#
#
# get # cols#
n <- ncol(p_vals)#
#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=2)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		entry <- c(i, val)#
		significant_mat <- rbind(significant_mat, entry)#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
# get save directory#
#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	adjusted_fdr_pvals <- new_frame$p_val#
	plot_name <- paste("Test_num_", i, sep="")#
	hist(adjusted_fdr_pvals, main = plot_name)#
	dir_name <- paste("Data_out/", plot_name, ".jpeg", sep="")#
#
}
# Load the following...#
#	p_vals#
load("Data_in/saved_p_vals.r")#
#
# get # cols#
n <- ncol(p_vals)#
#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=2)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		entry <- c(i, val)#
		significant_mat <- rbind(significant_mat, entry)#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
# get save directory#
#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	adjusted_fdr_pvals <- new_frame$p_val#
	plot_name <- paste("Test_num_", i, sep="")#
	hist(adjusted_fdr_pvals, main = plot_name)#
	#dir_name <- paste("Data_out/", plot_name, ".jpeg", sep="")#
#
}
# Load the following...#
#	p_vals#
load("Data_in/saved_p_vals.r")#
#
# get # cols#
n <- ncol(p_vals)#
#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=2)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		entry <- c(i, val)#
		significant_mat <- rbind(significant_mat, entry)#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
# get save directory#
#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	adjusted_fdr_pvals <- new_frame$p_val#
	plot_name <- paste("Test_num_", i, sep="")#
	hist(adjusted_fdr_pvals, main = plot_name)#
	#dir_name <- paste("Data_out/", plot_name, ".jpeg", sep="")#
}
# Load the following...#
#	p_vals#
load("Data_in/saved_p_vals.r")#
#
# get # cols#
n <- ncol(p_vals)#
#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=2)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		entry <- c(i, val)#
		significant_mat <- rbind(significant_mat, entry)#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
# get save directory#
#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	adjusted_fdr_pvals <- new_frame$p_val#
	plot_name <- paste("Test_num_", i, sep="")#
	hist(adjusted_fdr_pvals, main = plot_name)#
	dir_name <- paste("Data_out/", plot_name, ".jpeg", sep="")#
	jpeg(dir_name)#
	dev.off()#
}
# Load the following...#
#	p_vals#
load("Data_in/saved_p_vals.r")#
#
# get # cols#
n <- ncol(p_vals)#
#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=2)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		entry <- c(i, val)#
		significant_mat <- rbind(significant_mat, entry)#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
# get save directory#
#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	adjusted_fdr_pvals <- new_frame$p_val#
	plot_name <- paste("Test_num_", i, sep="")#
	hist(adjusted_fdr_pvals, main = plot_name)#
	dir_name <- paste("Data_out/", plot_name, ".jpeg", sep="")#
	jpeg(dir_name)#
}
getwd()
# Load the following...#
#	p_vals#
load("Data_in/saved_p_vals.r")#
#
# get # cols#
n <- ncol(p_vals)#
#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=2)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		entry <- c(i, val)#
		significant_mat <- rbind(significant_mat, entry)#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
# get save directory#
#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	adjusted_fdr_pvals <- new_frame$p_val#
	plot_name <- paste("Test_num_", i, sep="")#
	hist(adjusted_fdr_pvals, main = plot_name)#
	dir_name <- paste("/Data_out/", plot_name, ".jpeg", sep="")#
	jpeg(filename=dir_name)#
}
# Load the following...#
#	p_vals#
load("Data_in/saved_p_vals.r")#
#
# get # cols#
n <- ncol(p_vals)#
#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=2)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		entry <- c(i, val)#
		significant_mat <- rbind(significant_mat, entry)#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
# get save directory#
#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	adjusted_fdr_pvals <- new_frame$p_val#
	plot_name <- paste("Test_num_", i, sep="")#
	dir_name <- paste("/Data_out/", plot_name, ".jpeg", sep="")#
	jpeg(filename=dir_name)#
	hist(adjusted_fdr_pvals, main = plot_name)#
	dev.off()#
}
# Load the following...#
#	p_vals#
load("Data_in/saved_p_vals.r")#
#
# get # cols#
n <- ncol(p_vals)#
#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=2)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		entry <- c(i, val)#
		significant_mat <- rbind(significant_mat, entry)#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
# get save directory#
#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	adjusted_fdr_pvals <- new_frame$p_val#
	plot_name <- paste("Test_num_", i, sep="")#
	dir_name <- paste("Data_out/", plot_name, ".jpeg", sep="")#
	jpeg(filename=dir_name)#
	hist(adjusted_fdr_pvals, main = plot_name)#
	dev.off()#
}
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load tree package#
library(tree)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
tree.miRNA <- tree(y~. , data=df_sub)#
summary(tree.miRNA)
install.packages(tree)
install.packages("tree")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load tree package#
library(tree)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
tree.miRNA <- tree(y~. , data=df_sub)#
summary(tree.miRNA)
plot(tree.miRNA)
plot(tree.miRNA)#
text(tree.miRNA, pretty=0)
jpeg("Data_out/decision_tree.jpeg")#
plot(tree.miRNA)#
text(tree.miRNA, pretty=0)#
dev.off()
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
print(str(df_sub$y))#
#
# Perform lasso logistic regression on all of the data#
grid = 10^seq(10, -2, length=100)#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", alpha=1)#
#
# Do leave one out cross validation#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
# Plot misclassification rates from LOOCV vs lambda parameter#
plot(cv.out)#
# Choose best lambda from LOOCV#
bestlam = cv.out$lambda.min#
#
# Do lasso logistic regression on all of the data using best lambda#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
# Print out coefficients#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_string, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
df_sub$y
install.packages("randomForest")
bag.miRNA <- randomForest(y~., data=df_sub, ntree=100)
# Load random forest package#
library(randomForest)#
bag.miRNA <- randomForest(y~., data=df_sub, ntree=100)
plot(bag.miRNA)
# Load random forest package#
library(randomForest)#
rf.miRNA <- randomForest(y~., data=df_sub, ntree=100, importance=TRUE)#
importance(rf.miRNA)
write.table(imp.miRNA, file="Data_out/importance.txt", sep="\t", row.names=FALSE, col.names=FALSE)
imp.miRNA <- importance(rf.miRNA)#
write.table(imp.miRNA, file="Data_out/importance.txt", sep="\t", row.names=FALSE, col.names=FALSE)
write.csv(imp.miRNA, file="Data_out/importance.txt", row.names=FALSE, col.names=FALSE)
write.csv(imp.miRNA, file="Data_out/importance.txt")
write.csv(imp.miRNA, file="Data_out/importance.csv")
imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA$MeanDecreaseGini), ]#
write.csv(imp.miRNA_ordered, file="Data_out/importance_gini_ordered.csv")
class(imp.miRNA)
imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,MeanDecreaseGini]), ]#
write.csv(imp.miRNA_ordered, file="Data_out/importance_gini_ordered.csv")
x <- matrix(c(1,2,3,4), nrow=2, ncol=2)
colnames <- c("a","b")
x$a
x["a",]
x[1]
x[1,1]
x[1,]
imp.miRNA <- importance(rf.miRNA)#
imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,4]), ]#
write.csv(imp.miRNA_ordered, file="Data_out/importance_gini_ordered.csv")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load tree package#
library(tree)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
tree.miRNA <- tree(y~. , data=df_sub)#
summary(tree.miRNA)#
jpeg("Data_out/decision_tree.jpeg")#
plot(tree.miRNA)#
text(tree.miRNA, pretty=0)#
dev.off()#
#
# Load random forest package#
library(randomForest)#
rf.miRNA <- randomForest(y~., data=df_sub, ntree=100, importance=TRUE)#
jpeg("Data_out/random_forest_errors.jpeg")#
plot(rf.miRNA)#
dev.off()#
imp.miRNA <- importance(rf.miRNA)#
imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,4], decreasing=TRUE), ]#
write.csv(imp.miRNA_ordered, file="Data_out/importance_gini_ordered.csv")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load tree package#
library(tree)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
tree.miRNA <- tree(y~. , data=df_sub)#
summary(tree.miRNA)#
jpeg("Data_out/decision_tree.jpeg")#
plot(tree.miRNA)#
text(tree.miRNA, pretty=0)#
dev.off()#
#
# Load random forest package#
library(randomForest)#
rf.miRNA <- randomForest(y~., data=df_sub, ntree=100, importance=TRUE)#
jpeg("Data_out/random_forest_errors.jpeg")#
# note: #
plot(rf.miRNA)#
legend("top", colnames(rf.miRNA$err.rate),col=1:3,cex=0.8,fill=1:3)#
dev.off()#
imp.miRNA <- importance(rf.miRNA)#
imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,4], decreasing=TRUE), ]#
write.csv(imp.miRNA_ordered, file="Data_out/importance_gini_ordered.csv")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load tree package#
library(tree)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
tree.miRNA <- tree(y~. , data=df_sub)#
summary(tree.miRNA)#
jpeg("Data_out/decision_tree.jpeg", res=300)#
plot(tree.miRNA)#
text(tree.miRNA, pretty=0)#
dev.off()#
#
# Load random forest package#
library(randomForest)#
rf.miRNA <- randomForest(y~., data=df_sub, ntree=100, importance=TRUE)#
jpeg("Data_out/random_forest_errors.jpeg", res=300)#
# note: #
plot(rf.miRNA)#
legend("top", colnames(rf.miRNA$err.rate),col=1:3,cex=0.8,fill=1:3)#
dev.off()#
imp.miRNA <- importance(rf.miRNA)#
imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,4], decreasing=TRUE), ]#
write.csv(imp.miRNA_ordered, file="Data_out/importance_gini_ordered.csv")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load tree package#
library(tree)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
tree.miRNA <- tree(y~. , data=df_sub)#
summary(tree.miRNA)#
png("Data_out/decision_tree.png", res=300)#
plot(tree.miRNA)#
text(tree.miRNA, pretty=0)#
dev.off()#
#
# Load random forest package#
library(randomForest)#
rf.miRNA <- randomForest(y~., data=df_sub, ntree=100, importance=TRUE)#
png("Data_out/random_forest_errors.png", res=300)#
# note: #
plot(rf.miRNA)#
legend("top", colnames(rf.miRNA$err.rate),col=1:3,cex=0.8,fill=1:3)#
dev.off()#
imp.miRNA <- importance(rf.miRNA)#
imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,4], decreasing=TRUE), ]#
write.csv(imp.miRNA_ordered, file="Data_out/importance_gini_ordered.csv")
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load tree package#
library(tree)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
tree.miRNA <- tree(y~. , data=df_sub)#
summary(tree.miRNA)#
jpeg("Data_out/decision_tree.jpeg")#
plot(tree.miRNA)#
text(tree.miRNA, pretty=0)#
dev.off()#
#
# Load random forest package#
library(randomForest)#
rf.miRNA <- randomForest(y~., data=df_sub, ntree=100, importance=TRUE)#
jpeg("Data_out/random_forest_errors.jpeg")#
# note: #
plot(rf.miRNA)#
legend("top", colnames(rf.miRNA$err.rate),col=1:3,cex=0.8,fill=1:3)#
dev.off()#
imp.miRNA <- importance(rf.miRNA)#
imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,4], decreasing=TRUE), ]#
write.csv(imp.miRNA_ordered, file="Data_out/importance_gini_ordered.csv")
# Load random forest package#
# set seed#
set.seed(100)#
library(randomForest)#
rf.miRNA <- randomForest(y~., data=df_sub, ntree=100, importance=TRUE)#
jpeg("Data_out/random_forest_errors.jpeg")#
# note: #
plot(rf.miRNA)#
legend("top", colnames(rf.miRNA$err.rate),col=1:3,cex=0.8,fill=1:3)#
dev.off()#
imp.miRNA <- importance(rf.miRNA)#
imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,4], decreasing=TRUE), ]#
write.csv(imp.miRNA_ordered, file="Data_out/importance_gini_ordered.csv")
# Load random forest package#
# set seed#
set.seed(101)#
library(randomForest)#
rf.miRNA <- randomForest(y~., data=df_sub, ntree=100, importance=TRUE)#
jpeg("Data_out/random_forest_errors.jpeg")#
# note: #
plot(rf.miRNA)#
legend("top", colnames(rf.miRNA$err.rate),col=1:3,cex=0.8,fill=1:3)#
dev.off()#
imp.miRNA <- importance(rf.miRNA)#
imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,4], decreasing=TRUE), ]#
write.csv(imp.miRNA_ordered, file="Data_out/importance_gini_ordered.csv")
rnames <- rownames(imp.miRNA_ordered)
# Load random forest package#
# set seed#
set.seed(101)#
library(randomForest)#
rf.miRNA <- randomForest(y~., data=df_sub, ntree=100, importance=TRUE)#
jpeg("Data_out/random_forest_errors.jpeg")#
# note: #
plot(rf.miRNA)#
legend("top", colnames(rf.miRNA$err.rate),col=1:3,cex=0.8,fill=1:3)#
dev.off()#
imp.miRNA <- importance(rf.miRNA)#
imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,4], decreasing=TRUE), ]#
write.csv(imp.miRNA_ordered, file="Data_out/importance_gini_ordered.csv")#
rnames <- rownames(imp.miRNA_ordered)#
print(rnames[1:10])
# perform random forest w/ different seeds#
important_features <- matrix(, nrow=0, ncol=10)#
for (i in 100:110) {#
	set.seed(i)#
	rf.miRNA <- randomForest(y~., data=df_sub, ntree=100, importance=TRUE)#
	imp.miRNA <- importance(rf.miRNA)#
	imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,4], decreasing=TRUE), ]#
	rnames <- rownames(imp.miRNA_ordered)#
	important_features <- rbind(important_features, rnames[1:10])#
}#
important_features
imp.miRNA
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")
# Load random forest package#
# set seed#
set.seed(1)#
library(randomForest)#
rf.miRNA <- randomForest(y~., data=df_sub, ntree=100, importance=TRUE)#
jpeg("Data_out/random_forest_errors.jpeg")#
# note: #
plot(rf.miRNA)#
legend("top", colnames(rf.miRNA$err.rate),col=1:3,cex=0.8,fill=1:3)#
dev.off()#
imp.miRNA <- importance(rf.miRNA)#
imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,4], decreasing=TRUE), ]#
write.csv(imp.miRNA_ordered, file="Data_out/importance_gini_ordered.csv")#
rnames <- rownames(imp.miRNA_ordered)#
#
# perform random forest w/ different seeds#
important_features <- matrix(, nrow=0, ncol=10)#
for (i in 100:110) {#
	set.seed(i)#
	rf.miRNA <- randomForest(y~., data=df_sub, ntree=100, importance=TRUE)#
	imp.miRNA <- importance(rf.miRNA)#
	imp.miRNA_ordered <- imp.miRNA[order(imp.miRNA[,4], decreasing=TRUE), ]#
	rnames <- rownames(imp.miRNA_ordered)#
	important_features <- rbind(important_features, rnames[1:10])#
}#
important_features
# Load the following...#
#	p_vals#
#	conf_ints#
load("Data_in/saved_p_vals.r")#
load("Data_in/saved_conf_ints_p_vals.r")#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
for (i in 1:n) {#
	significant_miRNAs[[i]] <- bonferroni_adjust(i)#
}
significant_miRNAs
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load glmnet#
library(glmnet)#
# Load create_df_sub function#
create_df_sub <- dget("R_Code/Classifiers/create_df_sub.r")#
#
# test...#
# try on viral symptomatic vs bacteria#
# create factors and factor_names#
grp1 <- "v_s"#
grp2 <- "bc"#
factors <- list(grp1, grp2)#
factor_names <- c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub <- create_df_sub(df, sample_factors, factors, factor_names)#
#
# get nrow (m) and ncol (n) of df_sub#
m <- nrow(df_sub)#
n <- ncol(df_sub)#
#
print(str(df_sub$y))#
#
# Perform lasso logistic regression on all of the data#
grid = 10^seq(10, -2, length=100)#
lasso.mod = glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", alpha=1)#
#
# Do leave one out cross validation#
cv.out = cv.glmnet(as.matrix(df_sub[,1:n-1]), df_sub$y, family="binomial", type.measure="class", alpha=1, nfolds=m)#
# Plot misclassification rates from LOOCV vs lambda parameter#
plot(cv.out)#
# Choose best lambda from LOOCV#
bestlam = cv.out$lambda.min#
#
# Do lasso logistic regression on all of the data using best lambda#
lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
#
# Print out coefficients#
indices <- rownames(lasso.coef)#
nonzero_coef <- matrix(, nrow=0, ncol=2)#
colnames(nonzero_coef) <- c("index", "coef")#
for (i in 2:length(lasso.coef)) {#
	if (abs(lasso.coef[i]) > 0) {#
		print(i)#
		print(lasso.coef[i])#
		feat_string <- indices[i]#
		index_string <- substring(feat_string, 2)#
		index <- as.integer(index_string)#
		new_coef <- c(index, lasso.coef[i])#
		nonzero_coef <- rbind(nonzero_coef, new_coef)#
	}#
}#
nonzero_coef_df <- as.data.frame(nonzero_coef)#
lr_nonzero_coef_sorted <- nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
rownames(lr_nonzero_coef_sorted) <- NULL#
write.table(lr_nonzero_coef_sorted, file="Data_out/logistic_regression_coefs.txt", sep="\t", row.names=FALSE)
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load create_df_sub function#
create_df_sub = dget("R_Code/Classifiers/create_df_sub.r")#
# Load do_log_reg function#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
main_dir = "Data_out/logistic_regression_out/"#
#
# make function to create subdirectories#
make_sub_dirs = function(name) {#
	dir.create(paste(main_dir, name), sep="")#
	dir.create(paste(main_dir, name, "/ridge", sep=""))#
	dir.create(paste(main_dir, name, "/lasso", sep=""))#
	sub_dir_ridge = paste(main_dir, name, "/ridge/", sep="")#
	sub_dir_lasso = paste(main_dir, name, "/lasso/", sep="")#
	sub_dirs = c(sub_dir_ridge, sub_dir_lasso)#
}#
#
########################
# Viral Symptomatic vs Baseline Symptomatic#
########################
# create factors and factor_names#
grp1 = "v_s"#
grp2 = "bl_s"#
factors = list(grp1, grp2)#
factor_names = c("Viral Symptomatic", "Baseline Symptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_symp_vs_baseline_symp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Viral Asymptomatic vs Baseline Asymptomatic#
########################
# create factors and factor_names#
grp1 = "v_as"#
grp2 = "bl_as"#
factors = list(grp1, grp2)#
factor_names = c("Viral Asymptomatic", "Baseline Asymptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_asymp_vs_baseline_asymp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Viral Symptomatic vs Bacteria#
########################
# create factors and factor_names#
grp1 = "v_s"#
grp2 = "bc"#
factors = list(grp1, grp2)#
factor_names = c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_symp_vs_bacteria")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Baseline Symptomatic vs Baseline Asymptomatic#
########################
# create factors and factor_names#
grp1 = "bl_s"#
grp2 = "bl_as"#
factors = list(grp1, grp2)#
factor_names = c("Baseline Symptomatic", "Baseline Asymptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("baseline_symp_vs_baseline_asymp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Bacteria vs Baseline#
########################
# create factors and factor_names#
grp1 = "bc"#
grp2 = c("bl_s", "bl_as")#
factors = list(grp1, grp2)#
factor_names = c("Bacteria", "Baseline")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("bacteria_vs_baseline")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Sick vs Baseline#
########################
# create factors and factor_names#
grp1 = c("bc", "v_s", "v_as")#
grp2 = c("bl_s", "bl_as")#
factors = list(grp1, grp2)#
factor_names = c("Sick", "Baseline")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("sick_vs_baseline")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load create_df_sub function#
create_df_sub = dget("R_Code/Classifiers/create_df_sub.r")#
# Load do_log_reg function#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
main_dir = "Data_out/logistic_regression_out/"#
#
# make function to create subdirectories#
make_sub_dirs = function(name) {#
	dir.create(paste(main_dir, name, sep=""))#
	dir.create(paste(main_dir, name, "/ridge", sep=""))#
	dir.create(paste(main_dir, name, "/lasso", sep=""))#
	sub_dir_ridge = paste(main_dir, name, "/ridge/", sep="")#
	sub_dir_lasso = paste(main_dir, name, "/lasso/", sep="")#
	sub_dirs = c(sub_dir_ridge, sub_dir_lasso)#
}#
#
########################
# Viral Symptomatic vs Baseline Symptomatic#
########################
# create factors and factor_names#
grp1 = "v_s"#
grp2 = "bl_s"#
factors = list(grp1, grp2)#
factor_names = c("Viral Symptomatic", "Baseline Symptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_symp_vs_baseline_symp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Viral Asymptomatic vs Baseline Asymptomatic#
########################
# create factors and factor_names#
grp1 = "v_as"#
grp2 = "bl_as"#
factors = list(grp1, grp2)#
factor_names = c("Viral Asymptomatic", "Baseline Asymptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_asymp_vs_baseline_asymp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Viral Symptomatic vs Bacteria#
########################
# create factors and factor_names#
grp1 = "v_s"#
grp2 = "bc"#
factors = list(grp1, grp2)#
factor_names = c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_symp_vs_bacteria")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Baseline Symptomatic vs Baseline Asymptomatic#
########################
# create factors and factor_names#
grp1 = "bl_s"#
grp2 = "bl_as"#
factors = list(grp1, grp2)#
factor_names = c("Baseline Symptomatic", "Baseline Asymptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("baseline_symp_vs_baseline_asymp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Bacteria vs Baseline#
########################
# create factors and factor_names#
grp1 = "bc"#
grp2 = c("bl_s", "bl_as")#
factors = list(grp1, grp2)#
factor_names = c("Bacteria", "Baseline")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("bacteria_vs_baseline")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Sick vs Baseline#
########################
# create factors and factor_names#
grp1 = c("bc", "v_s", "v_as")#
grp2 = c("bl_s", "bl_as")#
factors = list(grp1, grp2)#
factor_names = c("Sick", "Baseline")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("sick_vs_baseline")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load create_df_sub function#
create_df_sub = dget("R_Code/Classifiers/create_df_sub.r")#
# Load do_log_reg function#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# make function to create subdirectories#
make_sub_dirs = function(name) {#
	dir.create(paste(main_dir, name, sep=""))#
	dir.create(paste(main_dir, name, "/ridge", sep=""))#
	dir.create(paste(main_dir, name, "/lasso", sep=""))#
	sub_dir_ridge = paste(main_dir, name, "/ridge/", sep="")#
	sub_dir_lasso = paste(main_dir, name, "/lasso/", sep="")#
	sub_dirs = c(sub_dir_ridge, sub_dir_lasso)#
}#
#
########################
# Viral Symptomatic vs Baseline Symptomatic#
########################
# create factors and factor_names#
grp1 = "v_s"#
grp2 = "bl_s"#
factors = list(grp1, grp2)#
factor_names = c("Viral Symptomatic", "Baseline Symptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_symp_vs_baseline_symp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Viral Asymptomatic vs Baseline Asymptomatic#
########################
# create factors and factor_names#
grp1 = "v_as"#
grp2 = "bl_as"#
factors = list(grp1, grp2)#
factor_names = c("Viral Asymptomatic", "Baseline Asymptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_asymp_vs_baseline_asymp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Viral Symptomatic vs Bacteria#
########################
# create factors and factor_names#
grp1 = "v_s"#
grp2 = "bc"#
factors = list(grp1, grp2)#
factor_names = c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_symp_vs_bacteria")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Baseline Symptomatic vs Baseline Asymptomatic#
########################
# create factors and factor_names#
grp1 = "bl_s"#
grp2 = "bl_as"#
factors = list(grp1, grp2)#
factor_names = c("Baseline Symptomatic", "Baseline Asymptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("baseline_symp_vs_baseline_asymp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Bacteria vs Baseline#
########################
# create factors and factor_names#
grp1 = "bc"#
grp2 = c("bl_s", "bl_as")#
factors = list(grp1, grp2)#
factor_names = c("Bacteria", "Baseline")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("bacteria_vs_baseline")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Sick vs Baseline#
########################
# create factors and factor_names#
grp1 = c("bc", "v_s", "v_as")#
grp2 = c("bl_s", "bl_as")#
factors = list(grp1, grp2)#
factor_names = c("Sick", "Baseline")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("sick_vs_baseline")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load create_df_sub function#
create_df_sub = dget("R_Code/Classifiers/create_df_sub.r")#
# Load do_log_reg function#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# make function to create subdirectories#
make_sub_dirs = function(name) {#
	dir.create(paste(main_dir, name, sep=""))#
	dir.create(paste(main_dir, name, "/ridge", sep=""))#
	dir.create(paste(main_dir, name, "/lasso", sep=""))#
	sub_dir_ridge = paste(main_dir, name, "/ridge/", sep="")#
	sub_dir_lasso = paste(main_dir, name, "/lasso/", sep="")#
	sub_dirs = c(sub_dir_ridge, sub_dir_lasso)#
}#
#
########################
# Viral Symptomatic vs Baseline Symptomatic#
########################
# create factors and factor_names#
grp1 = "v_s"#
grp2 = "bl_s"#
factors = list(grp1, grp2)#
factor_names = c("Viral Symptomatic", "Baseline Symptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_symp_vs_baseline_symp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Viral Asymptomatic vs Baseline Asymptomatic#
########################
# create factors and factor_names#
grp1 = "v_as"#
grp2 = "bl_as"#
factors = list(grp1, grp2)#
factor_names = c("Viral Asymptomatic", "Baseline Asymptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_asymp_vs_baseline_asymp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Viral Symptomatic vs Bacteria#
########################
# create factors and factor_names#
grp1 = "v_s"#
grp2 = "bc"#
factors = list(grp1, grp2)#
factor_names = c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_symp_vs_bacteria")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Baseline Symptomatic vs Baseline Asymptomatic#
########################
# create factors and factor_names#
grp1 = "bl_s"#
grp2 = "bl_as"#
factors = list(grp1, grp2)#
factor_names = c("Baseline Symptomatic", "Baseline Asymptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("baseline_symp_vs_baseline_asymp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Bacteria vs Baseline#
########################
# create factors and factor_names#
grp1 = "bc"#
grp2 = c("bl_s", "bl_as")#
factors = list(grp1, grp2)#
factor_names = c("Bacteria", "Baseline")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("bacteria_vs_baseline")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Sick vs Baseline#
########################
# create factors and factor_names#
grp1 = c("bc", "v_s", "v_as")#
grp2 = c("bl_s", "bl_as")#
factors = list(grp1, grp2)#
factor_names = c("Sick", "Baseline")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("sick_vs_baseline")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
load("Data_in/data_frames.r")#
load("Data_in/saved_sample_factors.r")#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# Load create_df_sub function#
create_df_sub = dget("R_Code/Classifiers/create_df_sub.r")#
# Load do_log_reg function#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# make function to create subdirectories#
make_sub_dirs = function(name) {#
	dir.create(paste(main_dir, name, sep=""))#
	dir.create(paste(main_dir, name, "/ridge", sep=""))#
	dir.create(paste(main_dir, name, "/lasso", sep=""))#
	sub_dir_ridge = paste(main_dir, name, "/ridge/", sep="")#
	sub_dir_lasso = paste(main_dir, name, "/lasso/", sep="")#
	sub_dirs = c(sub_dir_ridge, sub_dir_lasso)#
}#
#
########################
# Viral Symptomatic vs Baseline Symptomatic#
########################
# create factors and factor_names#
grp1 = "v_s"#
grp2 = "bl_s"#
factors = list(grp1, grp2)#
factor_names = c("Viral Symptomatic", "Baseline Symptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_symp_vs_baseline_symp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Viral Asymptomatic vs Baseline Asymptomatic#
########################
# create factors and factor_names#
grp1 = "v_as"#
grp2 = "bl_as"#
factors = list(grp1, grp2)#
factor_names = c("Viral Asymptomatic", "Baseline Asymptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_asymp_vs_baseline_asymp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Viral Symptomatic vs Bacteria#
########################
# create factors and factor_names#
grp1 = "v_s"#
grp2 = "bc"#
factors = list(grp1, grp2)#
factor_names = c("Viral Symptomatic", "Bacteria")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("viral_symp_vs_bacteria")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Baseline Symptomatic vs Baseline Asymptomatic#
########################
# create factors and factor_names#
grp1 = "bl_s"#
grp2 = "bl_as"#
factors = list(grp1, grp2)#
factor_names = c("Baseline Symptomatic", "Baseline Asymptomatic")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("baseline_symp_vs_baseline_asymp")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Bacteria vs Baseline#
########################
# create factors and factor_names#
grp1 = "bc"#
grp2 = c("bl_s", "bl_as")#
factors = list(grp1, grp2)#
factor_names = c("Bacteria", "Baseline")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("bacteria_vs_baseline")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])#
#
########################
# Sick vs Baseline#
########################
# create factors and factor_names#
grp1 = c("bc", "v_s", "v_as")#
grp2 = c("bl_s", "bl_as")#
factors = list(grp1, grp2)#
factor_names = c("Sick", "Baseline")#
# get df_sub#
df_sub = create_df_sub(df, sample_factors, factors, factor_names)#
# create directories#
sub_dirs = make_sub_dirs("sick_vs_baseline")#
# perform logistic regression#
do_log_reg(df_sub, 0, sub_dirs[0])#
do_log_reg(df_sub, 1, sub_dirs[1])
warnings()
