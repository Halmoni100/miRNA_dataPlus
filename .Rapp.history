# Load packages#
library("gplots", lib="R_packages")#
#
# insert data set#
known_data <- read.delim("Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# make log2 heat map#
log2_data <- log2(raw_data + 1)#
heatmap.2(log2_data, trace="none")#
#
#choosing zero counts#
zero_data <- length(raw_data[which(raw_data == 0),])#
View(zero_data)
# Load packages#
library("gplots", lib="R_packages")#
#
# insert data set#
known_data <- read.delim("Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# make log2 heat map#
log2_data <- log2(raw_data + 1)#
heatmap(log2_data)#
#
#choosing zero counts#
zero_data <- length(raw_data[which(raw_data == 0),])#
View(zero_data)
# insert data set#
known_data <- read.delim("Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# make log2 heat map#
log2_data <- log2(raw_data + 1)#
heatmap(log2_data)#
#
#choosing zero counts#
zero_data <- length(raw_data[which(raw_data == 0),])#
View(zero_data)
# insert data set#
known_data <- read.delim("Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# UQ normalization function#
UQNorm <- function(v) {#
    quartiles <- quantile(v)#
    uq <- quartiles[4]#
    v <- v / uq#
    return(v)#
}#
#
# normalize data#
norm_data <- apply(raw_data, 1, UQNorm)
norm_data
head(norm_data)
str(raw_data)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proprotions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])
raw_data
head(raw_data)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#PCA analysis#
pca1 = prcomp(raw_data, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)
str(pca1)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)
str(raw_data)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, function())#
raw_data <- raw_data[only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
#
pca_comp_1_viral <- pca_comp_1[1:21,]#
pca_comp_1_baseline <- pca_comp_1[22:42,]#
pca_comp_1_bacteria <- pca_comp_1[43:52,]#
pca_comp_2_viral <- pca_comp_2[1:21,]#
pca_comp_2_baseline <- pca_comp_2[22:42,]#
pca_comp_2_bacteria <- pca_comp_2[43:52,]#
#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red")#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="yellow")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_result <- data.matrix(pca_result)#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
#
pca_comp_1_viral <- pca_comp_1[1:21,]#
pca_comp_1_baseline <- pca_comp_1[22:42,]#
pca_comp_1_bacteria <- pca_comp_1[43:52,]#
pca_comp_2_viral <- pca_comp_2[1:21,]#
pca_comp_2_baseline <- pca_comp_2[22:42,]#
pca_comp_2_bacteria <- pca_comp_2[43:52,]#
#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red")#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="yellow")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red")#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="yellow")
head(pca_comp_1_viral)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red")#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="yellow")#
#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red")#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="yellow")#
#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red")#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="yellow")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red")#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="yellow")#
#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red")#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="yellow")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red")#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red")#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red")#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red")#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red")#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
pca_comp_3_bacteria
pca_comp_3_viral
min(pca_comp_3_bacteria)
max(pca_comp_3_bacteria)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
pca_comp_3_bacteria#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3))))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3))))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <- read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
class(raw_data)#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
#PCA analysis#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
pca_comp_3_bacteria#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# remove miRDeep2 "norm" data#
known_data <- known_data[,1:56]#
#
# extract raw data into matrix (just #s)#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
write.matrix(raw_data, file = "raw_data.txt")
getwd()
header(raw_data)
head(raw_data)
head(known_data)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
write.matrix(raw_data, file = "raw_data.txt")
search()
library()
# load package for data i/o#
library("MASS")#
#
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
write.matrix(raw_data, file = "raw_data.txt")
# load package for data i/o#
library("MASS")#
#
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
write.matrix(raw_data, file = "raw_data.txt")#
#
raw_data_test <- scan(file="raw_data.txt", what = matrix(), sep = " ")
# load package for data i/o#
library("MASS")#
#
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
write.matrix(raw_data, file = "raw_data.txt")#
#
raw_data_test <- scan(file="raw_data.txt", what = integer(), sep = " ")
# load package for data i/o#
library("MASS")#
#
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# retrieve sample names, get rid of sample names in matrix#
sample_names <- raw_data[1,]#
raw_data <- raw_data[-1,]#
#
# set row and col names#
row.names(raw_data) <- miRNA_names#
col.names(raw_data) <- sample_names#
#
write.matrix(raw_data, file = "raw_data.txt")#
#
raw_data_test <- scan(file="raw_data.txt", what = integer(), sep = " ")
# load package for data i/o#
library("MASS")#
#
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# retrieve sample names, get rid of sample names in matrix#
sample_names <- raw_data[1,]#
raw_data <- raw_data[-1,]#
head(raw_data)#
# set row and col names#
row.names(raw_data) <- miRNA_names#
col.names(raw_data) <- sample_names
head(known_data)
# load package for data i/o#
library("MASS")#
#
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
write.matrix(raw_data, file = "raw_data.txt")#
#
raw_data_test <- scan(file="raw_data.txt", what = integer(), sep = " ", skip = 1)
head(raw_data_test)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save(raw_data, c("raw_data.r"))#
#
raw_data <- load("raw_data.r")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save("raw_data.r", "raw_data")#
#
raw_data <- load("raw_data.r")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save("raw_data", "raw_data.r")#
#
raw_data <- load("raw_data.r")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save.image("retrieve_data.RData")
# Retrieve Data#
load("retrieve_data.RData")#
#
###############
Preliminary Testing (zero proportions)#
###############
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
###############
Delete data w/ no info#
###############
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
###############
PCA analysis#
###############
#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
pca_comp_3_bacteria#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save(raw_data, file="saved_raw_data")
# Retrieve Data#
load("saved_raw_data")#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
###############
Delete data w/ no info#
###############
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
###############
PCA analysis#
###############
#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
pca_comp_3_bacteria#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
# Retrieve Data#
# raw_data retreived#
load("saved_raw_data")#
#
# Delete data w/ no info#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
pca_comp_3_bacteria#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save(raw_data, file="saved_raw_data")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/miRDeep2_Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save(raw_data, file="R_Data/saved_raw_data")
getwd()
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus")#
known_data <-read.delim("miRDeep2_Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
save(raw_data, file="R_Data/saved_raw_data")
#Retrieve Data#
# raw_data retrieved#
load("R_Data/saved_raw_data")#
# zero_props_miRNA retrieved#
load("R_Data/saved_zero_props_miRNA")#
#
# delete miRNAs that have >50% zeros#
over_50 <- zero_props_miRNA > 0.5#
processed_data <- raw_data[!over_50,]#
head(processed_data)#
#
save(processed_data, file="R_Data/saved_processed_data")
# Retrieve Data#
# raw_data retrieved#
load("R_Data/saved_raw_data")#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# save zero proportions (zero_count / len)#
zero_props_miRNA <- zero_counts_miRNA[1,]#
save(zero_props_miRNA, file="R_Data/saved_zero_props_miRNA")
# insert data set#
known_data <-read.delim("miRDeep2_Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# save raw data#
save(raw_data, file="R_Data/saved_raw_data")#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# save zero proportions (zero_count / len)#
zero_props_miRNA <- zero_counts_miRNA[1,]#
save(zero_props_miRNA, file="R_Data/saved_zero_props_miRNA")#
#
# delete miRNAs that have >50% zeros#
over_50 <- zero_props_miRNA > 0.5#
processed_data <- raw_data[!over_50,]#
head(processed_data)#
#
# save processed data#
save(processed_data, file="R_Data/saved_processed_data")
# insert data set#
known_data <-read.delim("miRDeep2_Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# save raw data#
save(raw_data, file="R_Data/saved_raw_data")#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
#
# save zero proportions (zero_count / len)#
zero_props_miRNA <- zero_counts_miRNA[1,]#
save(zero_props_miRNA, file="R_Data/saved_zero_props_miRNA")#
#
# delete miRNAs that have >50% zeros#
over_50 <- zero_props_miRNA > 0.5#
processed_data <- raw_data[!over_50,]#
#
# save processed data#
save(processed_data, file="R_Data/saved_processed_data")
head(processed_data)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# UQ normalization function#
UQNorm <- function(v) {#
    quartiles <- quantile(v)#
    uq <- quartiles[4]#
    v <- v / uq#
    return(v)#
}#
#
# normalize data#
norm_data <- apply(processed_data, 1, UQNorm)
# Retrieve Data#
# raw_data retreived#
load("R_Data/saved_raw_data")#
#
# make log2 heat map#
log2_data <- log2(raw_data + 1)#
heatmap(log2_data)
# Load packages#
library("gplots", lib="R_packages")#
#
# Retrieve Data#
# raw_data retreived#
load("R_Data/saved_raw_data")#
#
# make log2 heat map#
log2_data <- log2(raw_data + 1)#
heatmap.2(log2_data, trace="none")
head(raw_data)
# Load packages#
library("gplots", lib="R_packages")#
#
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# make log2 heat map#
log2_data <- log2(processed_data + 1)#
heatmap.2(log2_data, trace="none")
# Load packages#
library("gplots", lib="R_packages")#
#
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# log2 data#
log2_data <- log2(processed_data + 1)#
#
# make log2 heat map (R heatmap function)#
heatmap(log2_data)#
#
# make log2 heat map (gplots heatmap function)#
heatmap.2(log2_data, trace="none")
# Load packages#
library("gplots", lib="R_packages")#
#
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# log2 data#
log2_data <- log2(processed_data + 1)#
#
# make log2 heat map (R heatmap function)#
heatmap(log2_data)#
#
# make log2 heat map (gplots heatmap function)#
quartz()#
heatmap.2(log2_data, trace="none")
# Load packages#
library("gplots", lib="R_packages")#
#
# Retrieve Data#
# raw_data retreived#
load("R_Data/saved_raw_data")#
# processed_data retreived#
load("R_Data/saved_processed_data")#
# log2 data#
log2_data_raw <- log2(raw_data + 1)#
log2_data_proc <- log2(processed_data + 1)#
#
# make processed log2 heat map (R heatmap function)#
heatmap(log2_data_raw)#
quartz()#
heatmap(log2_data_proc)#
#
# make log2 heat map (gplots heatmap function)#
quartz()#
heatmap.2(log2_data, trace="none")
# Retrieve Data#
# raw_data retreived#
load("R_Data/saved_raw_data")#
#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
#
#PCA analysis#
#source:http://gastonsanchez.com/blog/how-to/2012/06/17/PCA-in-R.html#
pca1 = prcomp(raw_data, scale. = TRUE)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
# PC 1 vs PC 2#
pca_comp_3_bacteria#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
# PC 1 vs PC 3#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
# PC 2 vs PC 3#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
head(raw_data)
# Retrieve Data#
# raw_data retreived#
load("R_Data/saved_raw_data")#
#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
#
#PCA analysis#
#source:http://gastonsanchez.com/blog/how-to/2012/06/17/PCA-in-R.html#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]
# Retrieve Data#
# raw_data retreived#
load("R_Data/saved_raw_data")#
#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
#
#PCA analysis#
#source:http://gastonsanchez.com/blog/how-to/2012/06/17/PCA-in-R.html#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
# PC 1 vs PC 2#
pca_comp_3_bacteria#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
# PC 1 vs PC 3#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
# PC 2 vs PC 3#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
str(raw_data)
# Retrieve Data#
# raw_data retreived#
load("R_Data/saved_raw_data")#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
    sum <- sum(v)#
    if (sum == 0) {#
        return(TRUE)#
    }#
    return(FALSE)#
}#
# Delete data w/ no info#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
#
#PCA analysis#
#source:http://gastonsanchez.com/blog/how-to/2012/06/17/PCA-in-R.html#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
# PC 1 vs PC 2#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
# PC 1 vs PC 3#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
# PC 2 vs PC 3#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
paste("1st","2nd","3rd")
paste(1,2,3)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector("list", n)#
pcs_viral = vector("list", n)#
pcs_baseline = vector("list", n)#
pcs_bacteria = vector("list", n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[j])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector("list", n)#
pcs_viral = vector("list", n)#
pcs_baseline = vector("list", n)#
pcs_bacteria = vector("list", n)#
for (i in 1:n) {#
	pcs_all[i] = pca_result[,i]#
	pcs_viral[i] = pca_result[1:21,i]#
	pcs_baseline[i] = pca_result[22:42,i]#
	pcs_bacteria[i] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
warnings()
class(pcs_all)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
warnings()
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
pcs_viral[[1]]
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
warnings()
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
warnings()
str(pcs_viral[1])
str(pcs_viral[2])
str(pcs_baseline[1])
str(pcs_baseline[2])
str(pcs_bacteria[1])
str(pcs_bacteria[2])
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		length(pcs_viral[i])#
		length(pcs_viral[j])#
		length(pcs_baseline[i])#
		length(pcs_baseline[j])#
		length(pcs_bacteria[i])#
		length(pcs_bacteria[j])#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
		length(pcs_viral[1])#
		length(pcs_viral[2])#
		length(pcs_baseline[1])#
		length(pcs_baseline[2])#
		length(pcs_bacteria[1])#
		length(pcs_bacteria[2])#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
		length(pcs_viral[[1]])#
		length(pcs_viral[[2]])#
		length(pcs_baseline[[1]])#
		length(pcs_baseline[[2]])#
		length(pcs_bacteria[[1]])#
		length(pcs_bacteria[[2]])#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
for (i in 1:3) {i}
or (i in 1:3) {print(i)}
for (i in 1:3) {print(i)}
warnings()
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		print(length(pcs_viral[[i]]))#
		print(length(pcs_viral[[j]]))#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
for (i in 1:n-1) {#
	print(pcs_viral[[i]])#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
for (i in 1:n-1) {#
	print(pcs_viral[[j]])#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
for (i in 1:n-1) {#
	print(i)#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		#plot.new()#
		#frame()#
		#plot_name <- paste(i,"vs",j)#
		#dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		#jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		#dev.off()#
	}#
}
quartz()
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse="")#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse="", res=500)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse="")#
		jpeg(dir_name, res=500)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse="")#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse="")#
		jpng(dir_name, 500, 500)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse="")#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
# all code below here is adapted from http://davetang.org/muse/2014/07/07/quantile-normalisation-in-r/#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
#
# graph the normalized data on a histogram#
hist(quantile_norm_data)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
PCA(uqnorm, 4)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
PCA <- dget("PCA.R")#
PCA(uqnorm, 4)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
PCA <- dget("PCA")#
PCA(uqnorm, 4)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
PCA <- dget("PCA.r")#
PCA(uqnorm, 4)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
PCA <- dget("Preliminary_Steps/PCA.r")#
PCA(uqnorm, 4)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
logged <- log2(uqnorm + 1)#
PCA <- dget("Preliminary_Steps/PCA.r")#
PCA(logged, 4)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
logged <- log2(uqnorm + 1)#
PCA <- dget("Preliminary_Steps/PCA.r")#
PCA(logged, 6)
install.packages("FactoMineR")
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
logged <- log2(uqnorm + 1)#
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
class(pca_analysis)
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
n
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
print(n)
pca_analysis(logged,5)
pca_analysis <- dget("Preliminary_Steps/PCA.r")
pca_analysis(logged,5)
pca_analysis <- dget("Preliminary_Steps/PCA.r")
pca_analysis(logged,5)
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
> pca_analysis(logged,5)
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
pca_analysis
pca_analysis <- dget("Preliminary_Steps/PCA.r")
pca_analysis
pca_analysis(logged, 6)
pca_analysis
head(logged)
pca_df = PCA(logged)
pca_df = PCA(t(logged))
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
class(PCA)
PCA
rm(PCA)
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
function(data, num) {#
# Load package#
library(FactoMineR)#
#
# PCA analysis#
pca_df = PCA(t(data))#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$ind$coord#
#
pcs_all = vector(mode="list", length=num)#
pcs_viral = vector(mode="list", length=num)#
pcs_baseline = vector(mode="list", length=num)#
pcs_bacteria = vector(mode="list", length=num)#
for (i in 1:num) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- num - 1#
to_j <- num#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA", plot_name, ".jpeg", collapse="")#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}#
#
}
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
pca_analysis <- dget("Preliminary_Steps/analyze_PCs.r")#
pca_analysis(logged, 6)
pca_analysis <- dget("Preliminary_Steps/analyze_PCs.r")#
pca_analysis(logged, 10)
pca_analysis <- dget("Preliminary_Steps/analyze_PCs.r")#
pca_analysis(uqnorm, 10)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
logged <- log2(uqnorm + 1)#
pca_analysis <- dget("Preliminary_Steps/analyze_PCs.r")#
pca_analysis(logged, 25)
# Retrieve Data#
# logged_data retrieved#
load("R_data/saved_logged_data")#
#
# Read content table w/ sequence data#
seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table.txt")#
head(seq_df)#
#
# Create list for gc proportion#
gc_prop_list <- split(seq_df$miRNA, seq_df$gc_prop)#
head(gc_prop_list)
gc_prop_list <- seq_df$gc_prop#
names(gc_prop_list) <- seq_df$miRNA#
head(gc_prop_list)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
#
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
#
# finding mean of the of the uq samples#
U <- mean(Us)#
#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
# log norm data, save it#
logged_data <- log2(uqnorm + 1)#
save(logged_data, file="R_data/saved_logged_data")#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles)#
#
	return(quantiles[uqnorm_rank])#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
head(quantile_norm_data)
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
head(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	print(quantiles)#
	return(quantiles[uqnorm_rank])#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
head(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	print(head(quantiles[uqnorm_rank])#
	return(quantiles[uqnorm_rank])#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
head(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	ordered_quantiles <- quantiles[uqnorm_rank]#
	return(ordered_quantiles)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
head(quantile_norm_data)
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
head(quantile_norm_data)
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
class(quantile_norm_data)
rm(quantile_norm_data)
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
class(quantile_norm_data)
head(quantile_norm_data)
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	str(out)#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	head(out)#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(str(out))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
x <- c(1,2,3,4)
x <- c(2,4,6,8)
y <- x[3,2,1,4]
y <- x[c(3,2,1,4)]
y
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(length(quantiles))#
	print(length(uqnorm_rank))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	head(uqnorm_rank)#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(length(quantiles))#
	print(length(uqnorm_rank))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	print(head(uqnorm_rank))#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(length(quantiles))#
	print(length(uqnorm_rank))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	print(str(uqnorm_rank))#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(length(quantiles))#
	print(length(uqnorm_rank))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	print(str(uqnorm_rank))#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(str(quantiles))#
	print(str(uqnorm_rank))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	print(uqnorm_sorted)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(str(quantiles))#
	print(str(uqnorm_rank))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
#
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
#
# finding mean of the of the uq samples#
U <- mean(Us)#
#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
# log norm data, save it#
logged_data <- log2(uqnorm + 1)#
save(logged_data, file="R_data/saved_logged_data")#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	### I think we should be sorting by sample#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	### Not sure about the divide by number, ask Ashlee to clarify#
	makingquantiles <- sampling_vector / 51#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	### Initialize quant_norm matrix#
	quant_norm <- matrix(, nrow(uqnorm), ncol(uqnorm))#
	# create for loop to sort every quantile based on rank#
	### So the for loop should go through each sample (column)#
	### Return sorted quantiles vector for each loop based on rank vectors in uqnorm_rank#
	for (i in ncol(uqnorm)) {#
		quant_norm[,i] <- quantiles[uqnorm_rank[,i]]#
	}#
	### return quantile normalized matrix#
	return(quant_norm)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
