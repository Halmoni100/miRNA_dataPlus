x <- c(x,x2)
y <- c(y, y2)
plot(x,y)
x <- c(.09, .19, .2, .25, .3, .4)
x1 <- c(.09, .19, .2, .25, .3, .4)
y1 <- c(.09, .43, .3, .1, .4, .25)
x2 <- x2 + .3
y2 <- y2 + .3
plot(c(x1,x2), c(y1,y2))
x <- c(x1, x2)
y <- c(y1, y2)
save(x, x1, x2, y, y1, y2, file="Data_in/permtest_expl_vars.r")
plot(x1, x2, pch="o")
plot(x1,x2)
plot(x1,y1)
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1)#
points(x2, y2, pch="4")
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1)#
points(x2, y2, pch=4)
warnings()
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1)#
points(x2, y2)
plot(x2, y2)
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1)#
lines(x2, y2)
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1, xlim=range(c(x1,x2)), ylim=range(c(y1,y2)))#
lines(x2, y2)
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1, xlim=range(c(x1,x2)), ylim=range(c(y1,y2)))#
points(x2, y2, pch=4)
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1, xlim=range(c(x1,x2)), ylim=range(c(y1,y2)), col="blue")#
points(x2, y2, pch=4, col="red")
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1, xlim=range(c(x1,x2)), ylim=range(c(y1,y2)), col="blue")#
points(x2, y2, pch=4, col="red")#
#
x_rand <- sample(c(x1,x2))#
y_rand <- sample(c(y1,y2))#
xr1 <- x_rand[1:6]#
xr2 <- x_rand[7:12]#
yr1 <- y_rand[1:6]#
yr2 <- y_rand[7:12]#
#
quartz()#
plot(xr1, yr1, xlim=range(c(xr1,xr2)), ylim=range(c(yr1,yr2)), col="blue")#
points(xr2, yr2, pch=4, col="red")
x <- c(1,2,3)
sample(x)
x <- c(4,5,6)
sample(x)
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1, xlim=range(c(x1,x2)), ylim=range(c(y1,y2)), col="blue")#
points(x2, y2, pch=4, col="red")#
#
rand_indices = sample(1:12)#
x = c(x1,x2)#
y = c(y1,y2)#
xr1 = vector(length=6)#
xr2 = vector(length=6) #
yr1 = vector(length=6) #
yr2 = vector(length=6) #
for (i in 1:6) {#
	xr1[i] <- x[rand_indices[i]]#
	yr1[i] <- y[rand_indices[i]]#
}#
for (i in 1:6) {#
	xr2[i] <- x[rand_indices[i+6]]#
	yr2[i] <- y[rand_indices[i+6]]#
}#
#
quartz()#
plot(xr1, yr1, xlim=range(c(xr1,xr2)), ylim=range(c(yr1,yr2)), col="blue")#
points(xr2, yr2, pch=4, col="red")
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1, xlim=range(c(x1,x2)), ylim=range(c(y1,y2)), col="blue")#
points(x2, y2, pch=4, col="red")#
#
set.seed(1)#
rand_indices = sample(1:12)#
x = c(x1,x2)#
y = c(y1,y2)#
xr1 = vector(length=6)#
xr2 = vector(length=6) #
yr1 = vector(length=6) #
yr2 = vector(length=6) #
for (i in 1:6) {#
	xr1[i] <- x[rand_indices[i]]#
	yr1[i] <- y[rand_indices[i]]#
}#
for (i in 1:6) {#
	xr2[i] <- x[rand_indices[i+6]]#
	yr2[i] <- y[rand_indices[i+6]]#
}#
#
quartz()#
plot(xr1, yr1, xlim=range(c(xr1,xr2)), ylim=range(c(yr1,yr2)), col="blue")#
points(xr2, yr2, pch=4, col="red")
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1, xlim=range(c(x1,x2)), ylim=range(c(y1,y2)), col="blue", xlab="x", ylab="y")#
points(x2, y2, pch=4, col="red")#
#
set.seed(1)#
rand_indices = sample(1:12)#
x = c(x1,x2)#
y = c(y1,y2)#
xr1 = vector(length=6)#
xr2 = vector(length=6) #
yr1 = vector(length=6) #
yr2 = vector(length=6) #
for (i in 1:6) {#
	xr1[i] <- x[rand_indices[i]]#
	yr1[i] <- y[rand_indices[i]]#
}#
for (i in 1:6) {#
	xr2[i] <- x[rand_indices[i+6]]#
	yr2[i] <- y[rand_indices[i+6]]#
}#
#
quartz()#
plot(xr1, yr1, xlim=range(c(xr1,xr2)), ylim=range(c(yr1,yr2)), col="blue", xlab="x", ylab="y")#
points(xr2, yr2, pch=4, col="red")
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1, xlim=range(c(x1,x2)), ylim=range(c(y1,y2)), col="blue", xlab="x", ylab="y", axes=FALSE)#
points(x2, y2, pch=4, col="red")#
#
set.seed(1)#
rand_indices = sample(1:12)#
x = c(x1,x2)#
y = c(y1,y2)#
xr1 = vector(length=6)#
xr2 = vector(length=6) #
yr1 = vector(length=6) #
yr2 = vector(length=6) #
for (i in 1:6) {#
	xr1[i] <- x[rand_indices[i]]#
	yr1[i] <- y[rand_indices[i]]#
}#
for (i in 1:6) {#
	xr2[i] <- x[rand_indices[i+6]]#
	yr2[i] <- y[rand_indices[i+6]]#
}#
#
quartz()#
plot(xr1, yr1, xlim=range(c(xr1,xr2)), ylim=range(c(yr1,yr2)), col="blue", xlab="x", ylab="y", axes=FALSE)#
points(xr2, yr2, pch=4, col="red")
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1, xlim=range(c(x1,x2)), ylim=range(c(y1,y2)), col="blue", xlab="x", ylab="y", xaxt="n")#
points(x2, y2, pch=4, col="red")#
#
set.seed(1)#
rand_indices = sample(1:12)#
x = c(x1,x2)#
y = c(y1,y2)#
xr1 = vector(length=6)#
xr2 = vector(length=6) #
yr1 = vector(length=6) #
yr2 = vector(length=6) #
for (i in 1:6) {#
	xr1[i] <- x[rand_indices[i]]#
	yr1[i] <- y[rand_indices[i]]#
}#
for (i in 1:6) {#
	xr2[i] <- x[rand_indices[i+6]]#
	yr2[i] <- y[rand_indices[i+6]]#
}#
#
quartz()#
plot(xr1, yr1, xlim=range(c(xr1,xr2)), ylim=range(c(yr1,yr2)), col="blue", xlab="x", ylab="y", xaxt="n")#
points(xr2, yr2, pch=4, col="red")
x1 = c(.09, .19, .2, .25, .3, .4)#
y1 = c(.09, .43, .3, .1, .4, .25)#
x2 = c(.68, .7, .82, .66, .91, 1.02)#
y2 = c(.6, 1, .9, .7, 1, .85)#
#
plot(x1, y1, xlim=range(c(x1,x2)), ylim=range(c(y1,y2)), col="blue", xlab="x", ylab="y", xaxt="n", yaxt="n")#
points(x2, y2, pch=4, col="red")#
#
set.seed(1)#
rand_indices = sample(1:12)#
x = c(x1,x2)#
y = c(y1,y2)#
xr1 = vector(length=6)#
xr2 = vector(length=6) #
yr1 = vector(length=6) #
yr2 = vector(length=6) #
for (i in 1:6) {#
	xr1[i] <- x[rand_indices[i]]#
	yr1[i] <- y[rand_indices[i]]#
}#
for (i in 1:6) {#
	xr2[i] <- x[rand_indices[i+6]]#
	yr2[i] <- y[rand_indices[i+6]]#
}#
#
quartz()#
plot(xr1, yr1, xlim=range(c(xr1,xr2)), ylim=range(c(yr1,yr2)), col="blue", xlab="x", ylab="y", xaxt="n", yaxt="n")#
points(xr2, yr2, pch=4, col="red")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_dfs.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_names.r")
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}
install.packages("pROC")
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}
do_log_reg = function(df_sub, type, dir) {#
# Performs logistic regression on the data frame df_sub#
# Arguments:#
# df_sub - data frame; column y (the last column) represents response#
# type - integer describing regularization; 0 for ridge, 1 for lasso#
# dir - directory to save results#
#
	# Load glmnet#
	library(glmnet)#
	# get nrow (m) and ncol (n) of X, the matrix without the response#
	m = nrow(df_sub)#
	n = ncol(df_sub) - 1#
	# define X as the matrix without the response#
	X = data.matrix(df_sub[ ,1:n])#
	# define y as the response#
	y = df_sub$y#
#
	# Check order of categories, print out#
	factor_order = levels(y)#
	write.table(factor_order, file=paste(dir, "factor_order.txt", sep=""), sep="\t",#
			 quote=FALSE, col.names=FALSE)#
	# Do leave one out cross validation#
	cv.out = cv.glmnet(X, y, family="binomial",#
			type.measure="auc", alpha=1, nfolds=m)#
	# Plot misclassification rates from LOOCV vs lambda parameter#
	jpeg(paste(dir, "loocv_misclassification_rates.jpeg", sep=""))#
	plot(cv.out)#
	dev.off()#
	# Choose best lambda from LOOCV#
	bestlam = cv.out$lambda.min#
	# Do lasso logistic regression on all of the data using best lambda#
	lasso.mod = glmnet(X, y, family="binomial", alpha=type)#
	lasso.coef = predict(lasso.mod, type="coefficients", s=bestlam)#
	# Print out coefficients#
	indices = rownames(lasso.coef)#
	nonzero_coef = matrix(, nrow=0, ncol=2)#
	colnames(nonzero_coef) = c("index", "coef")#
	for (i in 2:length(lasso.coef)) {#
		if (abs(lasso.coef[i]) > 0) {#
			feat_string = indices[i]#
			index_string = substring(feat_string, 2)#
			index = as.integer(index_string)#
			new_coef = c(index, lasso.coef[i])#
			nonzero_coef = rbind(nonzero_coef, new_coef)#
		}#
	}#
	nonzero_coef_df = as.data.frame(nonzero_coef)#
	lr_nonzero_coef_sorted = nonzero_coef_df[order(-abs(nonzero_coef_df$coef)),]#
	rownames(lr_nonzero_coef_sorted) = NULL#
	write.table(lr_nonzero_coef_sorted, file=paste(dir, "coefs.txt", sep=""), sep="\t",#
			row.names=FALSE)#
	# Do LOOCV manually, plot ROC curve#
	# http://stackoverflow.com/questions/18292419/how-to-obtain-auc-using-leave-one-out-cross-validation-in-r#
	predictions <- c()#
	for (i in 1:m) {#
		model <- glmnet(X[-i,], y[-i], family="binomial")#
		predictions <- c(predictions, predict(model, newx=X[i,]))#
	}#
	library(pROC)#
	quartz()#
	roc(y, predictions)#
}
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}
y = bin_comp_dfs[[1]]$y
class(y)
X = bin_comp_dfs[[1]]$-y
X = bin_comp_dfs[[1]][,-y]
X = bin_comp_dfs[[1]]
X$y = NULL
head()
head(X)
X = as.matrix(X)
model = glmnet(X, y, family="binomial")
model = glmnet(X[-1,], y[-1], family="binomial")
pred = predict(model, newx=X[1,])
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}
warnings()
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}#
#
# Plot ROC curves#
library(pROC)#
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot.new()#
for (i in bin_comps_to_plot) {#
	roc_set = roc_data[[i]]#
	bin_comp.loocv_roc = roc(roc_set[1], roc_set[2])#
	plot(bin_comp.loocv_roc)#
}#
dev.off()
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_dfs.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_names.r")
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}#
#
# Plot ROC curves#
library(pROC)#
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot.new()#
for (i in bin_comps_to_plot) {#
	roc_set = roc_data[[i]]#
	bin_comp.loocv_roc = roc(roc_set[1], roc_set[2])#
	plot(bin_comp.loocv_roc)#
}#
dev.off()
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}#
#
# Plot ROC curves#
library(pROC)#
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot.new()#
for (i in bin_comps_to_plot) {#
	roc_set = roc_data[[i]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc)#
}#
dev.off()
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}#
#
# Plot ROC curves#
library(pROC)#
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[bin_comp_num]], roc_set[[bin_comp_num]])#
	plot(bin_comp.loocv_roc, col=plot_colors[i])#
}#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, col=plot_colors[i])#
}#
dev.off()
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}#
#
# Plot ROC curves#
library(pROC)#
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	lines(bin_comp.loocv_roc, col=plot_colors[i])#
}#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i])#
}#
dev.off()
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_dfs.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_names.r")
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}#
#
# Plot ROC curves#
library(pROC)#
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i])#
}#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend(legend=c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"))#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend(x=0, legend=c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"))#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend(x=3, legend=c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"))#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend(x=.2, legend=c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"))#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend(x=-.2, legend=c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"))#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend(x=.4, legend=c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"))#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend(x=1, legend=c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"))#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend(x=1, y=1, legend=c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"))#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend(x=1, y=0, legend=c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"))#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[2]], roc_set[[1]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
plot.new()#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend = legend(x=0, c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"))#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend = legend(x=.5, c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"))#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend = legend(x=.5, y=.5, c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"))#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend = legend(x=.5, y=.5, c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"), col=plot_colors)#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
legend = legend(x=.5, y=.5, c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline"), fill=plot_colors)#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
titles = c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
# get auc values#
auc_vals = vector(length=3)#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=3)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "\t AUC: ", auc_vals[i],sep="")#
}#
# plot legend#
legend = legend(x=.5, y=.5, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}#
#
# Plot ROC curves#
library(pROC)#
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
titles = c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
# get auc values#
auc_vals = vector(length=3)#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=3)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "\t AUC: ", auc_vals[i],sep="")#
}#
# plot legend#
legend = legend(x=.5, y=.5, legend=legend_titles, fill=plot_colors)#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
titles = c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
# get auc values#
auc_vals = vector(length=3)#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=3)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "\t AUC: ", auc_vals[i],sep="")#
}#
# plot legend#
legend = legend(x=.3, y=.5, legend=legend_titles, fill=plot_colors)#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
titles = c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
# get auc values#
auc_vals = vector(length=3)#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=3)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "\t AUC: ", auc_vals[i],sep="")#
}#
# plot legend#
legend = legend(x=.7, y=.5, legend=legend_titles, fill=plot_colors)#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
titles = c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
# get auc values#
auc_vals = vector(length=3)#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=3)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4, sep="")#
}#
# plot legend#
legend = legend(x=.7, y=.5, legend=legend_titles, fill=plot_colors)#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
titles = c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
# get auc values#
auc_vals = vector(length=3)#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=3)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=.5, legend=legend_titles, fill=plot_colors)#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
titles = c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
# get auc values#
auc_vals = vector(length=3)#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=3)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=.3, legend=legend_titles, fill=plot_colors)#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
titles = c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
# get auc values#
auc_vals = vector(length=3)#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=3)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0, legend=legend_titles, fill=plot_colors)#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
titles = c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
# get auc values#
auc_vals = vector(length=3)#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=3)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.1, legend=legend_titles, fill=plot_colors)#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(3,4,6)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
titles = c("Viral Symp vs. Viral Asymp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
# get auc values#
auc_vals = vector(length=3)#
for (i in 1:3) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=3)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
warnings()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(4, 6)#
titles = c("Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}#
#
# Plot ROC curves#
library(pROC)#
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(4, 6)#
titles = c("Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("red", "green", "blue")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(4, 6)#
titles = c("Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_dfs.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_names.r")
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}#
#
# Plot ROC curves#
library(pROC)#
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}#
#
# Plot ROC curves#
library(pROC)#
jpeg(paste(main_dir, "roc_curves_combined.jpeg", sep=""))#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
coefs = read.csv("Data_in/log_reg_coefs.csv")#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coefs
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coefs = coef_in[,2:4]#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coefs = as.matrix(coef_in[,2:4])#
rownames(coefs) = coef_in[,1]#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coefs
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_mat = as.matrix(coef_in[,2:4])#
rownames(coef_mat) = coef_in[,1]#
coef_mat = t(coef_mat)#
#
coefs = table(coef_mat$)#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_mat = as.matrix(coef_in[,2:4])#
rownames(coef_mat) = coef_in[,1]#
coef_mat = t(coef_mat)#
#
coefs = table(coef_mat$VS_vs_BC, coef_mat$VS_vs_BC, coef_mat$BC_vs_BL)#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_mat = as.matrix(coef_in[,2:4])#
rownames(coef_mat) = coef_in[,1]#
coef_mat = t(coef_mat)#
#
coefs = table(coef_mat[,VS_vs_BC], coef_mat[,VS_vs_BC], coef_mat[,BC_vs_BL])#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_mat = as.matrix(coef_in[,2:4])#
rownames(coef_mat) = coef_in[,1]#
coef_mat = t(coef_mat)#
#
coefs = table(coef_mat[,1], coef_mat[,2], coef_mat[,3])#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coefs
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_df = coef_in[,2:4]#
rownames(coef_df) = coef_in[,1]#
coef_mat = t(coef_df)#
#
coefs = table(coef_mat[,1], coef_mat[,2], coef_mat[,3])#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coefs
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_df = coef_in[,2:4]#
rownames(coef_df) = coef_in[,1]#
coef_mat = t(coef_df)#
#
coefs = table(coef_mat$VS_vs_BC, coef_mat$VS_vs_BC coef_mat$BC_vs_BL)#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_df = coef_in[,2:4]#
rownames(coef_df) = coef_in[,1]#
coef_mat = t(coef_df)#
#
coefs = table(coef_mat$VS_vs_BC, coef_mat$VS_vs_BC, coef_mat$BC_vs_BL)#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coef_df
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_df = coef_in[,2:4]#
rownames(coef_df) = coef_in[,1]#
coef_df = t(coef_df)#
#
coefs = table(coef_df$VS_vs_BC, coef_df$VS_vs_BC, coef_df$BC_vs_BL)#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coef_df
coef_in[,1]
comps = as.vector(coef_in[,1])
comps
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_df = coef_in[,2:4]#
comps = as.vector(coef_in[,1])#
rownames(coef_df) = comps#
coef_df = t(coef_df)#
#
coefs = table(coef_df$VS_vs_BC, coef_df$VS_vs_BC, coef_df$BC_vs_BL)#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coefs
coef_df
comps
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_df = coef_in[,2:4]
coef_df
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_df = coef_in[,2:4]#
comps = as.vector(coef_in[,1])#
row.names(coef_df) = comps#
coef_df = t(coef_df)#
#
coefs = table(coef_df$VS_vs_BC, coef_df$VS_vs_BC, coef_df$BC_vs_BL)#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coef_df
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_df = coef_in[,2:4]#
comps = as.vector(coef_in[,1])#
row.names(coef_df) = comps
coef_df
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_df = coef_in[,2:4]#
comps = as.vector(coef_in[,1])#
row.names(coef_df) = comps#
coef_df = t(coef_df)#
#
coefs = table(coef_df$VS_vs_BLS, coef_df$VS_vs_BC, coef_df$BC_vs_BL)#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coef_df
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_df = coef_in[,2:4]#
comps = as.vector(coef_in[,1])#
row.names(coef_df) = comps#
coef_df = t(coef_df)#
#
coefs = table(coef_df$"VS_vs_BLS", coef_df$"VS_vs_BC", coef_df$"BC_vs_BL")#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coefs
coef_df
class(coef_df)
coef_in = read.csv("Data_in/log_reg_coefs.csv")#
#
coef_df = coef_in[,2:4]#
comps = as.vector(coef_in[,1])#
row.names(coef_df) = comps#
coef_df = t(coef_df)#
coef_df = as.data.frame(coef_df)#
#
coefs = table(coef_df$"VS_vs_BLS", coef_df$"VS_vs_BC", coef_df$"BC_vs_BL")#
barplot(coefs, main="Logistic Regression Coef (abs val)")
coefs
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_miRNA_names_proc.r")
miRNA_name_proc[200,86,199,195]
miRNA_names_proc[200,86,199,195]
miRNA_names_proc[c(200,86,199,195)]
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_dfs.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_names.r")
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}#
#
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.jpeg", sep=""), width=1000, height=1000)#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""), width=800, height=800)#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""), width=600, height=600)#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""), width=100, height=100)#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""), mar=10)#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_dfs.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_names.r")
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}#
#
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""), mar=10)#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""))#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""))#
par(mar=c(1,1,1,1))#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""), width=5, height=5)#
par(mar=c(1,1,1,1))#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""), width=8, height=8)#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""), width=5, height=5)#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""), width=6, height=6)#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""), width=7, height=6)#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = roc_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = roc_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = roc_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
ls()
feat_df[200,]
feat_df[201,]
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
feat_df[200,]
feat_df(feat_df$miRNA == "hsa-miR-486-3p")
which(feat_df$miRNA == "hsa-hiR-486-3p")
feat_df
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_conf_ints_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
load("Data_in/saved_p_vals.r")#
load("Data_in/saved_conf_ints_p_vals.r")#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
file_names <- #
for (i in 1:n) {#
	significant_miRNAs[[i]] <- bonferroni_adjust(i)#
}#
# compute false discovery rates (less conservative method than the bonferroni correction)#
fdr_significant_miRNAs <- list()#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# perform function for each column#
for (i in 1:7) {#
	fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
}#
#
head(fdr_significant_miRNAs[[i]]$p_val)#
# extract data frame out of the list#
for (i in 1:7) {#
	new_frame <- fdr_significant_miRNAs[[i]]#
	if (nrow(new_frame) > 0) {#
		adjusted_fdr_pvals <- new_frame$p_val#
		quartz()#
		plot_name <- paste("Test #", i)#
		hist(adjusted_fdr_pvals, main = plot_name)#
	}#
}
significant_miRNAs
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_names.r")
bin_comp_names
# Load the following...#
# data_frames#
#
log_df = apply(df, c(1,2), log)
l
ls
ls()
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
ls()
# Load the following...#
# data_frames#
#
log_df = apply(df, c(1,2), log)
warnings()
log_df
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_processed_data.r")
# Load the following...#
# processed_data#
#
logged_data = apply(processed_data, c(1,2), log)
head(logged_data)
install.packages("plotly")
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_Data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "bl_s", "bl_as", "v_s")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = selected_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_df[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]])
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_Data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "bl_s", "bl_as", "v_s")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_df[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]])
str(logged_df)
dim(logged_data)
dim(logged_df)
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "bl_s", "bl_as", "v_s")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_df[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]])
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_sample_factors.r")
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "bl_s", "bl_as", "v_s")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_df[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]])
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "bl_s", "bl_as", "v_s")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_lists[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]])
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_lists[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]])
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_lists[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]], names=sub_grps)
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_lists[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]], names=sub_grps)
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_lists[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]], names=sub_grp_names)
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_list[[1]], names=sub_grp_names, main="Logged Counts")
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_list[[1]], names=sub_grp_names, main="Logged Counts")
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_list[[1]], names=sub_grp_names, main="Logged Counts")
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_list[[1]], miRNA_list[[2]], miRNA_list[[3]], miRNA_list[[4]], names=sub_grp_names, main="Logged Counts")
x = matrix(c(1,2,3,4), nrow=2, ncol=2)
new_x = apply(x, c(1,2), log)
new_x
# select only certain miRNA indices#
# make boxplot#
col_scheme = c("red", "green", "blue", "orange")#
boxplot(miRNA_list[[1]], names=sub_grp_names, main="Logged Counts")#
boxplot(miRNA_list[[2]] names=sub_grp_names, add=TRUE)
# select only certain miRNA indices#
# make boxplot#
col_scheme = c("red", "green", "blue", "orange")#
boxplot(miRNA_list[[1]], names=sub_grp_names, main="Logged Counts")#
boxplot(miRNA_list[[2]], names=sub_grp_names, add=TRUE)
errors()
# select only certain miRNA indices#
# make boxplot#
col_scheme = c("red", "green", "blue", "orange")#
boxplot(miRNA_list[[1]], names=sub_grp_names, main="Logged Counts")#
boxplot(miRNA_list[[2]], names=sub_grp_names, add=TRUE)
# select only certain miRNA indices#
# make boxplot#
col_scheme = c("red", "green", "blue", "orange")#
boxplot(miRNA_list[[1]], main="Logged Counts")#
boxplot(miRNA_list[[2]], add=TRUE)
# select only certain miRNA indices#
# make boxplot#
col_scheme = c("red", "green", "blue", "orange")#
boxplot(miRNA_list[[1]], main="Logged Counts")#
boxplot(miRNA_list[[2]], names=5:8, add=TRUE)
# Load the following...#
# processed_data#
# sample_factors#
#
# function to log transform the data#
log_transform = function(x) {#
	return log(x + 1)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplot#
col_scheme = c("red", "green", "blue", "orange")#
boxplot(miRNA_list[[1]], main="Logged Counts")#
boxplot(miRNA_list[[2]], names=5:8, add=TRUE)
# select only certain miRNA indices#
# make boxplots#
# divide figure into 6 cells#
par(mfrow=c(3,2))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste("miRNA #", miRNA_num, sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme)#
}
# select only certain miRNA indices#
# make boxplots#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste("miRNA #", miRNA_num, sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme)#
}
################
# Retrieve Data#
################
#
# insert data set#
known_data <-read.delim("Data_in/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# extract raw data into matrix (just #s), exclude "norm" data#
data_raw <- known_data[,5:56]#
data_raw <- data.matrix(data_raw)#
#
# save miRNA names#
miRNA_names <- known_data[,1]#
# save precursor names#
prec_names <- known_data[,3]#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	prop <- zero_count / len#
	return(prop)#
}#
################
# Eliminate >50% zero proportions#
################
#
# find zero proportions for each miRNA#
zero_prop_miRNA <- apply(data_raw, 1, count_zeros)#
#
# delete miRNAs that have >50% zeros#
over_50 <- zero_prop_miRNA > 0.5#
data_proc <- data_raw[!over_50,]#
#
# get miRNA names for data_proc#
miRNA_names_proc <- miRNA_names[!over_50]#
# get precursor names for data_proc#
prec_names_proc <- prec_names[!over_50]#
################
# Normalize Data#
################
#
# UQ normalization function#
uq_normalize <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
}#
#
# vector of Us needed to normalize data#
Us <- apply(data_raw, 2, uq_normalize)#
# finding mean of the of the uq samples#
U <- mean(Us)#
#
# do UQ normalization#
uqnorm_data <- matrix(, nrow=nrow(data_proc), ncol=ncol(data_proc))#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(data_proc)) {#
	col <- data_proc[,i]#
	uqnorm_data[,i] <- col/Us[i]*U#
}#
#
# save upper quartilze normalized data#
save(uqnorm_data, file="Data_out/saved_uqnorm_data.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_uqnorm_data.r")
# Load the following...#
# uqnorm_data#
# sample_factors#
# feat_df (from data_frames.r)#
#
# function to log transform the data#
log_transform = function(x) {#
	return log(x + 1)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(uqnorm_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
# extract miRNA names from feat_df#
miRNA_names = feat_df$miRNA[miRNA_indices]#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplots#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme)#
}
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps")#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=10, height=10)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=10, height=10)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
warnings()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=10, height=10)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11, height=8.5)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=13, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=18, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=30, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names, las=2)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names, las=2)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
sub_grp_names = c("BC", "V Symp", "BL Symp", "BL Asymp")
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=12, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=14, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3), oma=c(1,1,1,1))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3), oma=c(1,0,0,0))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3), oma=c(0,1,0,0))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
setEPS("Data_out/miRNA_distributions.eps")#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
setEPS("Data_out/miRNA_distributions.eps")#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
setEPS()#
postscript("Data_out/miRNA_distributions.eps")#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste(miRNA_name, " (index #", miRNA_num, ")", sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
