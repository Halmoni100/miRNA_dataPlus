# Retrieve Data#
<<<<<<< Updated upstream
# raw_data retreived#
load("R_Data/saved_raw_data")#
#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
#
#PCA analysis#
#source:http://gastonsanchez.com/blog/how-to/2012/06/17/PCA-in-R.html#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]
# Retrieve Data#
# raw_data retreived#
load("R_Data/saved_raw_data")#
#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
#
#PCA analysis#
#source:http://gastonsanchez.com/blog/how-to/2012/06/17/PCA-in-R.html#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
# PC 1 vs PC 2#
pca_comp_3_bacteria#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
# PC 1 vs PC 3#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
# PC 2 vs PC 3#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
str(raw_data)
# Retrieve Data#
# raw_data retreived#
load("R_Data/saved_raw_data")#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
    sum <- sum(v)#
    if (sum == 0) {#
        return(TRUE)#
    }#
    return(FALSE)#
}#
# Delete data w/ no info#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
#
#PCA analysis#
#source:http://gastonsanchez.com/blog/how-to/2012/06/17/PCA-in-R.html#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
# PC 1 vs PC 2#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
# PC 1 vs PC 3#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
# PC 2 vs PC 3#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
paste("1st","2nd","3rd")
paste(1,2,3)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector("list", n)#
pcs_viral = vector("list", n)#
pcs_baseline = vector("list", n)#
pcs_bacteria = vector("list", n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[j])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector("list", n)#
pcs_viral = vector("list", n)#
pcs_baseline = vector("list", n)#
pcs_bacteria = vector("list", n)#
for (i in 1:n) {#
	pcs_all[i] = pca_result[,i]#
	pcs_viral[i] = pca_result[1:21,i]#
	pcs_baseline[i] = pca_result[22:42,i]#
	pcs_bacteria[i] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
warnings()
class(pcs_all)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
warnings()
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
pcs_viral[[1]]
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
warnings()
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
warnings()
str(pcs_viral[1])
str(pcs_viral[2])
str(pcs_baseline[1])
str(pcs_baseline[2])
str(pcs_bacteria[1])
str(pcs_bacteria[2])
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		length(pcs_viral[i])#
		length(pcs_viral[j])#
		length(pcs_baseline[i])#
		length(pcs_baseline[j])#
		length(pcs_bacteria[i])#
		length(pcs_bacteria[j])#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
		length(pcs_viral[1])#
		length(pcs_viral[2])#
		length(pcs_baseline[1])#
		length(pcs_baseline[2])#
		length(pcs_bacteria[1])#
		length(pcs_bacteria[2])#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
		length(pcs_viral[[1]])#
		length(pcs_viral[[2]])#
		length(pcs_baseline[[1]])#
		length(pcs_baseline[[2]])#
		length(pcs_bacteria[[1]])#
		length(pcs_bacteria[[2]])#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[i], pcs_viral[j], col="red",#
				xlim=c(min(pcs_all[i]), max(pcs_all[i])),#
				ylim=c(min(pcs_all[j]), max(pcs_all[j])))#
		points(pcs_baseline[i], pcs_baseline[j], col="green")#
		points(pcs_bacteria[i], pcs_bacteria[j], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	i#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
for (i in 1:3) {i}
or (i in 1:3) {print(i)}
for (i in 1:3) {print(i)}
warnings()
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
for (i in 1:n-1) {#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		print(length(pcs_viral[[i]]))#
		print(length(pcs_viral[[j]]))#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
for (i in 1:n-1) {#
	print(pcs_viral[[i]])#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
for (i in 1:n-1) {#
	print(pcs_viral[[j]])#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
for (i in 1:n-1) {#
	print(i)#
	for (j in i+1:n) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		#plot.new()#
		#frame()#
		#plot_name <- paste(i,"vs",j)#
		#dir_name <- paste("Plots/PCA/processed_data/", plot_name, collapse=NULL)#
		#jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		#dev.off()#
	}#
}
quartz()
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse=NULL)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 2#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse="")#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse="", res=500)#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse="")#
		jpeg(dir_name, res=500)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse="")#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot.new()#
		frame()#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse="")#
		jpng(dir_name, 500, 500)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# transpose data for PCA analysis#
proc_data_trans <- t(processed_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/processed_data/", plot_name, ".jpeg", collapse="")#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
# all code below here is adapted from http://davetang.org/muse/2014/07/07/quantile-normalisation-in-r/#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
#
# graph the normalized data on a histogram#
hist(quantile_norm_data)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
PCA(uqnorm, 4)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
PCA <- dget("PCA.R")#
PCA(uqnorm, 4)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
PCA <- dget("PCA")#
PCA(uqnorm, 4)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
PCA <- dget("PCA.r")#
PCA(uqnorm, 4)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
PCA <- dget("Preliminary_Steps/PCA.r")#
PCA(uqnorm, 4)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
logged <- log2(uqnorm + 1)#
PCA <- dget("Preliminary_Steps/PCA.r")#
PCA(logged, 4)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
logged <- log2(uqnorm + 1)#
PCA <- dget("Preliminary_Steps/PCA.r")#
PCA(logged, 6)
install.packages("FactoMineR")
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
logged <- log2(uqnorm + 1)#
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
class(pca_analysis)
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
n
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
print(n)
pca_analysis(logged,5)
pca_analysis <- dget("Preliminary_Steps/PCA.r")
pca_analysis(logged,5)
pca_analysis <- dget("Preliminary_Steps/PCA.r")
pca_analysis(logged,5)
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
> pca_analysis(logged,5)
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
pca_analysis
pca_analysis <- dget("Preliminary_Steps/PCA.r")
pca_analysis
pca_analysis(logged, 6)
pca_analysis
head(logged)
pca_df = PCA(logged)
pca_df = PCA(t(logged))
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
class(PCA)
PCA
rm(PCA)
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
function(data, num) {#
# Load package#
library(FactoMineR)#
#
# PCA analysis#
pca_df = PCA(t(data))#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$ind$coord#
#
pcs_all = vector(mode="list", length=num)#
pcs_viral = vector(mode="list", length=num)#
pcs_baseline = vector(mode="list", length=num)#
pcs_bacteria = vector(mode="list", length=num)#
for (i in 1:num) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- num - 1#
to_j <- num#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA", plot_name, ".jpeg", collapse="")#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}#
#
}
pca_analysis <- dget("Preliminary_Steps/PCA.r")#
pca_analysis(logged, 6)
pca_analysis <- dget("Preliminary_Steps/analyze_PCs.r")#
pca_analysis(logged, 6)
pca_analysis <- dget("Preliminary_Steps/analyze_PCs.r")#
pca_analysis(logged, 10)
pca_analysis <- dget("Preliminary_Steps/analyze_PCs.r")#
pca_analysis(uqnorm, 10)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
logged <- log2(uqnorm + 1)#
pca_analysis <- dget("Preliminary_Steps/analyze_PCs.r")#
pca_analysis(logged, 25)
# Retrieve Data#
# logged_data retrieved#
load("R_data/saved_logged_data")#
#
# Read content table w/ sequence data#
seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table.txt")#
head(seq_df)#
#
# Create list for gc proportion#
gc_prop_list <- split(seq_df$miRNA, seq_df$gc_prop)#
head(gc_prop_list)
gc_prop_list <- seq_df$gc_prop#
names(gc_prop_list) <- seq_df$miRNA#
head(gc_prop_list)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
#
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
#
# finding mean of the of the uq samples#
U <- mean(Us)#
#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
# log norm data, save it#
logged_data <- log2(uqnorm + 1)#
save(logged_data, file="R_data/saved_logged_data")#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles)#
#
	return(quantiles[uqnorm_rank])#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
head(quantile_norm_data)
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
head(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	print(quantiles)#
	return(quantiles[uqnorm_rank])#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
head(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	print(head(quantiles[uqnorm_rank])#
	return(quantiles[uqnorm_rank])#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
head(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	ordered_quantiles <- quantiles[uqnorm_rank]#
	return(ordered_quantiles)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
head(quantile_norm_data)
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
head(quantile_norm_data)
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
class(quantile_norm_data)
rm(quantile_norm_data)
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
class(quantile_norm_data)
head(quantile_norm_data)
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	str(out)#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	head(out)#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(str(out))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
x <- c(1,2,3,4)
x <- c(2,4,6,8)
y <- x[3,2,1,4]
y <- x[c(3,2,1,4)]
y
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(length(quantiles))#
	print(length(uqnorm_rank))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	head(uqnorm_rank)#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(length(quantiles))#
	print(length(uqnorm_rank))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	print(head(uqnorm_rank))#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(length(quantiles))#
	print(length(uqnorm_rank))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	print(str(uqnorm_rank))#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(length(quantiles))#
	print(length(uqnorm_rank))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	print(str(uqnorm_rank))#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(str(quantiles))#
	print(str(uqnorm_rank))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	print(uqnorm_sorted)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	out <- quantiles[uqnorm_rank]#
	print(str(quantiles))#
	print(str(uqnorm_rank))#
	return(out)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# Retrieve Data#
=======
>>>>>>> Stashed changes
# processed_data retreived#
load("R_Data/saved_raw_data")#
#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
#
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
#
# finding mean of the of the uq samples#
U <- mean(Us)#
#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
#create a function to normalize data#
#order the data set according to rank#
quantile_normalize <- function(v) {#
	v_order <- rank(v,ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- v_order/53#
	quantile_norm_vec <- qnorm(quantiles,mean=0,sd=1)#
	return(quantile_norm_vec)	#
}#
#
output_matrix <- matrix(, nrow=m, ncol=n)#
# create quantile normalization function for each miRNA#
quantile_norm_data <- apply(uqnorm, 1, quantile_normalize)#
quantile_norm_data <- t(quantile_norm_data)#
str(quantile_norm_data)#
#
# save final normalized data#
save(quantile_norm_data, file="R_Data/saved_quantile_norm_data")
setwd("~/Desktop/Data+/miRNA_dataPlus")
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
#
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
#
# finding mean of the of the uq samples#
U <- mean(Us)#
#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
#create a function to normalize data#
#order the data set according to rank#
quantile_normalize <- function(v) {#
	v_order <- rank(v,ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- v_order/53#
	quantile_norm_vec <- qnorm(quantiles,mean=0,sd=1)#
	return(quantile_norm_vec)	#
}#
#
output_matrix <- matrix(, nrow=m, ncol=n)#
# create quantile normalization function for each miRNA#
quantile_norm_data <- apply(uqnorm, 1, quantile_normalize)#
quantile_norm_data <- t(quantile_norm_data)#
str(quantile_norm_data)#
#
# save final normalized data#
save(quantile_norm_data, file="R_Data/saved_quantile_norm_data")
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
#
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
#
# finding mean of the of the uq samples#
U <- mean(Us)#
#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
#create a function to normalize data#
#order the data set according to rank#
quantile_normalize <- function(v) {#
	v_order <- rank(v,ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- v_order/53#
	quantile_norm_vec <- qnorm(quantiles,mean=0,sd=1)#
	return(quantile_norm_vec)	#
}#
#
output_matrix <- matrix(, nrow=m, ncol=n)#
# create quantile normalization function for each miRNA#
quantile_norm_data <- apply(uqnorm, 1, quantile_normalize)#
quantile_norm_data <- t(quantile_norm_data)#
str(quantile_norm_data)#
#
# save final normalized data#
save(quantile_norm_data, file="R_Data/saved_quantile_norm_data")
quantile_norm_data
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- uqnorm[,1:21]#
baseline <- uqnorm[,22:42]#
bacterial <- uqnorm[,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- allviral[,viral_symptomatic_vector]#
viral_asymptomatic <- allviral[,viral_asymptomatic_vector]#
combined_bacterial_baseline <- uqnorm[,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- uqnorm[,combined_bacterial_allviral_vector]#
combined_baseline_allviral <- uqnorm[,1:42]
test1 <- t.test(allviral,bacterial,alternative="two.sided")
test1
# load normalized data set#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- allviral[,viral_symptomatic_vector]#
viral_asymptomatic <- allviral[,viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[,combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[,1:42]
test1 <- t.test(allviral,bacterial,alternative="two.sided")
test1
test2 <- t.test(allviral,baseline,alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test
test2
test4 <- t.test(bacterial,baseline,alternative="two.sided")
test4
test5 <- t.test(bacterial,viral_symptomatic,alternative="two.sided")
test5
test6 <- t.test(bacterial,viral_asymptomatic,alternative="two.sided")
test6
test7 <- t.test(baseline, viral_symptomatic, alternative-"two.sided")#
test8 <- t.test(baseline, viral_asypmtomatic, alternative="two.sided")
test7 <- t.test(baseline, viral_symptomatic, alternative="two.sided")
test7
test8 <- t.test(baseline, viral_asymptomatic, alternative="two.sided")
test8
test9 <- t.test(combined_bacterial_baseline,allviral,alternative="two.sided")
test9
test10 <- t.test(combined_bacterial_allviral,baseline,alternative="two.sided")
test10
test11 <- t.test(combined_baseline_allviral,bacterial,alternative="two.sided")
test11
symptom <- data.frame(viral_symptomatic, viral_asymptomatic)
symptom
?stack
symptom <- stack(viral_symptomatic, viral_asymptomatic)
test1 <- t.test(allviral,bacterial,alternative="two.sided")#
test2 <- t.test(allviral,baseline,alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
test4 <- t.test(bacterial,baseline,alternative="two.sided")#
test5 <- t.test(bacterial,viral_symptomatic,alternative="two.sided")#
test6 <- t.test(bacterial,viral_asymptomatic,alternative="two.sided")#
test7 <- t.test(baseline, viral_symptomatic, alternative="two.sided")#
test8 <- t.test(baseline, viral_asymptomatic, alternative="two.sided")#
test9 <- t.test(combined_bacterial_baseline,allviral,alternative="two.sided")#
test10 <- t.test(combined_bacterial_allviral,baseline,alternative="two.sided")#
test11 <- t.test(combined_baseline_allviral,bacterial,alternative="two.sided")
test1
test2
test3
test4
jtest5
test5
test6
test7
test8
testj9
test9
test10
test1
test11
test3 <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")
test3
plot(test1)
plot(test1, smoothness= 1000)
test1
test11 <- t.test(combined_baseline_allviral~bacterial,alternative="two.sided")
t2.ex <- t.test(allviral~baseline,data=quantile_norm_data)
?t.test
require(graphics)
plot(test1)
hist(test1)
t.test(1:10, y = c(7:20))
test1 <- t.test(allviral,y=bacterial,alternative="two.sided")
test1
plot(test1)
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[1,1:21]#
baseline <- quantile_norm_data[1,22:42]#
bacterial <- quantile_norm_data[1,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- allviral[,viral_symptomatic_vector]#
viral_asymptomatic <- allviral[,viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[1,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[1,combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[1,1:42]
allviral <- quantile_norm_data[1,1:21]#
baseline <- quantile_norm_data[1,22:42]#
bacterial <- quantile_norm_data[1,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- allviral[viral_symptomatic_vector]#
viral_asymptomatic <- allviral[viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[1,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[1,combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[1,1:42]
combined_baseline_allviral
viral_symptomatic
viral_asymptomatic
test1 <- t.test(allviral,bacterial,alternative="two.sided")#
test2 <- t.test(allviral,baseline,alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
test3 <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
test4 <- t.test(bacterial,baseline,alternative="two.sided")#
test5 <- t.test(bacterial,viral_symptomatic,alternative="two.sided")#
test6 <- t.test(bacterial,viral_asymptomatic,alternative="two.sided")#
test7 <- t.test(baseline, viral_symptomatic, alternative="two.sided")#
test8 <- t.test(baseline, viral_asymptomatic, alternative="two.sided")#
test9 <- t.test(combined_bacterial_baseline,allviral,alternative="two.sided")#
test10 <- t.test(combined_bacterial_allviral,baseline,alternative="two.sided")#
test11 <- t.test(combined_baseline_allviral,bacterial,alternative="two.sided")
test1
test2
test3
test4
test5
test6
test7
test8
test9
test19
test10
test11
test4
test3
test2
plot(test2)
k <- 1:nrow
1:nrow
nrow
k <- 1:333
k
subsetting <- function(quantile_norm_data){#
	k <- 1:333#
	allviral <- quantile_norm_data[k,1:21]#
baseline <- quantile_norm_data[k,22:42]#
bacterial <- quantile_norm_data[k,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- allviral[viral_symptomatic_vector]#
viral_asymptomatic <- allviral[viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[k,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[1,combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[k,1:42]#
}
for (k in 1:nrow(quantile_norm_data)){#
	rowneeded <- quantile_norm_data[k,]#
}
for (k in 1:nrow(quantile_norm_data)){#
	rowneeded <- quantile_norm_data[k,]#
	allviral <- quantile_norm_data[k,1:21]#
baseline <- quantile_norm_data[k,22:42]#
bacterial <- quantile_norm_data[k,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- allviral[viral_symptomatic_vector]#
viral_asymptomatic <- allviral[viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[k,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[1,combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[k,1:42]#
}
allviral
for (k in 1:nrow(quantile_norm_data)){#
	rowneeded <- quantile_norm_data[k,]#
	allviral <- rowneeded[1:21]#
baseline <- rowneeded[22:42]#
bacterial <- rowneeded[43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- rowneeded[viral_symptomatic_vector]#
viral_asymptomatic <- rowneeded[viral_asymptomatic_vector]#
combined_bacterial_baseline <- rowneeded[22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- rowneeded[combined_bacterial_allviral_vector]#
combined_baseline_allviral <- rowneeded[1:42]#
}
allviral
quantile_norm_data
rowneeded <- quantile_norm_data[k,ncol]
rowneeded <- quantile_norm_data[k,1:52]
rowneeded
rowneeded <- quantile_norm_data[k,]
rowneeded
for (k in 1:nrow(quantile_norm_data)){#
	rowneeded <- quantile_norm_data[k,]#
	allviral[k,] <- rowneeded[1:21]#
baseline[k,] <- rowneeded[22:42]#
bacterial[k,] <- rowneeded[43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic[k,] <- rowneeded[viral_symptomatic_vector]#
viral_asymptomatic[k,] <- rowneeded[viral_asymptomatic_vector]#
combined_bacterial_baseline[k,] <- rowneeded[22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral[k,] <- rowneeded[combined_bacterial_allviral_vector]#
combined_baseline_allviral[k,] <- rowneeded[1:42]#
}
for (k in 1:nrow(quantile_norm_data)){#
	rowneeded <- quantile_norm_data[k,]#
	allviral[k] <- rowneeded[1:21]#
baseline[k] <- rowneeded[22:42]#
bacterial[k] <- rowneeded[43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic[k] <- rowneeded[viral_symptomatic_vector]#
viral_asymptomatic[k] <- rowneeded[viral_asymptomatic_vector]#
combined_bacterial_baseline[k] <- rowneeded[22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral[k] <- rowneeded[combined_bacterial_allviral_vector]#
combined_baseline_allviral[k] <- rowneeded[1:42]#
}
for (k in 1:ncol(quantile_norm_data)){#
	rowneeded <- quantile_norm_data[k,]#
	allviral[k,] <- rowneeded[1:21]#
baseline[k,] <- rowneeded[22:42]#
bacterial[k,] <- rowneeded[43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic[k,] <- rowneeded[viral_symptomatic_vector]#
viral_asymptomatic[k,] <- rowneeded[viral_asymptomatic_vector]#
combined_bacterial_baseline[k,] <- rowneeded[22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral[k,] <- rowneeded[combined_bacterial_allviral_vector]#
combined_baseline_allviral[k,] <- rowneeded[1:42]#
}
for (k in 1:ncol(quantile_norm_data)){#
	rowneeded <- quantile_norm_data[k,]#
	allviral <- rowneeded[1:21]#
baseline <- rowneeded[22:42]#
bacterial <- rowneeded[43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- rowneeded[viral_symptomatic_vector]#
viral_asymptomatic <- rowneeded[viral_asymptomatic_vector]#
combined_bacterial_baseline <- rowneeded[22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- rowneeded[combined_bacterial_allviral_vector]#
combined_baseline_allviral <- rowneeded[1:42]#
}
rowneeded
for (k in 1:ncol(quantile_norm_data)){#
	rowneeded <- quantile_norm_data[,k]#
	allviral <- rowneeded[1:21]#
baseline <- rowneeded[22:42]#
bacterial <- rowneeded[43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- rowneeded[viral_symptomatic_vector]#
viral_asymptomatic <- rowneeded[viral_asymptomatic_vector]#
combined_bacterial_baseline <- rowneeded[22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- rowneeded[combined_bacterial_allviral_vector]#
combined_baseline_allviral <- rowneeded[1:42]#
}
rowneeded
for (k in 1:ncol(quantile_norm_data)){#
	colneeded <- quantile_norm_data[,k]#
	allviral <- colneeded[1:21]#
baseline <- colneeded[22:42]#
bacterial <- colneeded[43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- colneeded[viral_symptomatic_vector]#
viral_asymptomatic <- colneeded[viral_asymptomatic_vector]#
combined_bacterial_baseline <- colneeded[22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- colneeded[combined_bacterial_allviral_vector]#
combined_baseline_allviral <- colneeded[1:42]#
}
str(quantile_norm_data)
head(quantile_norm_data)
allviral
for (k in 1:ncol(quantile_norm_data)){#
	colneeded <- quantile_norm_data[,k]#
	allviral[,k] <- quantile_norm_data[1:21]#
baseline[,k] <- quantile_norm_data[22:42]#
bacterial[,k] <- quantile_norm_data[43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic[k,] <- quantile_norm_data[viral_symptomatic_vector]#
viral_asymptomatic[k,] <- quantile_norm_data[viral_asymptomatic_vector]#
combined_bacterial_baseline[k,] <- quantile_norm_data[22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral[k,] <- quantile_norm_data[combined_bacterial_allviral_vector]#
combined_baseline_allviral[k,] <- quantile_norm_data[1:42]#
}
k
k
for (k in 1:333){#
	colneeded <- quantile_norm_data[,k]#
	allviral[,k] <- quantile_norm_data[1:21]#
baseline[,k] <- quantile_norm_data[22:42]#
bacterial[,k] <- quantile_norm_data[43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic[k,] <- quantile_norm_data[viral_symptomatic_vector]#
viral_asymptomatic[k,] <- quantile_norm_data[viral_asymptomatic_vector]#
combined_bacterial_baseline[k,] <- quantile_norm_data[22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral[k,] <- quantile_norm_data[combined_bacterial_allviral_vector]#
combined_baseline_allviral[k,] <- quantile_norm_data[1:42]#
}
for (k in 1:333){#
	colneeded <- quantile_norm_data[,k]#
	allviral <- colneeded[1:21]#
baseline <- quantile_norm_data[22:42]#
bacterial <- quantile_norm_data[43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- quantile_norm_data[viral_symptomatic_vector]#
viral_asymptomatic <- quantile_norm_data[viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[1:42]#
}
for (k in 1:333){#
	colneeded <- quantile_norm_data[k]#
	allviral <- colneeded[1:21]#
baseline <- quantile_norm_data[22:42]#
bacterial <- quantile_norm_data[43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- quantile_norm_data[viral_symptomatic_vector]#
viral_asymptomatic <- quantile_norm_data[viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[1:42]#
}
k
allviral
baseline
allviral <- quantile_norm_data[k,1:21]
allviral
allviral <- quantile_norm_data[1:21,k]
# load normalized data set#
# doing a for loop to go throuhg each row (miRNA) and subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[k,1:21]#
baseline <- quantile_norm_data[k,22:42]#
bacterial <- quantile_norm_data[k,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- quantile_norm_data[viral_symptomatic_vector]#
viral_asymptomatic <- quantile_norm_data[viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[k,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[k,1:42]#
}
allviral <- quantile_norm_data[k,1:21]#
baseline <- quantile_norm_data[k,22:42]#
bacterial <- quantile_norm_data[k,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- quantile_norm_data[viral_symptomatic_vector]#
viral_asymptomatic <- quantile_norm_data[viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[k,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[k,1:42]
bacterial
for k in 1:nrow(quantile_norm_data) {#
allviral <- quantile_norm_data[k,1:21]#
baseline <- quantile_norm_data[k,22:42]#
bacterial <- quantile_norm_data[k,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- quantile_norm_data[viral_symptomatic_vector]#
viral_asymptomatic <- quantile_norm_data[viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[k,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[k,1:42]#
}
for (k in 1:nrow(quantile_norm_data)) {#
allviral <- quantile_norm_data[k,1:21]#
baseline <- quantile_norm_data[k,22:42]#
bacterial <- quantile_norm_data[k,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- quantile_norm_data[viral_symptomatic_vector]#
viral_asymptomatic <- quantile_norm_data[viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[k,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[k,1:42]#
}
for (k in 1:nrow(quantile_norm_data)) {#
print(k)#
allviral <- quantile_norm_data[k,1:21]#
baseline <- quantile_norm_data[k,22:42]#
bacterial <- quantile_norm_data[k,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- quantile_norm_data[viral_symptomatic_vector]#
viral_asymptomatic <- quantile_norm_data[viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[k,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[k,1:42]#
}
all viral
allviral
# load normalized data set using "Normalization" R script#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- quantile_norm_data[viral_symptomatic_vector]#
viral_asymptomatic <- quantile_norm_data[viral_asymptomatic_vector]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- quantile_norm_data[combined_bacterial_allviral_vector]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
#
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=11, nrow=333)#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
test1 <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
test2 <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
test3 <- t.test(viral_symptomatic[k,], viral_asymptomatic[k,],alternative="two.sided")#
test4 <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
test5 <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
test6 <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
test7 <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
test8 <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
test9 <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
test10 <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
test11 <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
ttestmatrix[k,]#
print(ttestmatrix)#
}
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=11, nrow=333)#
#make an output vector for pvalues of all tests#
output_vector <- vector()#
#assign a test vector#
test_vector <- c(test1, test2, test3, test4, test5, test6, test7, test8, test9, test10, test11)#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
test1 <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
test2 <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
test3 <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
test4 <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
test5 <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
test6 <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
test7 <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
test8 <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
test9 <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
test10 <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
test11 <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
#
output_vector[k] <- (test_vector)#
print(ttestmatrix[output_vector])#
}
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
#
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=11, nrow=333)#
#make an output vector for pvalues of all tests#
output_vector <- vector()#
#assign a test vector#
test_vector <- c(test1, test2, test3, test4, test5, test6, test7, test8, test9, test10, test11)#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
test1 <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
test2 <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
test3 <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
test4 <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
test5 <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
test6 <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
test7 <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
test8 <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
test9 <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
test10 <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
test11 <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
#
output_vector[k] <- (test_vector)#
print(ttestmatrix[output_vector])#
}
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
test1 <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
test2 <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
test3 <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
test4 <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
test5 <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
test6 <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
test7 <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
test8 <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
test9 <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
test10 <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
test11 <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
print(ttestmatrix)#
}
?paste0
?cat
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
test1 <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
test2 <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
test3 <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
test4 <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
test5 <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
test6 <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
test7 <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
test8 <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
test9 <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
test10 <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
test11 <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
#
output_vector[k] <- (test_vector)#
ttestmatrix[k,] <- output_vector#
}
# load normalized data set using "Normalization" R script#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
#
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=11, nrow=333)#
#assign a test vector#
test_vector <- c(test1, test2, test3, test4, test5, test6, test7, test8, test9, test10, test11)#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
output_vector <- vector()#
output_vector[1] <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
output_vector[2] <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
output_vector[3] <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
output_vector[4] <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
output_vector[5] <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
output_vector[6] <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
output_vector[7] <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
output_vector[8] <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
output_vector[9] <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
output_vector[10] <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
output_vector[11] <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
#
ttestmatrix[k,] <- output_vector#
}#
print(ttestmatrix)
# load normalized data set using "Normalization" R script#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
output_vector <- vector()#
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=j, nrow=i)#
output_vector[1] <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
output_vector[2] <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
output_vector[3] <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
output_vector[4] <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
output_vector[5] <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
output_vector[6] <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
output_vector[7] <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
output_vector[8] <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
output_vector[9] <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
output_vector[10] <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
output_vector[11] <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
#
ttestmatrix[k,] <- output_vector#
}#
print(ttestmatrix)
# load normalized data set using "Normalization" R script#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
output_vector <- vector()#
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=j, nrow=i)#
output_vector[1] <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
output_vector[2] <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
output_vector[3] <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
output_vector[4] <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
output_vector[5] <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
output_vector[6] <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
output_vector[7] <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
output_vector[8] <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
output_vector[9] <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
output_vector[10] <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
output_vector[11] <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
#
ttestmatrix[k,] <- output_vector#
}
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
output_vector <- vector()#
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=11, nrow=i)#
output_vector[1] <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
output_vector[2] <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
output_vector[3] <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
output_vector[4] <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
output_vector[5] <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
output_vector[6] <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
output_vector[7] <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
output_vector[8] <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
output_vector[9] <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
output_vector[10] <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
output_vector[11] <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
#
ttestmatrix[k,] <- output_vector#
}
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
output_vector <- vector()#
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=11, nrow=333)#
output_vector[1] <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
output_vector[2] <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
output_vector[3] <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
output_vector[4] <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
output_vector[5] <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
output_vector[6] <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
output_vector[7] <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
output_vector[8] <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
output_vector[9] <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
output_vector[10] <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
output_vector[11] <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
#
ttestmatrix[k,] <- output_vector#
}
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
output_vector <- vector()#
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=j, nrow=i)#
output_vector[1] <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
output_vector[2] <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
output_vector[3] <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
output_vector[4] <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
output_vector[5] <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
output_vector[6] <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
output_vector[7] <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
output_vector[8] <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
output_vector[9] <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
output_vector[10] <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
output_vector[11] <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
#
ttestmatrix[k,] <- output_vector#
}
print(ttestmatrix)
output_vector[9]
library(igraph)
?infomap
?infomap.community
setwd("~/Desktop/edgelists")
# old network#
cdata = read.csv("e_cermi.csv", header = F)#
 cdata=as.matrix(cdata)#
 g=graph.edgelist(cdata[,1:2],directed=TRUE)#
 E(g)$weight=as.numeric(cdata[,3])#
cdata_matrix <- get.adjacency(g,attr='weight',sparse=FALSE)
cdata
#infomap#
infomap.community(g, e.weights=cdata[,3], nb.trials = 10, modularity = TRUE)
print(communities)
print(g)
length(g)
print(g)
length(communities)
create.communities(membership)
create.communities(g)
info <- infomap.community(g, e.weights=cdata[,3], nb.trials = 10, modularity = TRUE)
create.communities(info)
print(info)
print(length)
modularity(info)
is.hierarchial(info)
is.hierarchical(info)
plot(info)
create.communities(info)
ebc <- edge.betweenness.community(g, directed=F)#
 mods <- sapply(0:ecount(g), function(i){#
   g2 <- delete.edges(g, ebc$removed.edges[seq(length=i)])#
   cl <- clusters(g2)$membership#
 modularity(g,cl)#
 })
modularity(g,cl)
mods <- sapply(0:ecount(g)
}
g2 <- delete.edges(g, ebc$removed.edges[seq(length=i)])  cl <- clusters(g2)$membership
g2 <- delete.edges(g, ebc$removed.edges[seq(length=i)])
cl <- clusters(g2)$membership
modularity(g, cl)
setwd("~/Desktop/Data+/miRNA_dataPlus")
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
# all code below here is adapted from http://davetang.org/muse/2014/07/07/quantile-normalisation-in-r/#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
#
# graph the normalized data on a histogram#
hist(quantile_norm_data)
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
output_vector <- vector()#
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=j, nrow=k)#
output_vector[1] <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
output_vector[2] <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
output_vector[3] <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
output_vector[4] <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
output_vector[5] <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
output_vector[6] <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
output_vector[7] <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
output_vector[8] <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
output_vector[9] <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
output_vector[10] <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
output_vector[11] <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
#
ttestmatrix[k,] <- output_vector#
}
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
output_vector <- vector()#
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=11, nrow=k)#
output_vector[1] <- t.test(allviral[k,],bacterial[k,],alternative="two.sided")#
output_vector[2] <- t.test(allviral[k,],baseline[k,],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
output_vector[3] <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
output_vector[4] <- t.test(bacterial[k,],baseline[k,],alternative="two.sided")#
output_vector[5] <- t.test(bacterial[k,],viral_symptomatic[k,],alternative="two.sided")#
output_vector[6] <- t.test(bacterial[k,],viral_asymptomatic[k,],alternative="two.sided")#
output_vector[7] <- t.test(baseline[k,], viral_symptomatic[k,], alternative="two.sided")#
output_vector[8] <- t.test(baseline[k,], viral_asymptomatic[k,], alternative="two.sided")#
output_vector[9] <- t.test(combined_bacterial_baseline[k,],allviral[k,],alternative="two.sided")#
output_vector[10] <- t.test(combined_bacterial_allviral[k,],baseline[k,],alternative="two.sided")#
output_vector[11] <- t.test(combined_baseline_allviral[k,],bacterial[k,],alternative="two.sided")#
#
ttestmatrix[k,] <- output_vector#
}
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
output_vector <- vector()#
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=11, nrow=k)#
output_vector[1] <- t.test(allviral,bacterial,alternative="two.sided")#
output_vector[2] <- t.test(allviral,baseline,alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
output_vector[3] <- t.test(viral_symptomatic, viral_asymptomatic,alternative="two.sided")#
output_vector[4] <- t.test(bacterial,baseline,alternative="two.sided")#
output_vector[5] <- t.test(bacterial,viral_symptomatic,alternative="two.sided")#
output_vector[6] <- t.test(bacterial,viral_asymptomatic,alternative="two.sided")#
output_vector[7] <- t.test(baseline, viral_symptomatic, alternative="two.sided")#
output_vector[8] <- t.test(baseline, viral_asymptomatic, alternative="two.sided")#
output_vector[9] <- t.test(combined_bacterial_baseline,allviral,alternative="two.sided")#
output_vector[10] <- t.test(combined_bacterial_allviral,baseline,alternative="two.sided")#
output_vector[11] <- t.test(combined_baseline_allviral,bacterial,alternative="two.sided")#
#
ttestmatrix[k,] <- output_vector#
}
<<<<<<< Updated upstream
# load normalized data#
# loading quantile_norm_data#
load("R_Data/saved_quantile_norm_data")#
#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1:21,43:52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
#
do_t_test <- function(s1, s2, is_paired) {#
	result <- t.test(s1, s2, alternative="two.sided", paired=is_paired)#
	return(result[[p.value]])#
}#
#
# I didn't make it clear that the matrix should be initialized outside the for loop, or else the for loop will create a new matrix every iteration.  I'll call it P for simplicity#
=======
warnings()
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
output_vector <- vector()#
>>>>>>> Stashed changes
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=11, nrow=k)#
output_vector[1] <- t.test(allviral[k],bacterial[k],alternative="two.sided")#
output_vector[2] <- t.test(allviral[k],baseline[k],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
output_vector[3] <- t.test(viral_symptomatic[k], viral_asymptomatic[k],alternative="two.sided")#
output_vector[4] <- t.test(bacterial[k],baseline[k],alternative="two.sided")#
output_vector[5] <- t.test(bacterial[k],viral_symptomatic[k],alternative="two.sided")#
output_vector[6] <- t.test(bacterial[k],viral_asymptomatic[k],alternative="two.sided")#
output_vector[7] <- t.test(baseline[k], viral_symptomatic[k], alternative="two.sided")#
output_vector[8] <- t.test(baseline[k], viral_asymptomatic[k], alternative="two.sided")#
output_vector[9] <- t.test(combined_bacterial_baseline[k],allviral[k],alternative="two.sided")#
output_vector[10] <- t.test(combined_bacterial_allviral[k],baseline[k],alternative="two.sided")#
output_vector[11] <- t.test(combined_baseline_allviral[k],bacterial[k],alternative="two.sided")#
#
ttestmatrix[k,] <- output_vector#
}
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
<<<<<<< Updated upstream
	output_vector <- vector(length=11)#
	output_vector[1] <- do_t_test(allviral[,k], bacterial[,k], FALSE)#
	output_vector[2] <- do_t_test(allviral[,k], baseline[,k], TRUE)#
	output_vector[3] <- do_t_test(viral_symptomatic[,k], viral_asymptomatic[,k], FALSE)#
	output_vector[4] <- do_t_test(bacterial[,k], baseline[,k], FALSE)#
	output_vector[5] <- do_t_test(bacterial[,k], viral_symptomatic[,k], FALSE)#
	output_vector[6] <- do_t_test(bacterial[,k], viral_asymptomatic[,k], FALSE)#
	output_vector[7] <- do_t_test(baseline[,k], viral_symptomatic[,k], FALSE)#
	output_vector[8] <- do_t_test(baseline[,k], viral_asymptomatic[,k], FALSE)#
	output_vector[9] <- do_t_test(combined_bacterial_baseline[,k], allviral[,k], FALSE)#
	output_vector[10] <- do_t_test(combined_bacterial_allviral[,k], baseline[,k], FALSE)#
	output_vector[11] <- do_t_test(combined_baseline_allviral[,k], bacterial[,k], FALSE)#
	P[k,] <- output_vector#
}#
#
head(P)
=======
output_vector <- vector()#
# make an output matrix for the pvalues of all the tests#
ttestmatrix <- matrix(, ncol=11, nrow=k)#
output_vector[1] <- t.test(allviral[,k],bacterial[,k],alternative="two.sided")#
output_vector[2] <- t.test(allviral[,k],baseline[,k],alternative="two.sided", paired=TRUE)#
# test2 is a paired t-test #
output_vector[3] <- t.test(viral_symptomatic[,k], viral_asymptomatic[,k],alternative="two.sided")#
output_vector[4] <- t.test(bacterial[,k],baseline[,k],alternative="two.sided")#
output_vector[5] <- t.test(bacterial[,k],viral_symptomatic[,k],alternative="two.sided")#
output_vector[6] <- t.test(bacterial[,k],viral_asymptomatic[,k],alternative="two.sided")#
output_vector[7] <- t.test(baseline[,k], viral_symptomatic[,k], alternative="two.sided")#
output_vector[8] <- t.test(baseline[,k], viral_asymptomatic[,k], alternative="two.sided")#
output_vector[9] <- t.test(combined_bacterial_baseline[,k],allviral[,k],alternative="two.sided")#
output_vector[10] <- t.test(combined_bacterial_allviral[,k],baseline[,k],alternative="two.sided")#
output_vector[11] <- t.test(combined_baseline_allviral[,k],bacterial[,k],alternative="two.sided")#
#
ttestmatrix[k,] <- output_vector#
}
setwd("~/Desktop/edgelists")
Code for making a network with weighted edges:#
library(igraph)#
setwd("~/Desktop/edgelists")#
 cdata[,1]=as.character(cdata[,1])#
 cdata[,2]=as.character(cdata[,2])#
 cdata=as.matrix(cdata)#
 g=graph.edgelist(cdata[,1:2],directed=FALSE)#
 E(g)$weight=as.numeric(cdata[,3])#
 plot(g,layout=layout.fruchterman.reingold,edge.width=E(g)$weight/2)#
#
Then run this to get the matrix data for the relationships between edges:#
adj=get.adjacency(g,attr='weight',sparse=FALSE) #
 adj#
#
Code for calculating modularity using the Girvan-Newman algorithm:#
 ebc <- edge.betweenness.community(g, directed=F)#
 mods <- sapply(0:ecount(g), function(i){#
   g2 <- delete.edges(g, ebc$removed.edges[seq(length=i)])#
   cl <- clusters(g2)$membership#
 modularity(g,cl)#
 })#
 plot(mods, pch=20)#
 g2<-delete.edges(g, ebc$removed.edges[seq(length=which.max(mods)-1)])#
 V(g)$color=clusters(g2)$membership#
 g$layout <- layout.fruchterman.reingold#
 plot(g, vertex.label=NA)
Code for simulating disease spread on a network:#
size = [INSERT NUMBER OF SAMPLE SIZE]#
seeds_num = 1#
 set.seed(2014); diffusers = sample(V(g),seeds_num) ; diffusers#
infected =list()#
 infected[[1]]= diffusers#
 p = 0.750#
 coins = c(rep(1, p*1000), rep(0,(1-p)*1000))#
 n = length(coins)#
 sample(coins, 1, replace=TRUE, prob=rep(1/n, n))#
update_diffusers = function(diffusers){#
   nearest_neighbors = neighborhood(g, 1, diffusers)#
   nearest_neighbors = data.frame(table(unlist(nearest_neighbors)))#
   nearest_neighbors = subset(nearest_neighbors, !(nearest_neighbors[,1]%in%diffusers))#
 toss = function(freq) {#
     tossing = NULL#
     for (i in 1:freq ) tossing[i] = sample(coins, 1, replace=TRUE, prob=rep(1/n, times=n))#
     tossing = sum(tossing)#
     return (tossing)#
   }#
   keep = unlist(lapply(nearest_neighbors[,2], toss))#
   new_infected = as.numeric(as.character(nearest_neighbors[,1][keep >= 1]))#
   diffusers = unique(c(diffusers, new_infected))#
   return(diffusers)#
   }#
 i = 1#
while(length(infected[[i]]) < size){ #
   infected[[i+1]] = sort(update_diffusers(infected[[i]]))#
   cat(length(infected[[i+1]]), "\n")#
   i = i + 1#
 }
size = 16
Code for simulating disease spread on a network:#
size = [INSERT NUMBER OF SAMPLE SIZE]#
seeds_num = 1#
 set.seed(2014); diffusers = sample(V(g),seeds_num) ; diffusers#
infected =list()#
 infected[[1]]= diffusers#
 p = 0.750#
 coins = c(rep(1, p*1000), rep(0,(1-p)*1000))#
 n = length(coins)#
 sample(coins, 1, replace=TRUE, prob=rep(1/n, n))#
update_diffusers = function(diffusers){#
   nearest_neighbors = neighborhood(g, 1, diffusers)#
   nearest_neighbors = data.frame(table(unlist(nearest_neighbors)))#
   nearest_neighbors = subset(nearest_neighbors, !(nearest_neighbors[,1]%in%diffusers))#
 toss = function(freq) {#
     tossing = NULL#
     for (i in 1:freq ) tossing[i] = sample(coins, 1, replace=TRUE, prob=rep(1/n, times=n))#
     tossing = sum(tossing)#
     return (tossing)#
   }#
   keep = unlist(lapply(nearest_neighbors[,2], toss))#
   new_infected = as.numeric(as.character(nearest_neighbors[,1][keep >= 1]))#
   diffusers = unique(c(diffusers, new_infected))#
   return(diffusers)#
   }#
 i = 1#
while(length(infected[[i]]) < size){ #
   infected[[i+1]] = sort(update_diffusers(infected[[i]]))#
   cat(length(infected[[i+1]]), "\n")#
   i = i + 1#
 }
setwd("~/Desktop/Data+/miRNA_dataPlus")
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
#
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
#
# finding mean of the of the uq samples#
U <- mean(Us)#
#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
#create a function to normalize data#
#order the data set according to rank#
quantile_normalize <- function(v) {#
	v_order <- rank(v,ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- v_order/53#
	quantile_norm_vec <- qnorm(quantiles,mean=0,sd=1)#
	return(quantile_norm_vec)	#
}#
#
output_matrix <- matrix(, nrow=m, ncol=n)#
# create quantile normalization function for each miRNA#
quantile_norm_data <- apply(uqnorm, 1, quantile_normalize)#
quantile_norm_data <- t(quantile_norm_data)#
str(quantile_norm_data)#
#
# save final normalized data#
save(quantile_norm_data, file="R_Data/saved_quantile_norm_data")
>>>>>>> Stashed changes
# load normalized data#
# loading quantile_norm_data#
load("R_Data/saved_quantile_norm_data")#
#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1:21,43:52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
#
# Make sure you compartmentalize repeated code in a function.  Helps to make code more concise, easier to read, and debug#
do_t_test <- function(s1, s2, is_paired) {#
	result <- t.test(s1, s2, alternative="two.sided", paired=is_paired)#
	return(result$p.value)#
}#
#
# I didn't make it clear that the matrix should be initialized outside the for loop, or else the for loop will create a new matrix every iteration.  I'll call it P for simplicity#
# make an output matrix for the pvalues of all the tests#
P <- matrix(, nrow=nrow(quantile_norm_data), ncol=11)#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
	output_vector <- vector(length=11)#
	output_vector[1] <- do_t_test(allviral[,k], bacterial[,k], FALSE)#
	output_vector[2] <- do_t_test(allviral[,k], baseline[,k], TRUE)#
	output_vector[3] <- do_t_test(viral_symptomatic[,k], viral_asymptomatic[,k], FALSE)#
	output_vector[4] <- do_t_test(bacterial[,k], baseline[,k], FALSE)#
	output_vector[5] <- do_t_test(bacterial[,k], viral_symptomatic[,k], FALSE)#
	output_vector[6] <- do_t_test(bacterial[,k], viral_asymptomatic[,k], FALSE)#
	output_vector[7] <- do_t_test(baseline[,k], viral_symptomatic[,k], FALSE)#
	output_vector[8] <- do_t_test(baseline[,k], viral_asymptomatic[,k], FALSE)#
	output_vector[9] <- do_t_test(combined_bacterial_baseline[,k], allviral[,k], FALSE)#
	output_vector[10] <- do_t_test(combined_bacterial_allviral[,k], baseline[,k], FALSE)#
	output_vector[11] <- do_t_test(combined_baseline_allviral[,k], bacterial[,k], FALSE)#
	P[k,] <- output_vector#
}#
#
head(P)
<<<<<<< Updated upstream
known_data <-read.delim("miRDeep2_Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)
known_data
head(known_data)
known_data[nrow(known_data),]
# Retrieve Data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Do PCA Analysis#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_samples.r")#
pca_analysis(quantile_norm_data, 10)
=======
P
>>>>>>> Stashed changes
# load normalized data#
# loading quantile_norm_data#
load("R_Data/saved_quantile_norm_data")#
#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1:21,43:52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
#
<<<<<<< Updated upstream
# Make sure you compartmentalize repeated code in a function.  Helps to make code more concise, easier to read, and debug#
=======
# t-test function#
>>>>>>> Stashed changes
do_t_test <- function(s1, s2, is_paired) {#
	result <- t.test(s1, s2, alternative="two.sided", paired=is_paired)#
	return(result$p.value)#
}#
#
# make an output matrix for the pvalues of all the tests#
p_vals <- matrix(, nrow=nrow(quantile_norm_data), ncol=11)#
#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
	output_vector <- vector(length=11)#
<<<<<<< Updated upstream
	output_vector[1] <- do_t_test(allviral[,k], bacterial[,k], FALSE)#
	output_vector[2] <- do_t_test(allviral[,k], baseline[,k], TRUE)#
	output_vector[3] <- do_t_test(viral_symptomatic[,k], viral_asymptomatic[,k], FALSE)#
	output_vector[4] <- do_t_test(bacterial[,k], baseline[,k], FALSE)#
	output_vector[5] <- do_t_test(bacterial[,k], viral_symptomatic[,k], FALSE)#
	output_vector[6] <- do_t_test(bacterial[,k], viral_asymptomatic[,k], FALSE)#
	output_vector[7] <- do_t_test(baseline[,k], viral_symptomatic[,k], FALSE)#
	output_vector[8] <- do_t_test(baseline[,k], viral_asymptomatic[,k], FALSE)#
	output_vector[9] <- do_t_test(combined_bacterial_baseline[,k], allviral[,k], FALSE)#
	output_vector[10] <- do_t_test(combined_bacterial_allviral[,k], baseline[,k], FALSE)#
	output_vector[11] <- do_t_test(combined_baseline_allviral[,k], bacterial[,k], FALSE)#
	P[k,] <- output_vector#
}#
#
P[1:20,]
errors()
warnings()
quantile_norm_data[1:20,]
# load normalized data#
# loading quantile_norm_data#
load("R_Data/saved_quantile_norm_data")#
#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1:21,43:52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
#
# t-test function#
do_t_test <- function(s1, s2, is_paired) {#
	result <- t.test(s1, s2, alternative="two.sided", paired=is_paired)#
	return(result$p.value)#
}#
#
# make an output matrix for the pvalues of all the tests#
P <- matrix(, nrow=nrow(quantile_norm_data), ncol=11)#
#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
	output_vector <- vector(length=11)#
	output_vector[1] <- do_t_test(allviral[,k], bacterial[,k], FALSE)#
	output_vector[2] <- do_t_test(allviral[,k], baseline[,k], TRUE)#
	output_vector[3] <- do_t_test(viral_symptomatic[,k], viral_asymptomatic[,k], FALSE)#
	output_vector[4] <- do_t_test(bacterial[,k], baseline[,k], FALSE)#
	output_vector[5] <- do_t_test(bacterial[,k], viral_symptomatic[,k], FALSE)#
	output_vector[6] <- do_t_test(bacterial[,k], viral_asymptomatic[,k], FALSE)#
	output_vector[7] <- do_t_test(baseline[,k], viral_symptomatic[,k], FALSE)#
	output_vector[8] <- do_t_test(baseline[,k], viral_asymptomatic[,k], FALSE)#
	output_vector[9] <- do_t_test(combined_bacterial_baseline[,k], allviral[,k], FALSE)#
	output_vector[10] <- do_t_test(combined_bacterial_allviral[,k], baseline[,k], FALSE)#
	output_vector[11] <- do_t_test(combined_baseline_allviral[,k], bacterial[,k], FALSE)#
	if (k <= 20) {print(output_vector)}#
	P[k,] <- output_vector#
}#
#
quantile_norm_data[1:20,]#
P[1:20,]
# load normalized data#
# loading quantile_norm_data#
load("R_Data/saved_quantile_norm_data")#
#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1:21,43:52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
#
# t-test function#
do_t_test <- function(s1, s2, is_paired) {#
	result <- t.test(s1, s2, alternative="two.sided", paired=is_paired)#
	return(result$p.value)#
}#
#
# make an output matrix for the pvalues of all the tests#
P <- matrix(, nrow=nrow(quantile_norm_data), ncol=11)#
#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
	output_vector <- vector(length=11)#
	output_vector[1] <- do_t_test(allviral[k,], bacterial[k,], FALSE)#
	output_vector[2] <- do_t_test(allviral[k,], baseline[k,], TRUE)#
	output_vector[3] <- do_t_test(viral_symptomatic[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[4] <- do_t_test(bacterial[k,], baseline[k,], FALSE)#
	output_vector[5] <- do_t_test(bacterial[k,], viral_symptomatic[k,], FALSE)#
	output_vector[6] <- do_t_test(bacterial[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[7] <- do_t_test(baseline[k,], viral_symptomatic[k,], FALSE)#
	output_vector[8] <- do_t_test(baseline[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[9] <- do_t_test(combined_bacterial_baseline[k,], allviral[k,], FALSE)#
	output_vector[10] <- do_t_test(combined_bacterial_allviral[k,], baseline[k,], FALSE)#
	output_vector[11] <- do_t_test(combined_baseline_allviral[k,], bacterial[k,], FALSE)#
	if (k <= 20) {print(output_vector)}#
	P[k,] <- output_vector#
}#
#
quantile_norm_data[1:20,]#
P[1:20,]
# load normalized data#
# loading quantile_norm_data#
load("R_Data/saved_quantile_norm_data")#
#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1:21,43:52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
#
# t-test function#
do_t_test <- function(s1, s2, is_paired) {#
	result <- t.test(s1, s2, alternative="two.sided", paired=is_paired)#
	return(result$p.value)#
}#
#
# make an output matrix for the pvalues of all the tests#
p_vals <- matrix(, nrow=nrow(quantile_norm_data), ncol=11)#
#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
	output_vector <- vector(length=11)#
=======
>>>>>>> Stashed changes
	output_vector[1] <- do_t_test(allviral[k,], bacterial[k,], FALSE)#
	output_vector[2] <- do_t_test(allviral[k,], baseline[k,], TRUE)#
	output_vector[3] <- do_t_test(viral_symptomatic[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[4] <- do_t_test(bacterial[k,], baseline[k,], FALSE)#
	output_vector[5] <- do_t_test(bacterial[k,], viral_symptomatic[k,], FALSE)#
	output_vector[6] <- do_t_test(bacterial[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[7] <- do_t_test(baseline[k,], viral_symptomatic[k,], FALSE)#
	output_vector[8] <- do_t_test(baseline[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[9] <- do_t_test(combined_bacterial_baseline[k,], allviral[k,], FALSE)#
	output_vector[10] <- do_t_test(combined_bacterial_allviral[k,], baseline[k,], FALSE)#
	output_vector[11] <- do_t_test(combined_baseline_allviral[k,], bacterial[k,], FALSE)#
	p_vals[k,] <- output_vector#
}#
#
# save p_vals matrix#
save(p_vals, file="R_Data/saved_p_vals")
<<<<<<< Updated upstream
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_raw_data.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_processed_data.r")
x <- rep.int(1,3)
x
x <- rep_len("Marty",3)
x
# Factors are:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline - bl#
# Bacteria - bc#
#
# Write factors for viral symptomatic & asymptomatic#
viral_symp_indices <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymp_indices <- c(3,4,6,7,8,10,12,14)#
viral <- vector(length=21)#
for (i in viral_symp_indices) {#
	viral[i] <- "v_s"#
}#
for (i in viral_asymp_indices) {#
	viral[i] <- "v_as"#
}#
#
# Write factors for baseline#
baseline <- rep_len("bl", 21)#
#
# Write factors for bacteria#
bacteria <- rep_len("bc", 10)#
#
# Get one big factor vector#
category_vector <- c(viral, baseline, bacteria)#
sample_factors <- factor(category_vector)#
sample_factors#
#
# Save factor vector#
save(sample_factors, "R_Data_temp/saved_sample_factors.r")
getwd()
# Factors are:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline - bl#
# Bacteria - bc#
#
# Write factors for viral symptomatic & asymptomatic#
viral_symp_indices <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymp_indices <- c(3,4,6,7,8,10,12,14)#
viral <- vector(length=21)#
for (i in viral_symp_indices) {#
	viral[i] <- "v_s"#
}#
for (i in viral_asymp_indices) {#
	viral[i] <- "v_as"#
}#
#
# Write factors for baseline#
baseline <- rep_len("bl", 21)#
#
# Write factors for bacteria#
bacteria <- rep_len("bc", 10)#
#
# Get one big factor vector#
category_vector <- c(viral, baseline, bacteria)#
sample_factors <- factor(category_vector)#
sample_factors#
#
# Save factor vector#
save(sample_factors, file="R_Data_temp/saved_sample_factors.r")
length(sample_factors)
choose <- c(FALSE, TRUE, FALSE)
el <- c(1,2,3,4,5,6,7,8,9)
X <- matrix(el, nrow=3, ncol=3)
X
X_sub <- X[choose,]
X_sub
=======
?p.adjust
badjustment <- p.adjust(p_vals, method = "bonferroni")
badjustment
p_vals_vector <- vector(p_vals)
?vector
p_vals_vector <- vector(p_vals, mode="any")
new_null <- .05/11
new_null
significant_p_vals <- p_vals < new_null
significant_p_vals
fdradjustment <- p.adjust(p_vals, method = "fdr")
fdradjustment
fdr_matrix <- as.matrix(fdradjustment, row=333, col=11)
fdr_matrix
fdr_vector <- c(p_vals)
head(fdr_vector)
dim(fdr_vector)
fdradjustment <- p.adjust(p_vals, method = "fdr")
head(fdradustment)
head(fdradjustment)
fdr_matrix <- matrix(fdr_adjustment, nrow=333, ncol=11)
fdr_vector <- c(p_vals)#
fdr_adjustment <- p.adjust(p_vals, method = "fdr")#
fdr_matrix <- matrix(fdr_adjustment, nrow=333, ncol=11)
fdr_matrix
b_vector <- c(p_vals)#
b_adjustment <- p.adjust(p_vals, method = "bonferroni")#
b_matrix <- matrix(b_adjustment, nrow=333, ncol=11)
b_matrix
>>>>>>> Stashed changes
