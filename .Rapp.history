load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_sample_factors.r")
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "bl_s", "bl_as", "v_s")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_df[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]])
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "bl_s", "bl_as", "v_s")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_lists[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]])
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_lists[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]])
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_lists[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]], names=sub_grps)
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_lists[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]], names=sub_grps)
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_lists = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	miRNA_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		miRNA_list[[j]] = ct_vec#
	}#
	miRNA_lists[[i]] = miRNA_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_lists[[1]], names=sub_grp_names)
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_list[[1]], names=sub_grp_names, main="Logged Counts")
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_list[[1]], names=sub_grp_names, main="Logged Counts")
# Load the following...#
# processed_data#
# sample_factors#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplot#
boxplot(miRNA_list[[1]], miRNA_list[[2]], miRNA_list[[3]], miRNA_list[[4]], names=sub_grp_names, main="Logged Counts")
x = matrix(c(1,2,3,4), nrow=2, ncol=2)
new_x = apply(x, c(1,2), log)
new_x
# select only certain miRNA indices#
# make boxplot#
col_scheme = c("red", "green", "blue", "orange")#
boxplot(miRNA_list[[1]], names=sub_grp_names, main="Logged Counts")#
boxplot(miRNA_list[[2]] names=sub_grp_names, add=TRUE)
# select only certain miRNA indices#
# make boxplot#
col_scheme = c("red", "green", "blue", "orange")#
boxplot(miRNA_list[[1]], names=sub_grp_names, main="Logged Counts")#
boxplot(miRNA_list[[2]], names=sub_grp_names, add=TRUE)
errors()
# select only certain miRNA indices#
# make boxplot#
col_scheme = c("red", "green", "blue", "orange")#
boxplot(miRNA_list[[1]], names=sub_grp_names, main="Logged Counts")#
boxplot(miRNA_list[[2]], names=sub_grp_names, add=TRUE)
# select only certain miRNA indices#
# make boxplot#
col_scheme = c("red", "green", "blue", "orange")#
boxplot(miRNA_list[[1]], main="Logged Counts")#
boxplot(miRNA_list[[2]], add=TRUE)
# select only certain miRNA indices#
# make boxplot#
col_scheme = c("red", "green", "blue", "orange")#
boxplot(miRNA_list[[1]], main="Logged Counts")#
boxplot(miRNA_list[[2]], names=5:8, add=TRUE)
# Load the following...#
# processed_data#
# sample_factors#
#
# function to log transform the data#
log_transform = function(x) {#
	return log(x + 1)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(processed_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplot#
col_scheme = c("red", "green", "blue", "orange")#
boxplot(miRNA_list[[1]], main="Logged Counts")#
boxplot(miRNA_list[[2]], names=5:8, add=TRUE)
# select only certain miRNA indices#
# make boxplots#
# divide figure into 6 cells#
par(mfrow=c(3,2))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste("miRNA #", miRNA_num, sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme)#
}
# select only certain miRNA indices#
# make boxplots#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste("miRNA #", miRNA_num, sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme)#
}
################
# Retrieve Data#
################
#
# insert data set#
known_data <-read.delim("Data_in/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# extract raw data into matrix (just #s), exclude "norm" data#
data_raw <- known_data[,5:56]#
data_raw <- data.matrix(data_raw)#
#
# save miRNA names#
miRNA_names <- known_data[,1]#
# save precursor names#
prec_names <- known_data[,3]#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	prop <- zero_count / len#
	return(prop)#
}#
################
# Eliminate >50% zero proportions#
################
#
# find zero proportions for each miRNA#
zero_prop_miRNA <- apply(data_raw, 1, count_zeros)#
#
# delete miRNAs that have >50% zeros#
over_50 <- zero_prop_miRNA > 0.5#
data_proc <- data_raw[!over_50,]#
#
# get miRNA names for data_proc#
miRNA_names_proc <- miRNA_names[!over_50]#
# get precursor names for data_proc#
prec_names_proc <- prec_names[!over_50]#
################
# Normalize Data#
################
#
# UQ normalization function#
uq_normalize <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
}#
#
# vector of Us needed to normalize data#
Us <- apply(data_raw, 2, uq_normalize)#
# finding mean of the of the uq samples#
U <- mean(Us)#
#
# do UQ normalization#
uqnorm_data <- matrix(, nrow=nrow(data_proc), ncol=ncol(data_proc))#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(data_proc)) {#
	col <- data_proc[,i]#
	uqnorm_data[,i] <- col/Us[i]*U#
}#
#
# save upper quartilze normalized data#
save(uqnorm_data, file="Data_out/saved_uqnorm_data.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_uqnorm_data.r")
# Load the following...#
# uqnorm_data#
# sample_factors#
# feat_df (from data_frames.r)#
#
# function to log transform the data#
log_transform = function(x) {#
	return log(x + 1)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(uqnorm_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
miRNA_indices = c(200, 86, 195, 211, 51)#
# extract miRNA names from feat_df#
miRNA_names = feat_df$miRNA[miRNA_indices]#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("Bacteria", "Viral Symp", "Baseline Symp", "Baseline Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplots#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme)#
}
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps")#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=10, height=10)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=10, height=10)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
warnings()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=10, height=10)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11, height=8.5)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=13, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=18, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=30, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names, las=2)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
sub_grp_names = c("BC", "V Symp", "BL Symp", "BL Asymp")
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=12, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=14, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3), oma=c(1,1,1,1))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3), oma=c(1,0,0,0))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3), oma=c(0,1,0,0))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
setEPS("Data_out/miRNA_distributions.eps")#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
setEPS()#
postscript("Data_out/miRNA_distributions.eps")#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	boxplot(miRNA_list[[i]], main=miRNA_name, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste(miRNA_name, " (index #", miRNA_num, ")", sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_dfs.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_names.r")
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""))#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
# feat_df (from data_frames.r)#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""), feat_df)#
}
warnings()
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
# feat_df (from data_frames.r)#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
roc_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	roc_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""), feat_df)#
}
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
# feat_df (from data_frames.r)#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
return_data = list()#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	return_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""), feat_df)#
}#
#
# Record misclassification rates#
write.csv(return_data[[4]], file=paste(main_dir, "misclass_rates.csv", sep=""))
return_data[[4]]
return_data
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
# feat_df (from data_frames.r)#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
return_data = list()#
#
misclass_rates = vector(length=7)#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	return_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""), feat_df)#
	misclass_rates[i] = return_data[[4]]#
}#
#
# Record misclassification rates#
write.csv(misclass_rates, file=paste(main_dir, "misclass_rates.csv", sep=""))
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
# feat_df (from data_frames.r)#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
return_data = list()#
#
misclass_rates = vector(length=7)#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	return_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""), feat_df)#
	misclass_rates[i] = return_data[[i]][[4]]#
}#
#
# Record misclassification rates#
write.csv(misclass_rates, file=paste(main_dir, "misclass_rates.csv", sep=""))
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_names.r")
bin_comp_names
# Record misclassification rates#
write.csv(cbind(bin_comp_names, misclass_rates), file=paste(main_dir, "misclass_rates.csv", sep=""), rownames=FALSE, colnames=FALSE)
# Record misclassification rates#
write.csv(cbind(bin_comp_names, misclass_rates), file=paste(main_dir, "misclass_rates.csv", sep=""), row.names=FALSE, col.names=FALSE)
save(misclass_rates, file=paste(main_dir, "saved_log_reg_misclass_rates.r", sep"")
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
# feat_df (from data_frames.r)#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
return_data = list()#
#
# Initialize misclassification rate vector#
log_reg_misclass_rates = vector(length=7)#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	return_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""), feat_df)#
	# retrieve misclassification rate#
	log_reg_misclass_rates[i] = return_data[[i]][[4]]#
}#
# Record misclassification rates, both csv and r data#
write.csv(cbind(bin_comp_names, log_reg_misclass_rates), file=paste(main_dir, "misclass_rates.csv", sep=""), row.names=FALSE)#
save(misclass_rates, file=paste(main_dir, "saved_log_reg_misclass_rates.r", sep""))
save(misclass_rates, file=paste(main_dir, "saved_log_reg_misclass_rates.r", sep=""))
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
# feat_df (from data_frames.r)#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
return_data = list()#
#
# Initialize misclassification rate vector#
log_reg_misclass_rates = vector(length=7)#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	return_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""), feat_df)#
	# retrieve misclassification rate#
	log_reg_misclass_rates[i] = return_data[[i]][[4]]#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_dfs.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_names.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
# feat_df (from data_frames.r)#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
return_data = list()#
#
# Initialize misclassification rate vector#
log_reg_misclass_rates = vector(length=7)#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	return_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""), feat_df)#
	# retrieve misclassification rate#
	log_reg_misclass_rates[i] = return_data[[i]][[4]]#
}#
# Record misclassification rates, both csv and r data#
write.csv(cbind(bin_comp_names, log_reg_misclass_rates), file=paste(main_dir, "misclass_rates.csv", sep=""), row.names=FALSE)#
save(misclass_rates, file=paste(main_dir, "saved_log_reg_misclass_rates.r", sep=""))#
#
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""), width=7, height=6)#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = return_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = return_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = return_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
barplot(log_reg_misclass_rates, name.arg=bin_comp_names)
barplot(log_reg_misclass_rates, names.arg=bin_comp_names)
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)
par(las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mfrow = c(4,2), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mfrow = c(8,6), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mfrow = c(1,1), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(12,1,1,1), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(1,3,1,1), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
postscript(paste(main_dir, "misclass_ ar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(1,1,1,3), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(1,1,1,3), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(3,1), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(1,3), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(7,7,7,7), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(7,10,7,7), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(7,12,7,7), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(3,15,3,3), las=2)#
barplot(log_reg_misclass_rates, names.arg=bin_comp_names, horiz=TRUE)#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(3,15,3,3), las=2)#
barplot(log_reg_misclass_rates, names.arg=gsub("_", " ", bin_comp_names), horiz=TRUE)#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(3,15,3,3), las=2)#
barplot(log_reg_misclass_rates, names.arg=gsub("_", " ", bin_comp_names), horiz=TRUE, col="blue")#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(3,15,3,3), las=2)#
title(col.lab="white")#
barplot(log_reg_misclass_rates, names.arg=gsub("_", " ", bin_comp_names), horiz=TRUE, col="blue")#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(3,15,3,3), las=2)#
title(col.main="white")#
barplot(log_reg_misclass_rates, names.arg=gsub("_", " ", bin_comp_names), horiz=TRUE, col="blue")#
dev.off()
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(3,15,3,3), las=2)#
title(col.sub="white")#
barplot(log_reg_misclass_rates, names.arg=gsub("_", " ", bin_comp_names), horiz=TRUE, col="blue")#
dev.off()
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
#
# Loading do_random_forest func#
do_random_forest = dget("R_Code/Classifiers/do_random_forest.r")#
#
# create main directory#
dir.create("Data_out/random_forest_out")#
main_dir = "Data_out/random_forest_out/"#
#
# Do random forest for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform random forest#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	# perform random forest, 1000 trees#
	do_random_forest(df_sub, 1000, 1, paste(main_dir, sub_dir, sep=""))#
}
bin_comp_names
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_names.r")
bin_comp_names
# Load the following...#
# quantile_norm_data#
# sample_factors#
#
# Do PCA Analysis#
pca_analysis <- dget("R_Code/PCA/analyze_PCs_samples.r")#
pca_analysis(quantile_norm_data, sample_factors, 10)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_quantile_norm_data.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_sample_factors.r")
# Load the following...#
# quantile_norm_data#
# sample_factors#
#
# Do PCA Analysis#
pca_analysis <- dget("R_Code/PCA/analyze_PCs_samples.r")#
pca_analysis(quantile_norm_data, sample_factors, 10)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_conf_ints_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
load("Data_in/saved_p_vals.r")#
load("Data_in/saved_conf_ints_p_vals.r")#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
file_names <- #
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".r", sep=""))#
	plot.new()#
	barplot(adjusted_p_vals)#
	dev.off()#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")
adjusted_p_vals
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".r", sep=""))#
	plot.new()#
	barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index)#
	dev.off()#
}
adjusted_p_vals$p_val
class(adjusted_p_vals)
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0)#
	postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".r", sep=""))#
	plot.new()#
	barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index)#
	dev.off()#
}
summary(adjusted_p_vals$p_val)
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".r", sep=""))#
		plot.new()#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index)#
		dev.off()#
	}#
}
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""))#
		plot.new()#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index)#
		dev.off()#
	}#
}
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		plot.new()#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index)#
		dev.off()#
	}#
}
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index)#
		dev.off()#
	}#
}
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_uqnorm_data.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_sample_factors.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
# Load the following...#
# uqnorm_data#
# sample_factors#
# feat_df (from data_frames.r)#
#
# function to log transform the data#
log_transform = function(x) {#
	return log(x + 1)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(uqnorm_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
#miRNA_indices = c(200, 86, 195, 211, 51)#
miRNA_indices = c(51, 111, 141, 200)#
# extract miRNA names from feat_df#
miRNA_names = feat_df$miRNA[miRNA_indices]#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("BC", "V Symp", "BL Symp", "BL Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste(miRNA_name, " (index #", miRNA_num, ")", sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# Load the following...#
# uqnorm_data#
# sample_factors#
# feat_df (from data_frames.r)#
#
# function to log transform the data#
log_transform = function(x) {#
	out = log(x + 1)#
	return out#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(uqnorm_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
#miRNA_indices = c(200, 86, 195, 211, 51)#
miRNA_indices = c(51, 111, 141, 200)#
# extract miRNA names from feat_df#
miRNA_names = feat_df$miRNA[miRNA_indices]#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("BC", "V Symp", "BL Symp", "BL Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste(miRNA_name, " (index #", miRNA_num, ")", sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# Load the following...#
# uqnorm_data#
# sample_factors#
# feat_df (from data_frames.r)#
#
# function to log transform the data#
log_transform = function(x) {#
	out = log(x + 1)#
	return(out)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(uqnorm_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
#miRNA_indices = c(200, 86, 195, 211, 51)#
miRNA_indices = c(51, 111, 141, 200)#
# extract miRNA names from feat_df#
miRNA_names = feat_df$miRNA[miRNA_indices]#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("BC", "V Symp", "BL Symp", "BL Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste(miRNA_name, " (index #", miRNA_num, ")", sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# Load the following...#
# uqnorm_data#
# sample_factors#
# feat_df (from data_frames.r)#
#
# function to log transform the data#
log_transform = function(x) {#
	out = log(x + 1)#
	return(out)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(uqnorm_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
#miRNA_indices = c(200, 86, 195, 211, 51)#
miRNA_indices = c(51, 111, 141, 200)#
# extract miRNA names from feat_df#
miRNA_names = feat_df$miRNA[miRNA_indices]#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("BC", "V Symp", "BL Symp", "BL Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=13, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste(miRNA_name, " (index #", miRNA_num, ")", sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# Load the following...#
# uqnorm_data#
# sample_factors#
# feat_df (from data_frames.r)#
#
# function to log transform the data#
log_transform = function(x) {#
	out = log(x + 1)#
	return(out)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(uqnorm_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
#miRNA_indices = c(200, 86, 195, 211, 51)#
miRNA_indices = c(51, 111, 141, 200)#
# extract miRNA names from feat_df#
miRNA_names = feat_df$miRNA[miRNA_indices]#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("BC", "V Symp", "BL Symp", "BL Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3), oma=c(0,0,0,0))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste(miRNA_name, " (index #", miRNA_num, ")", sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# Load the following...#
# uqnorm_data#
# sample_factors#
# feat_df (from data_frames.r)#
#
# function to log transform the data#
log_transform = function(x) {#
	out = log(x + 1)#
	return(out)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(uqnorm_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
#miRNA_indices = c(200, 86, 195, 211, 51)#
miRNA_indices = c(51, 111, 141, 200)#
# extract miRNA names from feat_df#
miRNA_names = feat_df$miRNA[miRNA_indices]#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("BC", "V Symp", "BL Symp", "BL Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3), oma=c(1,1,1,1))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste(miRNA_name, " (index #", miRNA_num, ")", sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# Load the following...#
# uqnorm_data#
# sample_factors#
# feat_df (from data_frames.r)#
#
# function to log transform the data#
log_transform = function(x) {#
	out = log(x + 1)#
	return(out)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(uqnorm_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
#miRNA_indices = c(200, 86, 195, 211, 51)#
miRNA_indices = c(51, 111, 141, 200)#
# extract miRNA names from feat_df#
miRNA_names = feat_df$miRNA[miRNA_indices]#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("BC", "V Symp", "BL Symp", "BL Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3), oma=c(0,0,2,0))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste(miRNA_name, " (index #", miRNA_num, ")", sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# Load the following...#
# uqnorm_data#
# sample_factors#
# feat_df (from data_frames.r)#
#
# function to log transform the data#
log_transform = function(x) {#
	out = log(x + 1)#
	return(out)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(uqnorm_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
#miRNA_indices = c(200, 86, 195, 211, 51)#
miRNA_indices = c(51, 111, 141, 200)#
# extract miRNA names from feat_df#
miRNA_names = feat_df$miRNA[miRNA_indices]#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("BC", "V Symp", "BL Symp", "BL Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3), oma=c(0,2,0,0))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste(miRNA_name, " (index #", miRNA_num, ")", sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# Load the following...#
# uqnorm_data#
# sample_factors#
# feat_df (from data_frames.r)#
#
# function to log transform the data#
log_transform = function(x) {#
	out = log(x + 1)#
	return(out)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(uqnorm_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
#miRNA_indices = c(200, 86, 195, 211, 51)#
miRNA_indices = c(51, 111, 141, 200)#
# extract miRNA names from feat_df#
miRNA_names = feat_df$miRNA[miRNA_indices]#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("BC", "V Symp", "BL Symp", "BL Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3), oma=c(2,0,0,0))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste(miRNA_name, " (index #", miRNA_num, ")", sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
# Load the following...#
# uqnorm_data#
# sample_factors#
# feat_df (from data_frames.r)#
#
# function to log transform the data#
log_transform = function(x) {#
	out = log(x + 1)#
	return(out)#
}#
#
# log the data, transform it, make it into data frame#
logged_data = apply(uqnorm_data, c(1,2), log_transform)#
logged_data = t(logged_data)#
logged_df = as.data.frame(logged_data)#
#
# important miRNA indices:#
# - 200#
# - 86#
# - 195#
# - 211#
# - 51#
#
# extract miRNAs#
#miRNA_indices = c(200, 86, 195, 211, 51)#
miRNA_indices = c(51, 111, 141, 200)#
# extract miRNA names from feat_df#
miRNA_names = feat_df$miRNA[miRNA_indices]#
select_logged_df = logged_df[ , miRNA_indices]#
#
# important subgroups:#
# - bacteria#
# - baseline symptomatic#
# - baseline asymptomatic#
# - viral symptomatic#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subgroups#
sub_grps = c("bc", "v_s", "bl_s", "bl_as")#
sub_grp_names = c("BC", "V Symp", "BL Symp", "BL Asymp")#
num_grps = length(sub_grps)#
#
# aggregate data for miRNA for use in box plots#
# define miRNA_df as list of lists; for each miRNA, then for each group, vector of counts#
miRNA_list = list()#
num_miRNAs = length(miRNA_indices)#
for (i in 1:num_miRNAs) {#
	miRNA_index = miRNA_indices[i]#
	index_data = select_logged_df[ , i]#
	grp_list = list()#
	for (j in 1:num_grps) {#
		ct_vec = index_data[sample_factors == sub_grps[j]]#
		grp_list[[j]] = ct_vec#
	}#
	miRNA_list[[i]] = grp_list#
}#
# select only certain miRNA indices#
# make boxplots#
postscript("Data_out/miRNA_distributions.eps", width=11.5, height=8)#
# divide figure into 6 cells#
par(mfrow=c(2,3))#
col_scheme = c("red", "green", "blue", "orange")#
for (i in 1:num_miRNAs) {#
	miRNA_name = miRNA_names[i]#
	miRNA_num = miRNA_indices[i]#
	plot_title = paste(miRNA_name, " (index #", miRNA_num, ")", sep="")#
	boxplot(miRNA_list[[i]], main=plot_title, col=col_scheme, names=sub_grp_names)#
}#
dev.off()
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_conf_ints_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
load("Data_in/saved_p_vals.r")#
load("Data_in/saved_conf_ints_p_vals.r")#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			miRNA_name <- feat_df$miRNA[i]#
			entry <- c(i, miRNA_name, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant_mat <- matrix(, nrow=0, ncol=4)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			miRNA_name <- feat_df$miRNA[i]#
			entry <- c(i, miRNA_name, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
head(feat_df)
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			miRNA_name <- feat_df$miRNA[i]#
			entry <- c(i, miRNA_name, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			miRNA_name <- feat_df$miRNA[i]#
			entry <- c(i, miRNA_name, val, conf_int)#
			significant <- rbind(significant_mat, entry)#
		}#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			miRNA_name <- feat_df$miRNA[i]#
			entry <- c(i, miRNA_name, val, conf_int)#
			significant <- rbind(significant, entry)#
		}#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			miRNA_name <- feat_df$miRNA[i]#
			print(miRNA_name)#
			entry <- c(i, miRNA_name, val, conf_int)#
			significant <- rbind(significant, entry)#
		}#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			miRNA_name <- feat_df$miRNA[i]#
			print(str(miRNA_name))#
			entry <- c(i, miRNA_name, val, conf_int)#
			significant <- rbind(significant, entry)#
		}#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
head(feat_df$miRNA)
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# get miRNA names#
names <- feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, names[i], val, conf_int)#
			significant <- rbind(significant, entry)#
		}#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# get miRNA names#
names <- feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry <- c(i, name, val, conf_int)#
			significant <- rbind(significant, entry)#
		}#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_conf_ints_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# get miRNA names#
names <- feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry <- c(i, name, val, conf_int)#
			significant <- rbind(significant, entry)#
		}#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# get miRNA names#
names <- feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry <- c(i, name, val, conf_int)#
			significant <- rbind(significant, entry)#
		}#
		print("ran")#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# get miRNA names#
names <- feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry <- c(i, name, val, conf_int)#
			significant <- rbind(significant, entry)#
		}#
		print(str(significant))#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# get miRNA names#
names <- feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry <- c(i, name, val, conf_int)#
			significant <- rbind(significant, entry)#
			print(str(significant))#
		}#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# get miRNA names#
names <- feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry <- c(i, name, val, conf_int)#
			significant <- rbind(significant, entry)#
		}#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		print(class(adjusted_p_vals$p_val))#
		barplot(adjusted_p_vals$p_val, names.arg=adjusted_p_vals$index, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# get miRNA names#
names <- feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry <- c(i, name, val, conf_int)#
			significant <- rbind(significant, entry)#
		}#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
str(p_vals)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
p_vals
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs <- list()#
# get miRNA names#
names <- feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "bonferroni")#
	significant <- data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry <- c(i, name, val, conf_int)#
			significant <- rbind(significant, entry)#
		}#
	}#
	colnames(significant) <- c("index", "name", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n <- ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals <- bonferroni_adjust(i)#
	significant_miRNAs[[i]] <- adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust <- function(test_num) {#
	p_val_vec <- p_vals[, test_num]#
	adjusted_p_val_vec <- p.adjust(p_val_vec, method = "fdr")#
	significant_mat <- matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val <- adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int <- conf_ints[i, test_num]#
			entry <- c(i, val, conf_int)#
			significant_mat <- rbind(significant_mat, entry)#
		}#
	}#
	significant <- as.data.frame(significant_mat)#
	colnames(significant) <- c("index", "p_val", "conf_int")#
	significant_ordered <- significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs <- list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] <- fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame <- fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals <- new_frame$p_val#
			quartz()#
			plot_name <- paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
p_vals
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
p_vals
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
p_vals
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
str(p_vals)#
n = ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
str(p_vals)#
n = ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
str(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	n = ncol(p_vals)#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	str(p_vals)#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
str(p_vals)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
str(p_vals)
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	str(p_vals)#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_prec_names_proc.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	head(p_vals)#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
head(p_vals)
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	head(p_vals)#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
head(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	head(p_vals)#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_values) {#
	p_val_vec = p_values[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	head(p_vals)#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
head(p_vals)#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	head(p_vals)#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	print(head(p_vals))#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
print(head(p_vals))#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_vals = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_vals, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
p_vals
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_values = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_values, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
n
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		p_values = as.numeric(adjusted_p_vals$p_val)#
		names = as.character(adjusted_p_vals$index)#
		barplot(height=p_values, names.arg=names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
warnings()
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4))#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		bar_plot_p_values = as.numeric(adjusted_p_vals$p_val)#
		bar_plot_names = as.character(adjusted_p_vals$index)#
		barplot(height=bar_plot_p_values, names.arg=bar_plot_names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
warnings()
significant_miRNAs
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4), stringsAsFactors=FALSE)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		bar_plot_p_values = as.numeric(adjusted_p_vals$p_val)#
		bar_plot_names = as.character(adjusted_p_vals$index)#
		barplot(height=bar_plot_p_values, names.arg=bar_plot_names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4), stringsAsFactors=FALSE)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		bar_plot_p_values = as.numeric(adjusted_p_vals$p_val)#
		bar_plot_names = adjusted_p_vals$index#
		barplot(height=bar_plot_p_values, names.arg=bar_plot_names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
warnings()
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4), stringsAsFactors=FALSE)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		bar_plot_p_values = adjusted_p_vals$p_val#
		bar_plot_names = adjusted_p_vals$index#
		barplot(height=bar_plot_p_values, names.arg=bar_plot_names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(matrix(nrow=0, ncol=4), stringsAsFactors=FALSE)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		bar_plot_p_values = as.numeric(adjusted_p_vals$p_val)#
		bar_plot_names = adjusted_p_vals$index#
		barplot(height=bar_plot_p_values, names.arg=bar_plot_names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
warnings()
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(index=NA, name=NA, p_val=NA, conf_int=NA)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	colnames(significant) = c("index", "name", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		bar_plot_p_values = as.numeric(adjusted_p_vals$p_val)#
		bar_plot_names = adjusted_p_vals$index#
		barplot(height=bar_plot_p_values, names.arg=bar_plot_names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	significant = data.frame(index=NA, name=NA, p_val=NA, conf_int=NA)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	significant = significant[-1, ]#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
# get # cols#
n = ncol(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		bar_plot_p_values = as.numeric(adjusted_p_vals$p_val)#
		bar_plot_names = adjusted_p_vals$index#
		barplot(height=bar_plot_p_values, names.arg=bar_plot_names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_dfs.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_bin_comp_names.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
# Load the following...#
# bin_comp_dfs#
# bin_comp_names#
# feat_df (from data_frames.r)#
#
# Loading do_log_reg func#
do_log_reg = dget("R_Code/Classifiers/do_log_reg.r")#
#
# create main directory#
dir.create("Data_out/logistic_regression_out")#
main_dir = "Data_out/logistic_regression_out/"#
#
# Obtain data for roc curves#
return_data = list()#
#
# Initialize misclassification rate vector#
log_reg_misclass_rates = vector(length=7)#
#
# Do logistic regression for each binary comparison#
for (i in 1:7) {#
	# get df_sub#
	df_sub = bin_comp_dfs[[i]]#
	# create directory#
	dir.create(paste(main_dir, bin_comp_names[i], sep=""))#
	# perform logistic regression#
	sub_dir = paste(bin_comp_names[i], "/", sep="")#
	return_data[[i]] = do_log_reg(df_sub, 1, paste(main_dir, sub_dir, sep=""), feat_df)#
	# retrieve misclassification rate#
	log_reg_misclass_rates[i] = return_data[[i]][[4]]#
}#
# Record misclassification rates, both csv and r data#
write.csv(cbind(bin_comp_names, log_reg_misclass_rates), file=paste(main_dir, "misclass_rates.csv", sep=""), row.names=FALSE)#
save(log_reg_misclass_rates, file=paste(main_dir, "saved_log_reg_misclass_rates.r", sep=""))#
# Make bar plot#
postscript(paste(main_dir, "misclass_bar_plot.eps", sep=""), width=7, height=6)#
par(mar=c(3,15,3,3), las=2)#
title(col.sub="white")#
barplot(log_reg_misclass_rates, names.arg=gsub("_", " ", bin_comp_names), horiz=TRUE, col="blue")#
dev.off()#
#
# Plot ROC curves#
library(pROC)#
postscript(paste(main_dir, "roc_curves_combined.eps", sep=""), width=7, height=6)#
bin_comps_to_plot = c(1, 4, 6)#
titles = c("Viral Symp vs. Baseline Symp", "Viral Symp vs. Bacteria", "Bacteria vs. Baseline")#
num_bin_comps = length(bin_comps_to_plot)#
plot_colors = c("blue", "red", "green")#
# plot 1st ROC curve#
bin_comp_num = bin_comps_to_plot[1]#
roc_set = return_data[[bin_comp_num]]#
bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
plot(bin_comp.loocv_roc, col=plot_colors[1], axes=TRUE)#
# plot other ROC curves#
for (i in 2:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	roc_set = return_data[[bin_comp_num]]#
	bin_comp.loocv_roc = roc(roc_set[[1]], roc_set[[2]])#
	plot(bin_comp.loocv_roc, add=TRUE, col=plot_colors[i], axes=TRUE)#
}#
# get auc values#
auc_vals = vector(length=num_bin_comps)#
for (i in 1:num_bin_comps) {#
	bin_comp_num = bin_comps_to_plot[i]#
	auc_vals[i] = return_data[[bin_comp_num]][[3]]#
}#
# merge titles and auc values#
legend_titles = vector(length=num_bin_comps)#
for (i in 1:3) {#
	legend_titles[i] = paste(titles[i], "   AUC: ", signif(auc_vals[i], digits=4), sep="")#
}#
# plot legend#
legend = legend(x=.7, y=0.2, legend=legend_titles, fill=plot_colors)#
#
dev.off()
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/data_frames.r")
load("/Users/mrincredible/Box Sync/Home Folder csh36/Sharing/Data_Plus/R_Data/saved_sample_factors.r")
# Load the following...#
# 	df (from data_frames.r)#
#	sample_factors#
#
# For reference:#
# Viral Symptomatic - v_s#
# Viral Asymptomatic - v_as#
# Baseline Symptomatic - bl_s#
# Basline Asymptomatic - bl_as#
# Bacteria - bc#
#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
v_s_bool_vec <- sample_factors == "v_s"#
v_as_bool_vec <- sample_factors == "v_as"#
bl_s_bool_vec <- sample_factors == "bl_s"#
bl_as_bool_vec <- sample_factors == "bl_as"#
bc_bool_vec <- sample_factors == "bc"#
#
viral_symptomatic <- df[v_s_bool_vec, ]#
viral_asymptomatic <- df[v_as_bool_vec, ]#
baseline_symptomatic <- df[bl_s_bool_vec, ]#
baseline_asymptomatic <- df[bl_as_bool_vec, ]#
bacterial <- df[bc_bool_vec, ]#
allviral <- df[v_s_bool_vec | v_as_bool_vec, ]#
baseline <- df[bl_s_bool_vec | bl_as_bool_vec, ]#
allviral_and_bacterial <- df[v_s_bool_vec | v_as_bool_vec | bc_bool_vec, ]#
#
v_s_ordered <- df[c(1,2,5,9,11,13,15,16,17,18,19,20,21), ]#
v_as_ordered <- df[c(3,4,6,7,8,10,12,14), ]#
b_s_ordered <- df[c(22,41,24,31,27,42,29,26,28,23,37,33,34), ]#
b_as_ordered <- df[c(40,25,39,38,36,30,35,32), ]#
#
# t-test function#
do_t_test <- function(s1, s2, is_paired) {#
	result <- t.test(s1, s2, alternative="two.sided", paired=is_paired)#
	out = list()#
	out[[1]] <- result$p.value#
	out[[2]] <- result$conf.int#
	return(out)#
}#
#
# make an output matrix for the p values of all the tests#
p_vals <- matrix( , nrow=7, ncol=ncol(df))#
# make an output matrix for the standard errors of all the p values#
conf_ints <- matrix( , nrow=7, ncol=ncol(df))#
#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:ncol(df)) {#
	p_val_vec <- vector(length=7)#
	conf_int_vec <- vector(length=7)#
	result_1 <- do_t_test(v_s_ordered[,k], b_s_ordered[,k], TRUE)#
	p_val_vec[1] <- result_1[[1]]#
	conf_int_vec[1] <- result_1[[2]]#
	result_2 <- do_t_test(v_as_ordered[,k], b_as_ordered[,k], TRUE)#
	p_val_vec[2] <- result_2[[1]]#
	conf_int_vec[2] <- result_2[[2]]#
	result_3 <- do_t_test(viral_symptomatic[,k], viral_asymptomatic[,k], FALSE)#
	p_val_vec[3] <- result_3[[1]]#
	conf_int_vec[3] <- result_3[[2]]#
	result_4 <- do_t_test(viral_symptomatic[,k], bacterial[,k], FALSE)#
	p_val_vec[4] <- result_4[[1]]#
	conf_int_vec[4] <- result_4[[2]]#
	result_5 <- do_t_test(baseline_symptomatic[,k], baseline_asymptomatic[,k], FALSE)#
	p_val_vec[5] <- result_5[[1]]#
	conf_int_vec[5] <- result_5[[2]]#
	result_6 <- do_t_test(bacterial[,k], baseline[,k], FALSE)#
	p_val_vec[6] <- result_6[[1]]#
	conf_int_vec[6] <- result_6[[2]]#
	result_7 <- do_t_test(allviral_and_bacterial[,k], baseline[,k], FALSE)#
	p_val_vec[7] <- result_7[[1]]#
	conf_int_vec[7] <- result_7[[2]]#
	p_vals[,k] <- p_val_vec#
	conf_ints[,k] <- conf_int_vec#
}#
#
# save p_vals matrix#
save(p_vals, file="Data_out/saved_p_vals.r")#
# save conf_ints matrix#
save(conf_ints, file="Data_out/saved_conf_ints_p_vals.r")
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	# get p vals for particlar test number#
	p_val_vec = p_vals[test_num, ]#
	# apply bonferroni correction#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	# initialize dataframe for significant p values#
	significant = data.frame(index=NA, name=NA, p_val=NA, conf_int=NA)#
	# add to data frame if p value is significant#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	# remove NA initialization row#
	significant = significant[-1, ]#
	# order data frame by adjusted p value#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# get # cols#
n = ncol(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		bar_plot_p_values = as.numeric(adjusted_p_vals$p_val)#
		bar_plot_names = adjusted_p_vals$index#
		barplot(height=bar_plot_p_values, names.arg=bar_plot_names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
str(p_vals)
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	# get p vals for particlar test number#
	p_val_vec = p_vals[test_num, ]#
	# apply bonferroni correction#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	# initialize dataframe for significant p values#
	significant = data.frame(index=NA, name=NA, p_val=NA, conf_int=NA)#
	# add to data frame if p value is significant#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	# remove NA initialization row#
	significant = significant[-1, ]#
	# order data frame by adjusted p value#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# get number of rows, or number of tests (binary comparisons) conducted#
n = nrow(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		bar_plot_p_values = as.numeric(adjusted_p_vals$p_val)#
		bar_plot_names = adjusted_p_vals$index#
		barplot(height=bar_plot_p_values, names.arg=bar_plot_names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAs
significant_ordered
# Load the following...#
#	p_vals#
#	conf_ints#
#	feat_df (data_frame.r)#
#
# create list of data frames#
significant_miRNAs = list()#
# get miRNA names#
names = feat_df$miRNA#
# compute Bonferroni p-values#
# returns data frame of index, p value, and confidence interval#
bonferroni_adjust = function(test_num, p_vals) {#
	# get p vals for particlar test number#
	p_val_vec = p_vals[test_num, ]#
	# apply bonferroni correction#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "bonferroni")#
	# initialize dataframe for significant p values#
	significant = data.frame(index=NA, name=NA, p_val=NA, conf_int=NA)#
	# add to data frame if p value is significant#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[test_num, i]#
			name = as.character(names[i])#
			entry = c(i, name, val, conf_int)#
			significant = rbind(significant, entry)#
		}#
	}#
	# remove NA initialization row#
	significant = significant[-1, ]#
	# order data frame by adjusted p value#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# get number of rows, or number of tests (binary comparisons) conducted#
n = nrow(p_vals)#
#
# perform function for each column#
# save to txt file#
for (i in 1:n) {#
	adjusted_p_vals = bonferroni_adjust(i, p_vals)#
	significant_miRNAs[[i]] = adjusted_p_vals#
	if (nrow(adjusted_p_vals) > 0) {#
		postscript(file=paste("Data_out/sig_miRNRA_test_", i, ".eps", sep=""), width=5, height=5)#
		bar_plot_p_values = as.numeric(adjusted_p_vals$p_val)#
		bar_plot_names = adjusted_p_vals$index#
		barplot(height=bar_plot_p_values, names.arg=bar_plot_names, las=1)#
		dev.off()#
	}#
}#
save(significant_miRNAs, file="Data_out/saved_significant_miRNAs.r")#
# compute FDR p-values, order them in data frame#
fdr_adjust = function(test_num) {#
	p_val_vec = p_vals[, test_num]#
	adjusted_p_val_vec = p.adjust(p_val_vec, method = "fdr")#
	significant_mat = matrix(, nrow=0, ncol=3)#
	for (i in 1:length(adjusted_p_val_vec)) {#
		val = adjusted_p_val_vec[i]#
		if (val <= .05) {#
			conf_int = conf_ints[i, test_num]#
			entry = c(i, val, conf_int)#
			significant_mat = rbind(significant_mat, entry)#
		}#
	}#
	significant = as.data.frame(significant_mat)#
	colnames(significant) = c("index", "p_val", "conf_int")#
	significant_ordered = significant[order(significant$p_val), ]#
	return(significant_ordered)#
}#
#
# Do FDR?#
do_fdr = FALSE #
if (do_fdr){#
	# compute false discovery rates (less conservative method than the bonferroni correction)#
	fdr_significant_miRNAs = list()#
	# perform function for each column#
	for (i in 1:7) {#
		fdr_significant_miRNAs[[i]] = fdr_adjust(i)#
	}#
#
	head(fdr_significant_miRNAs[[i]]$p_val)#
	# extract data frame out of the list#
	for (i in 1:7) {#
		new_frame = fdr_significant_miRNAs[[i]]#
		if (nrow(new_frame) > 0) {#
			adjusted_fdr_pvals = new_frame$p_val#
			quartz()#
			plot_name = paste("Test #", i)#
			hist(adjusted_fdr_pvals, main = plot_name)#
		}#
	}#
}
significant_miRNAS
significant_miRNAs
x = c(T, F, F)
which(x)
y = which(x)
y
x = c(T, F, F, T, F, T, T)
y = which(x)
x
u
y
# Load the following...#
# df (from data_frames.r)#
# sample_factors#
#
# Do PCA Analysis#
pca_analysis <- dget("R_Code/PCA/analyze_PCs_samples.r")#
pca_analysis(df, sample_factors, 10)
