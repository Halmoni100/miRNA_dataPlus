<<<<<<< Updated upstream
# load package for data i/o#
library("MASS")#
#
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# retrieve sample names, get rid of sample names in matrix#
sample_names <- raw_data[1,]#
raw_data <- raw_data[-1,]#
head(raw_data)#
# set row and col names#
row.names(raw_data) <- miRNA_names#
col.names(raw_data) <- sample_names
head(known_data)
# load package for data i/o#
library("MASS")#
#
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
write.matrix(raw_data, file = "raw_data.txt")#
#
raw_data_test <- scan(file="raw_data.txt", what = integer(), sep = " ", skip = 1)
head(raw_data_test)
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save(raw_data, c("raw_data.r"))#
#
raw_data <- load("raw_data.r")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save("raw_data.r", "raw_data")#
#
raw_data <- load("raw_data.r")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save("raw_data", "raw_data.r")#
#
raw_data <- load("raw_data.r")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save.image("retrieve_data.RData")
# Retrieve Data#
load("retrieve_data.RData")#
#
###############
Preliminary Testing (zero proportions)#
###############
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
###############
Delete data w/ no info#
###############
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
###############
PCA analysis#
###############
#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
pca_comp_3_bacteria#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save(raw_data, file="saved_raw_data")
# Retrieve Data#
load("saved_raw_data")#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
head(zero_counts_sample)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# function to determine if all zeros#
all_zeros <- function(v) {#
	sum <- sum(v)#
	if (sum == 0) {#
		return(TRUE)#
	}#
	return(FALSE)#
}#
###############
Delete data w/ no info#
###############
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
###############
PCA analysis#
###############
#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
pca_comp_3_bacteria#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
# Retrieve Data#
# raw_data retreived#
load("saved_raw_data")#
#
# Delete data w/ no info#
# Mark and delete all miRNAs with only zeros#
only_zeros <- apply(raw_data, 1, all_zeros)#
raw_data <- raw_data[!only_zeros,]#
# Double check: find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#transpose data for PCA analysis#
raw_data_trans <- t(raw_data)#
dimnames(raw_data_trans) <- c(NULL, NULL)#
str(raw_data_trans)#
pca1 = prcomp(raw_data_trans, scale. = TRUE)#
pca1$sdev#
head(pca1$rotation)#
head(pca1$x)#
str(pca1$x)#
#
# Graph PCA#
pca_result <- pca1$x#
pca_comp_1 <- pca_result[,1]#
pca_comp_2 <- pca_result[,2]#
pca_comp_3 <- pca_result[,3]#
#
pca_comp_1_viral <- pca_comp_1[1:21]#
pca_comp_1_baseline <- pca_comp_1[22:42]#
pca_comp_1_bacteria <- pca_comp_1[43:52]#
pca_comp_2_viral <- pca_comp_2[1:21]#
pca_comp_2_baseline <- pca_comp_2[22:42]#
pca_comp_2_bacteria <- pca_comp_2[43:52]#
pca_comp_3_viral <- pca_comp_3[1:21]#
pca_comp_3_baseline <- pca_comp_3[22:42]#
pca_comp_3_bacteria <- pca_comp_3[43:52]#
#
pca_comp_3_bacteria#
plot(pca_comp_1_viral,pca_comp_2_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_2), max(pca_comp_2)))#
points(pca_comp_1_baseline,pca_comp_2_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_2_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_1_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_1), max(pca_comp_1)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_1_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_1_bacteria,pca_comp_3_bacteria,col="blue")#
#
quartz()#
plot(pca_comp_2_viral,pca_comp_3_viral,col="red",#
		xlim=c(min(pca_comp_2), max(pca_comp_2)),#
		ylim=c(min(pca_comp_3), max(pca_comp_3)))#
points(pca_comp_2_baseline,pca_comp_3_baseline,col="green")#
points(pca_comp_2_bacteria,pca_comp_3_bacteria,col="blue")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save(raw_data, file="saved_raw_data")
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus/miRDeep2_Data")#
known_data <-read.delim("known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# retrieve miRNA names#
miRNA_names <- known_data$X.miRNA#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# set row names (miRNAs)#
row.names(raw_data) <- miRNA_names#
#
save(raw_data, file="R_Data/saved_raw_data")
getwd()
# insert data set#
setwd("~/Desktop/Data+/miRNA_dataPlus")#
known_data <-read.delim("miRDeep2_Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# subset vector for aaa into virus, healthy & bacteria#
virus <- known_data[1,5:25]#
baseline <- known_data[1,26:46]#
bacteria <- known_data[1,47:56]#
infection_status <- c(virus, baseline, bacteria)#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
save(raw_data, file="R_Data/saved_raw_data")
#Retrieve Data#
# raw_data retrieved#
load("R_Data/saved_raw_data")#
# zero_props_miRNA retrieved#
load("R_Data/saved_zero_props_miRNA")#
#
# delete miRNAs that have >50% zeros#
over_50 <- zero_props_miRNA > 0.5#
processed_data <- raw_data[!over_50,]#
head(processed_data)#
#
save(processed_data, file="R_Data/saved_processed_data")
# Retrieve Data#
# raw_data retrieved#
load("R_Data/saved_raw_data")#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# save zero proportions (zero_count / len)#
zero_props_miRNA <- zero_counts_miRNA[1,]#
save(zero_props_miRNA, file="R_Data/saved_zero_props_miRNA")
# insert data set#
known_data <-read.delim("miRDeep2_Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# save raw data#
save(raw_data, file="R_Data/saved_raw_data")#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
head(zero_counts_miRNA[,1:50])#
hist(zero_counts_miRNA[1,])#
#
# save zero proportions (zero_count / len)#
zero_props_miRNA <- zero_counts_miRNA[1,]#
save(zero_props_miRNA, file="R_Data/saved_zero_props_miRNA")#
#
# delete miRNAs that have >50% zeros#
over_50 <- zero_props_miRNA > 0.5#
processed_data <- raw_data[!over_50,]#
head(processed_data)#
#
# save processed data#
save(processed_data, file="R_Data/saved_processed_data")
# insert data set#
known_data <-read.delim("miRDeep2_Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# save raw data#
save(raw_data, file="R_Data/saved_raw_data")#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
#
# save zero proportions (zero_count / len)#
zero_props_miRNA <- zero_counts_miRNA[1,]#
save(zero_props_miRNA, file="R_Data/saved_zero_props_miRNA")#
#
# delete miRNAs that have >50% zeros#
over_50 <- zero_props_miRNA > 0.5#
processed_data <- raw_data[!over_50,]#
#
# save processed data#
save(processed_data, file="R_Data/saved_processed_data")
head(processed_data)
=======
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
# do quantile normalization on each sample#
normalize.quantiles(uqnorm, copy = TRUE)
install.packge("preprocessCore")
install.package("preprocessCore")
install.packages("preprocessCore")
?toupper
# setting up ranks to do quantile normalization#
uqnorm_rank <- apply(uqnorm, 2, rank, ties.method = "min")#
# sort matrix from lowest ot highest#
uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
# calculate the mean of each column#
uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
#
# substitute means into ranked matrix#
index_to_mean <- function(my_index, my_mean) {#
	return(my_mean[my_index])#
}#
#
uqnorm_final <- apply(uq_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
rownames(uqnorm_final) <- toupper(letters[1:4])#
uqnorm_final#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(df, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	rownames(uqnorm_final) <- rownames(uqnorm)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_normalization(uqnorm)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(df, 1, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	rownames(uqnorm_final) <- rownames(uqnorm)#
	return(uqnorm_final)#
}#
#
# test the function#
rownames(uqnorm) <- toupper(letters[1:4])#
quantile_normalization(uqnorm)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(df, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_normalization(uqnorm)
# all code below here is adapted from http://davetang.org/muse/2014/07/07/quantile-normalisation-in-r/#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- (apply(df, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_normalization(uqnorm)
# all code below here is adapted from http://davetang.org/muse/2014/07/07/quantile-normalisation-in-r/#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 1, rank, ties.method="min")#
	uqnorm_sorted <- apply(df, 1, sort)#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_normalization(uqnorm)
# all code below here is adapted from http://davetang.org/muse/2014/07/07/quantile-normalisation-in-r/#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 1, rank, ties.method="min")#
	uqnorm_sorted <- data.fram(apply(df, 1, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_normalization(uqnorm)
# all code below here is adapted from http://davetang.org/muse/2014/07/07/quantile-normalisation-in-r/#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 1, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(df, 1, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_normalization(uqnorm)
>>>>>>> Stashed changes
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}
uqnorm
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_normalization(uqnorm)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_normalization(uqnorm)
# graph the normalized data on a histogram#
hist(quantile_norm_data)
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
#
# graph the normalized data on a histogram#
hist(quantile_norm_data)
?hist
# transpose data for PCA analysis#
proc_data_trans <- t(quantile_norm_data)#
#
# PCA analysis#
pca_df = prcomp(proc_data_trans, scale. = TRUE)#
#
# Set n#
n = 6#
#
# Get first n PCs, store in lists#
pca_result <- pca_df$x#
pcs_all = vector(mode="list", length=n)#
pcs_viral = vector(mode="list", length=n)#
pcs_baseline = vector(mode="list", length=n)#
pcs_bacteria = vector(mode="list", length=n)#
for (i in 1:n) {#
	pcs_all[[i]] = pca_result[,i]#
	pcs_viral[[i]] = pca_result[1:21,i]#
	pcs_baseline[[i]] = pca_result[22:42,i]#
	pcs_bacteria[[i]] = pca_result[43:52,i]#
}#
#
# Plot all combinations of PCs, store in files#
# red=viral, green=baseline, blue=bacteria#
from_i <- 1#
to_i <- n - 1#
to_j <- n#
for (i in from_i:to_i) {#
	from_j <- i + 1#
	for (j in from_j:to_j) {#
		plot_name <- paste(i,"vs",j)#
		dir_name <- paste("Plots/PCA/quantile_norm_data/", plot_name, ".jpeg", collapse="")#
		jpeg(dir_name)#
		plot(pcs_viral[[i]], pcs_viral[[j]], col="red",#
				xlim=c(min(pcs_all[[i]]), max(pcs_all[[i]])),#
				ylim=c(min(pcs_all[[j]]), max(pcs_all[[j]])))#
		points(pcs_baseline[[i]], pcs_baseline[[j]], col="green")#
		points(pcs_bacteria[[i]], pcs_bacteria[[j]], col="blue")#
		dev.off()#
	}#
}
hist(quantile_norm_data)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
# all code below here is adapted from http://davetang.org/muse/2014/07/07/quantile-normalisation-in-r/#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
#
# graph the normalized data on a histogram#
hist(quantile_norm_data)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
#
# graph the normalized data on a histogram#
hist(quantile_norm_data)
setwd("~/Desktop/Data+/miRNA_dataPlus")
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean)#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
#
# graph the normalized data on a histogram#
hist(quantile_norm_data)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
logged <- log2(uqnorm + 1)#
PCA <- dget("Preliminary_Steps/PCA.r")#
PCA(logged, 6)
PCA
head(uqnorm)
PCA <- dget("Preliminary_Steps/PCA.r")
PCA(uqnorm,4)
PCA <- dget("Preliminary_Steps/PCA.r")
PCA(uqnorm,4)
PCA(uqnorm,3)
PCA <- dget("Preliminary_Steps/PCA.r")
PCA(uqnorm,3)
logged <- log2(uqnorm + 1)#
PCA <- dget("Preliminary_Steps/PCA.r")#
PCA(logged, 6)
install.package("FactoMineR")
install.packages("FactoMineR")
# save final normalized data#
save(normalized_data, file="R_Data/saved_normalized_data")
head(uqnorm)
allvirus <- uqnorm(,1:21)#
bacterial <- uqnorm(,43:52)#
baseline <- uqnorm(,22:42)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}
allvirus <- uqnorm[,1:21]#
bacterial <- uqnorm[,43:52]#
baseline <- uqnorm[,22:42]
allvirus
viralsymptomatic <- subset(uqnorm == 1, uqnorm[,1:21])#
viralasymptomatic <- subset(uqnorm == 0, uqnorm[,1:21])
allvirus <- uqnorm[,1:21]#
bacterial <- uqnorm[,43:52]#
baseline <- uqnorm[,22:42]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- allvirus[viral_symptomatic_vector]#
viral_asymptomatic <- allvirus[viral_asymptomatic_vector]
viral_symptomatic
allvirus
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- allvirus[,viral_symptomatic_vector]#
viral_asymptomatic <- allvirus[,viral_asymptomatic_vector]
viral_symptomatic
mean_allvirus <- mean(allvirus)
mean_allvirus
?mean
mean_allvirus <- mean(as.matrix(allvirus))
mean_allvirus
mean_allvirus <- mean(allvirus)#
mean_bacterial <- mean(bacterial)#
mean_baseline <- mean(baseline)#
mean_viral_symptomatic <- mean(viral_symptomatic)#
mean_viral_asymptomatic <- mean(viral_asymptomatic)
mean_viral_asymptomatic
t.test(allvirus,bacterial,alternative="notequal")
t.test(allvirus,bacterial,alternative="two.sided")
sd_allvirus
# standard deviation for each variable#
sd_allvirus <- sd(allvirus)#
sd_bacterial <- sd(bacterial)#
sd_baseline <- sd(baseline)#
sd_viral_symptomatic <- sd(viral_symptomatic)#
sd_viral_asymptomatic <- sd(viral_asymptomatic)
sd_allvirus
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation)#
test1 <- t.test(allviral,bacterial,alternative="two.sided")#
test2 <- t.test(allviral,baseline,alternative="two.sided", paired=TRUE) #
test3 <- t.test(viral_symptomatic, viral_asymptomatic, alternative="two.sided", paired=TRUE)#
#test2 & test3 are paired t-tests#
test4 <- t.test(bacterial,baseline,alternative="two.sided")#
test5 <- t.test(bacterial,viral_symptomatic,alternative="two.sided")#
test6 <- t.test(bacterial,viral_asymptomatic,alternative="two.sided")#
test7 <- t.test(baseline,viral_symptomatic,alternative="two.sided", paired=TRUE)#
test8 <- t.test(baseline,viral_asymptomatic,alternative="two.sided", paired = TRUE)#
# test7 & test8 are paired t-tests#
test9 <- t.test(combined_bacterial_baseline,allviral,alternative="two.sided")#
test10 <- t.test(combined_bacterial_allviral,baseline,alternative="two.sided")#
test11 <- t.test(combined_baseline_allviral,bacterial,alternative="two.sided")
allviral <- uqnorm[,1:21]#
baseline <- uqnorm[,22:42]#
bacterial <- uqnorm[,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- allviral[,viral_symptomatic_vector]#
viral_asymptomatic <- allviral[,viral_asymptomatic_vector]#
combined_bacterial_baseline <- bacterial + baseline#
combined_bacterial_allviral <- bacterial + allviral#
combined_baseline_allviral <- baseline + allviral
allviral <- uqnorm[,1:21]#
baseline <- uqnorm[,22:42]#
bacterial <- uqnorm[,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- allviral[,viral_symptomatic_vector]#
viral_asymptomatic <- allviral[,viral_asymptomatic_vector]#
combined_bacterial_baseline <- uqnorm[,22:52]
test1 <- t.test(allviral,bacterial,alternative="two.sided")
test1
test2 <- t.test(allviral,baseline,alternative="two.sided", paired=TRUE)
test2
test2 <- t.test(allviral,baseline,alternative="two.sided")
test2
test3 <- t.test(viral_symptomatic, viral_asymptomatic, alternative="two.sided", paired=TRUE)
test3 <- t.test(viral_asymptomatic, viral_symptomatic, alternative="two.sided", paired=TRUE)
test3 <- t.test(viral_asymptomatic, viral_symptomatic, alternative="two.sided")
test3 <- t.test(viral_symptomatic, viral_asymptomatic, alternative="two.sided")
test3
test3 <- t.test(viral_symptomatic, viral_asymptomatic, alternative="two.sided", paired=TRUE)
test4 <- t.test(bacterial,baseline,alternative="two.sided")
test4
test4 <- t.test(bacterial,baseline,alternative="less")
test4
test4 <- t.test(bacterial,baseline,alternative="greater")
test4
test5 <- t.test(bacterial,viral_symptomatic,alternative="two.sided")
test5
test6 <- t.test(bacterial,viral_asymptomatic,alternative="two.sided")
test6
test7 <- t.test(baseline,viral_symptomatic,alternative="two.sided", paired=TRUE)
test7 <- t.test(baseline,viral_symptomatic,alternative="two.sided")
test7
test9 <- t.test(combined_bacterial_baseline,allviral,alternative="two.sided")
test9
combined_bacterial_allviral <- uqnorm[,1:21] + uqnorm[,43:52]
combined_bacterial_baseline <- uqnorm[,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- uqnorm[,combined_bacterial_allviral_vector]
test10 <- t.test(combined_bacterial_allviral,baseline,alternative="two.sided")#
test11 <- t.test(combined_baseline_allviral,bacterial,alternative="two.sided")
test10
test11
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean) #mean of each column#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)
quantile_norm_data
hist(quantile_norm_data)
setwd("~/Desktop/Data+/miRNA_dataPlus")
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
#PCA Analysis on Normalized data by using log function#
logged <- log2(uqnorm + 1)#
PCA <- dget("Preliminary_Steps/PCA.r")#
PCA(logged, 6)#
# all code below here is adapted from http://davetang.org/muse/2014/07/07/quantile-normalisation-in-r/#
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean) #mean of each column#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)
hist(quantile_norm_data)
hist(quantile_norm_data)
hist(quantile_norm_data)
test3 <- t.test(viral_symptomatic, viral_asymptomatic, alternative="two.sided", paired=TRUE)
allviral <- uqnorm[,1:21]#
baseline <- uqnorm[,22:42]#
bacterial <- uqnorm[,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- allviral[,viral_symptomatic_vector]#
viral_asymptomatic <- allviral[,viral_asymptomatic_vector]#
combined_bacterial_baseline <- uqnorm[,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- uqnorm[,combined_bacterial_allviral_vector]#
combined_baseline_allviral <- uqnorm[,1:42]
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
# get rid of all non-zero counts to create a vector#
nonzero_data <- subset(v, v > 0)#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
# finding mean of the of the uq samples#
U <- mean(Us)#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	uqnorm_mean <- apply(uqnorm_sorted, 1, mean) #mean of each column#
	index_to_mean <- function (my_index, my_mean) {#
		return (my_mean[my_index])#
	}#
	uqnorm_final <- apply(uqnorm_rank, 2, index_to_mean, my_mean = uqnorm_mean)#
	return(uqnorm_final)#
}#
#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)
allviral <- uqnorm[,1:21]#
baseline <- uqnorm[,22:42]#
bacterial <- uqnorm[,43:52]#
viral_symptomatic_vector <- c(1,2,5,9,11,13,15,16,17,18,19,20,21)#
viral_asymptomatic_vector <- c(3,4,6,7,8,10,12,14)#
viral_symptomatic <- allviral[,viral_symptomatic_vector]#
viral_asymptomatic <- allviral[,viral_asymptomatic_vector]#
combined_bacterial_baseline <- uqnorm[,22:52]#
combined_bacterial_allviral_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,44,45,46,47,48,49,50,51,52)#
combined_bacterial_allviral <- uqnorm[,combined_bacterial_allviral_vector]#
combined_baseline_allviral <- uqnorm[,1:42]
test3 <- t.test(viral_symptomatic, viral_asymptomatic, alternative="two.sided", paired=TRUE)
viral_symptomatic
hist(quantile_norm_data)
uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")
uqnorm_rank
ncol
n <- length(ncol)
n
n <- length(1:ncol)
n <- length(uqnorm[,ncol])
length(uqnorm(ncol))
quantile_function <- function(uqnorm_sorted) {#
		qnorm(makingquantiles, mean=0, sd=1)#
	} #
#
	makingquantiles <- apply((1:52)/53, 2, qnorm)
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	makingquantiles <- apply((uqnorm_sorted, 2, (1:52)/53)	#
	uqnorm_final <- function(uqnorm_sorted) {#
		qnorm(makingquantiles, mean=0, sd=1)#
	} #
	return(uqnorm_final)#
	}
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	makingquantiles <- apply((uqnorm_sorted, 2, (1:52)/53)	#
	uqnorm_final <- function(uqnorm_sorted) {#
		qnorm(makingquantiles, mean=0, sd=1)#
		return(uqnorm_final)#
	} #
#
	}
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))#
	makingquantiles <- apply((uqnorm_sorted, (1:52)/53)	#
	uqnorm_final <- function(uqnorm_sorted) {#
		qnorm(makingquantiles, mean=0, sd=1)#
		return(uqnorm_final)#
	}
uqnorm_sorted
uqnorm_sorted <- data.frame(apply(uqnorm, 2, sort))
uqnorm_sorted
uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm, 2, sort)
uqnorm_sorted
sampling <- (1:52)/53
sampling
makingquantiles <- apply((uqnorm_sorted,2,sampling)
makingquantiles <- apply(uqnorm_sorted,2,sampling)
uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm, 2, sort)#
	sampling <- function(uqnorm_sorted) {#
		1:52/53#
	}#
	makingquantiles <- apply(uqnorm_sorted,2,sampling)
makingquantiles
sampling <- function {#
		1:52/53#
	}
makingquantiles <- apply(uqnorm_sorted,2,1:52/53)
sampling <- function(sampling_vector) {#
		1:52/53#
	}
sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	sampling <- function(sampling_vector) {#
		1:52/53#
	}
sampling
makingquantiles <- apply(uqnorm_sorted,2,sampling)
mkaingquantiles
makingquantiles
sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	sampling <- function(sampling_vector) {#
		/53#
	}
sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	sampling <- function(sampling_vector) {#
		n/53#
	}
makingquantiles <- apply(uqnorm_sorted,2,sampling)
makingquantiles
1/53
sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	sampling <- function(sampling_vector) {#
		n/53#
	}#
	makingquantiles <- lapply(uqnorm_sorted,2,sampling)
sampling <- function(sampling_vector) {#
		n/53#
	}#
	makingquantiles <- lapply(uqnorm_sorted,sampling)
makingquantiles
sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	sampling <- function(sampling_vector) {#
		n/53#
	}#
	makingquantiles <- lapply(sampling_vector,sampling)
makingquantiles
sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	sampling <- function(sampling_vector) {#
		n/53#
	}#
	makingquantiles <- sapply(sampling_vector,sampling)
makingquantiles
sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	sampling <- function(sampling_vector) {#
		n:52/53#
	}#
	makingquantiles <- sapply(sampling_vector,sampling)
makingquantiles
sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	sampling <- function(sampling_vector) {#
		1:n/53#
	}#
	makingquantiles <- sapply(sampling_vector,sampling)
makingquantiles
n <- 1:52
n
sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	n <- 1:52#
	sampling <- function(sampling_vector) {#
		n/53#
	}#
	makingquantiles <- sapply(sampling_vector,sampling)
makingquantiles
sampling <- function() {#
		n/53
makingquantiles <- sapply(sampling_vector,sampling)
making quantiles
n <- 1:52#
	sampling <- function() {#
		n/53#
	}#
	makingquantiles <- sapply(sampling_vector,sampling)
sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	n <- 1:52#
	sampling <- function(sampling_vector[[i]]) {#
		i/53#
	}
sampling <- function(x) {#
		divide <- x/53#
		return(divide)#
	}
makingquantiles <- sapply(sampling_vector,sampling)
makingquantiles
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm, 2, sort)#
	#create the sampling function to add into the quantiles function#
	sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	sampling <- function(x) {#
		divide <- x/53#
		return(divide)#
	}#
	makingquantiles <- sapply(sampling_vector,sampling)	#
	uqnorm_final <- function(uqnorm_sorted) {#
		qnorm(makingquantiles, mean=0, sd=1)#
		return(uqnorm_final)#
	}
quantile_norm_data <- quantile_normalization(uqnorm)
quantile_norm_data
}
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm, 2, sort)#
	#create the sampling function to add into the quantiles function#
	sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	sampling <- function(x) {#
		divide <- x/53#
		return(divide)#
	}#
	makingquantiles <- sapply(sampling_vector,sampling)	#
	uqnorm_final <- function(uqnorm_sorted) {#
		qnorm(makingquantiles, mean=0, sd=1)#
		return(uqnorm_final)#
#
	}#
	}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)
quantile_norm_data
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm, 2, sort)#
	#create the sampling function to add into the quantiles function#
	sampling_vector <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)#
	sampling <- function(x) {#
		divide <- x/53#
		return(divide)#
	}#
	makingquantiles <- sapply(sampling_vector,sampling)	#
	uqnorm_final <- function(uqnorm_sorted) {#
		qnorm(makingquantiles, mean=0, sd=1)#
		return(uqnorm_final)#
#
	}#
	return(quantile_normalization)#
	}
quantile_normalization
# conducting a two-way anova test for test3, test7, & test8#
test7 <- aov(baseline ~ viral_symptomatic + viral_asymptomatic)
test7
test7 <- aov(viral_symptomatic + viral_asymptomatic ~ baseline)
test7 <- aov(baseline ~ viral_symptomatic + viral_asymptomatic)#
boxplot(baseline ~ viral_symptomatic)#
boxplot(baseline ~ viral_asymptomatic)
test7 <- cor.test(viral_symptomatic, viral_asymptomatic, method="spearman")
# conducting a spearman rank correlation test#
test7 <- cor.test(viral_symptomatic, viral_asymptomatic, method="pearson")
# conducting a multiple linear regression model#
test7 <- lm(baseline ~ viral_symptomatic + viral_asymptomatic)
test7
symptom <- cbind(viral_symptomatic + viral_asymptomatic)#
test7 <- manova(symptom ~ baseline)
uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles)
quantiles
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles)#
#
	# The last (and probably most complicated step) you have to do is sort the quantiles by the rank.  idk how to do that yet#
	sort_ranked_quantiles <- function(quantiles, uqnorm_rank) {#
		return(quantiles[uqnorm_rank])#
	}#
#
}
quantile_norm_data <- quantile_normalization(uqnorm)
quantile_norm_data
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 2, rank, ties.method="min")#
	uqnorm_sorted <- apply(uqnorm_rank, 2, sort)#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles)#
#
	# The last (and probably most complicated step) you have to do is sort the quantiles by the rank.  idk how to do that yet#
	sort_ranked_quantiles <- function(quantiles, uqnorm_rank) {#
		return(quantiles[uqnorm_rank])#
	}#
return(sort_ranked_quantiles)#
}
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)
quantile_norm_data
uqnorm_rank <- apply(uqnorm, 2, rank)
uqnorm_ran
uqnorm_rank
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 1, rank, ties.method="min")#
#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 53#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	# return something#
	return()#
}
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 1, rank, ties.method="min")#
#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 51#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	# create for loop to sort every quantile based on rank#
	for (i in 1:quantiles) {#
		sorted_quantiles <- sort(uqnorm_rank[i])#
	}#
	# return sorted_quantiles#
	return(sorted_quantiles)#
}
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 1, rank, ties.method="min")#
#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 51#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	# create for loop to sort every quantile based on rank#
	for (i in quantiles) {#
		sorted_quantiles <- sort(uqnorm_rank[i])#
	}
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 1, rank, ties.method="min")#
#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 51#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	# create for loop to sort every quantile based on rank#
	for (i in quantiles) {#
		sorted_quantiles <- sort(uqnorm_rank[i])#
	}#
	# return sorted_quantiles#
	return(sorted_quantiles)#
}
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 1, rank, ties.method="min")#
#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 51#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	# create for loop to sort every quantile based on rank#
	for (i in quantiles) {#
		sorted_quantiles <- sort(uqnorm_rank[i])#
	}#
	# return sorted_quantiles#
	return(sorted_quantiles)#
}
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
}
# create quantile normalization function#
quantile_normalization <- function(uqnorm) {#
	uqnorm_rank <- apply(uqnorm, 1, rank, ties.method="min")#
#
	#create the sampling vector to add into the quantiles function#
	sampling_vector <- 1:52#
	makingquantiles <- sampling_vector / 51#
	# setting quantiles argument#
	quantiles <- qnorm(makingquantiles, mean=0, sd=1)#
	# create for loop to sort every quantile based on rank#
	for (i in quantiles) {#
		sorted_quantiles <- sort(uqnorm_rank[i])#
	}#
	# return sorted_quantiles#
	return(sorted_quantiles)#
}#
# test the function#
quantile_norm_data <- quantile_normalization(uqnorm)#
str(quantile_norm_data)
?qnorm
uqnorm_rank <- apply(uqnorm, 1, rank, ties.method="min")
uqnorm_rank
?rank
v <- c(10,15,12,8,7)
v <- array(10,15,12,8,7)
v <- c(10,15,12,8,7)
arrayused <- array(data = v)
arrayused
v <- c(10,15,10,8,7)
arrayused <- array(data = v)
arrayused
uqnorm_rank <- apply(arrayused, 1, rank, ties.method="average")
uqnorm_rank
uqnorm_rank <- apply(arrayused, 2, rank, ties.method="average")
arrayused
rank(arrayused,ties.method="average")
quantile_normalization <- for (i in nrow(uqnorm)) {#
	#order the data set according to rank#
	uqnorm_order <- rank(uqnorm[i,:],ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- uqnorm_order/53#
	uqnorm[i,:] <- qnorm(quantiles,mean=0,sd=1)	#
}
quantile_normalization <- for (i in nrow(uqnorm)) {#
	#order the data set according to rank#
	uqnorm_order <- rank(uqnorm[i],ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- uqnorm_order/53#
	quantile_norm_data <- qnorm(quantiles,mean=0,sd=1)#
	return(quantile_norm_data)#
}
quantile_normalization <- for (i in nrow(uqnorm)) {#
	#order the data set according to rank#
	uqnorm_order <- rank(uqnorm[i],ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- uqnorm_order/53#
	quantile_norm_data <- qnorm(quantiles,mean=0,sd=1)#
}
quantile_norm_data <- quantile_normalization(uqnorm)
quantile_normalization
quantile_normalization <- for (i in nrow(uqnorm)) {#
	#order the data set according to rank#
	uqnorm_order <- rank(uqnorm[i],ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- uqnorm_order/53#
	quantile_norm_data <- qnorm(quantiles,mean=0,sd=1)#
}
quantile_norm_data
normalize <- function(uqnorm) {#
uqnorm_order <- rank(uqnorm[i],ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- uqnorm_order/53#
	quantile_norm_data <- qnorm(quantiles,mean=0,sd=1)#
	return(quantile_norm_data)	#
}
output_matrix <- matrix(, nrow=m, ncol=n)#
#loop through each row#
# create quantile normalization function for each miRNA#
quantile_normalization <- for (i in nrow(uqnorm)) {#
uqnorm_order[i]#
output_matrix = list()#
#
}
str(uqnorm)
B = matrix (c(1,2,3,3,5,8,9,3,2,5,1,2), nrow=3, ncol=4)
B
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
}
Us <- apply(raw_data, 2, UQNorm)
Us <- apply(B, 2, UQNorm)
# finding mean of the of the uq samples#
U <- mean(Us)
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	B[,i] <- colneeded/Us[i]*U#
}
quantile_normalize <- function(v) {#
	v_order <- rank(v,ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- v_order/53#
	quantile_norm_vec <- qnorm(quantiles,mean=0,sd=1)#
	return(quantile_norm_vec)	#
}
output_matrix <- matrix(, nrow=m, ncol=n)#
# create quantile normalization function for each miRNA#
quantile_norm_data <- apply(B, 1, quantile_normalize)#
quantile_norm_data <- t(quantile_norm_data)#
str(quantile_norm_data)
<<<<<<< Updated upstream
# insert data set#
known_data <-read.delim("miRDeep2_Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# save row names into matrix#
miRNA_names <- known_data[,1]#
rownames(raw_data) <- miRNA_names#
#
# save raw data#
save(raw_data, file="R_Data/saved_raw_data")#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
#
# save zero proportions (zero_count / len)#
zero_props_miRNA <- zero_counts_miRNA[1,]#
save(zero_props_miRNA, file="R_Data/saved_zero_props_miRNA")#
#
# delete miRNAs that have >50% zeros#
over_50 <- zero_props_miRNA > 0.5#
processed_data <- raw_data[!over_50,]#
#
# save processed data#
# save as R file#
save(processed_data, file="R_Data/saved_processed_data")#
# save as txt file#
write.table(processed_data, "misc_data/saved_processed_data_text.txt", sep="\t",#
		quote=FALSE)
x <- c(1,1,2,4)
y <- rank(x)
y
# insert data set#
known_data <-read.delim("miRDeep2_Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)
str(known_data)
# insert data set#
known_data <-read.delim("miRDeep2_Data/known_miRNAs_expressed_all_samples.txt", header=TRUE)#
#
# extract raw data into matrix (just #s), exclude "norm" data#
raw_data <- known_data[,5:56]#
raw_data <- data.matrix(raw_data)#
#
# save row names into matrix#
miRNA_names <- known_data[,1]#
rownames(raw_data) <- miRNA_names#
#
# save raw data#
save(raw_data, file="R_Data/saved_raw_data")#
#
# function to count zeros, return proportions#
count_zeros <- function(v) {#
	len <- length(v)#
	zero_bool <- v==0#
	zero_count <- length(which(zero_bool == "TRUE"))#
	nonzero_count <- len - zero_count#
	props <- c(0, 0)#
	props[1] <- zero_count / len#
	props[2] <- nonzero_count / len#
	return(props)#
}#
#
# find zero proportions for each sample#
zero_counts_sample <- apply(raw_data, 2, count_zeros)#
#
# find zero proportions for each miRNA#
zero_counts_miRNA <- apply(raw_data, 1, count_zeros)#
#
# save zero proportions (zero_count / len)#
zero_props_miRNA <- zero_counts_miRNA[1,]#
save(zero_props_miRNA, file="R_Data/saved_zero_props_miRNA")#
#
# delete miRNAs that have >50% zeros#
over_50 <- zero_props_miRNA > 0.5#
processed_data <- raw_data[!over_50,]#
#
# save processed data#
# save as R file#
save(processed_data, file="R_Data/saved_processed_data")#
# save as txt file#
write.table(processed_data, "misc_data/saved_processed_data_text.txt", sep="\t",#
		quote=FALSE)#
#
# get precursor names#
precursor_names <- known_data$precursor#
# get corresponding precursor names for processed_data#
prec_names_proc <- precursor_names[!over_50]#
# save precursor names for processed_data#
save(prec_names_proc, file="R_Data/saved_prec_names_proc")
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# get miRNA names in order#
miRNA_names <- rownames(processed_data)#
#
# save miRNA names to .txt file#
write.table(miRNA_names, "misc_data/saved_miRNA_names.txt", sep="\t",#
		quote=FALSE, row.names=FALSE, col.names=FALSE)#
# get precursor names in processed data#
load("R_data/saved_prec_names_proc")#
#
# save precursor names in processed data in .txt file#
write.table(miRNA_names, "misc_data/saved_precursor_names.txt", sep="\t",#
		quote=FALSE, row.names=FALSE, col.names=FALSE)
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_processed_data")#
#
# get miRNA names in order#
miRNA_names <- rownames(processed_data)#
#
# save miRNA names to .txt file#
write.table(miRNA_names, "misc_data/saved_miRNA_names.txt", sep="\t",#
		quote=FALSE, row.names=FALSE, col.names=FALSE)#
# get precursor names in processed data#
# prec_names_proc retrieved#
load("R_data/saved_prec_names_proc")#
#
# save precursor names in processed data in .txt file#
write.table(prec_names_proc, "misc_data/saved_precursor_names.txt", sep="\t",#
		quote=FALSE, row.names=FALSE, col.names=FALSE)
known_data$precursor
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
#
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
#
# finding mean of the of the uq samples#
U <- mean(Us)#
#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
#create a function to normalize data#
#order the data set according to rank#
quantile_normalize <- function(v) {#
	v_order <- rank(v,ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- v_order/53#
	quantile_norm_vec <- qnorm(quantiles,mean=0,sd=1)#
	return(quantile_norm_vec)	#
}#
#
output_matrix <- matrix(, nrow=m, ncol=n)#
# create quantile normalization function for each miRNA#
quantile_norm_data <- apply(uqnorm, 1, quantile_normalize)#
head(quantile_norm_data)#
#
# save final normalized data#
save(quantile_norm_data, file="R_Data/saved_quantile_norm_data")
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
#
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
#
# finding mean of the of the uq samples#
U <- mean(Us)#
#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
#create a function to normalize data#
#order the data set according to rank#
quantile_normalize <- function(v) {#
	v_order <- rank(v,ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- v_order/53#
	quantile_norm_vec <- qnorm(quantiles,mean=0,sd=1)#
	return(quantile_norm_vec)	#
}#
#
output_matrix <- matrix(, nrow=m, ncol=n)#
# create quantile normalization function for each miRNA#
quantile_norm_data <- apply(uqnorm, 1, quantile_normalize)#
quantile_norm_data <- t(quantile_norm_data)#
str(quantile_norm_data)#
#
# save final normalized data#
save(quantile_norm_data, file="R_Data/saved_quantile_norm_data")
# Retrieve Data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Do PCA Analysis#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA.r")#
pca_analysis(quantile_norm_data, 10)
# Retrieve Data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Do PCA Analysis#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_samples.r")#
pca_analysis(quantile_norm_data, 10)
ggplot2
ggplot
library(ggplot1)
library(ggplot2)
x <- -4
abs(x)
x <- c(1,2,3,4)
y <- c(4,2,2,1)
ggplot(data.frame(xval=x,yval=y), aes(x='1',y='2'))
ggplot(data.frame(xval=x,yval=y), aes(x='1',y='2')) + geom_point()
ggplot(data.frame(xval=x,yval=y)) + geom_point(aes(x='1',y='2'))
# Generate some data#
set.seed(133)#
df <- data.frame(xval=rnorm(50), yval=rnorm(50))#
#
# Make color depend on yval#
ggplot(df, aes(x=xval, y=yval, colour=yval)) + geom_point()
# Generate some data#
set.seed(133)#
df <- data.frame(xval=rnorm(50), yval=rnorm(50))#
#
# Make color depend on yval#
ggplot(df, aes(x='1', y='2', colour=yval)) + geom_point()
# Generate some data#
set.seed(133)#
df <- data.frame(xval=rnorm(50), yval=rnorm(50))#
#
# Make color depend on yval#
ggplot(df, aes(x=xal, y=yl, colour=yval)) + geom_point()
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNa_gc_prop,#
		prec_length, prec_gc_prop, 10)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 10)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 2)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
plot_df <- data.frame(xval=pcs_all[[1]], yval=pcs_all[[2]])#
	ggplot(plot_df, aes(x=pcs_all[[1]],y=pcs_all[[2]], colour=z_data)) +#
				geom_point() +#
				scale_colour_gradientn(colours=rainbow(max(abs(z_data))))
# Load package#
	library(FactoMineR)#
	# PCA analysis, miRNAs are data points, samples are features#
	pca_df = PCA(data, ncp=num, graph=FALSE)#
	# Find proportion of variance, etc.#
	prop_of_var <- pca_df$eig[1:num,]#
	write.table(prop_of_var, "Preliminary_Steps/PCA/analysis/prop_of_vars_miRNA.txt", sep="\t", quote=FALSE)#
	# Get first n PCs, store in lists#
	pca_result <- pca_df$ind$coord#
	pcs_all = vector(mode="list", length=num)#
	for(i in 1:num) {#
		pcs_all[[i]] = pca_result[,i]#
	}#
	plot_df <- data.frame(xval=pcs_all[[1]], yval=pcs_all[[2]])#
	ggplot(plot_df, aes(x=pcs_all[[1]],y=pcs_all[[2]], colour=z_data)) +#
				geom_point() +#
				scale_colour_gradientn(colours=rainbow(max(abs(z_data))))
# Load package#
	library(FactoMineR)#
	# PCA analysis, miRNAs are data points, samples are features#
	pca_df = PCA(data, ncp=3, graph=FALSE)#
	# Find proportion of variance, etc.#
	prop_of_var <- pca_df$eig[1:num,]#
	write.table(prop_of_var, "Preliminary_Steps/PCA/analysis/prop_of_vars_miRNA.txt", sep="\t", quote=FALSE)#
	# Get first n PCs, store in lists#
	pca_result <- pca_df$ind$coord#
	pcs_all = vector(mode="list", length=num)#
	for(i in 1:3) {#
		pcs_all[[i]] = pca_result[,i]#
	}#
	plot_df <- data.frame(xval=pcs_all[[1]], yval=pcs_all[[2]])#
	ggplot(plot_df, aes(x=pcs_all[[1]],y=pcs_all[[2]], colour=z_data)) +#
				geom_point() +#
				scale_colour_gradientn(colours=rainbow(max(abs(z_data))))
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
warnings()
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
warnings
warnings()
error()
errorS()
errors()
traceback()
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
len(prec_seq_df$gc_prop)#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
length(prec_seq_df$gc_prop)#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
head(prec_seq_df$gc_prop)
head(miRNA_gc_prop)
length(miRNA_gc_prop)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
x <- c(1,2,3,4)
y <- c(4,3,9,4)
ggplot(data.frame(xval=x,yval=y), aes(x=xval,y=yval)) + geom_point()
install.packages("ggplot2")
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
x
y
df <- data.frame(xval=x,yval=y)
ggplot(df, aes(x=xval,y=yval)) + geom_point(size=1)
print(ggplot(df, aes(x=xval,y=yval)) + geom_point(size=1))
print(ggplot(df, ase(x=xval,y=yval)) + geom_point())
print(ggplot(df, aes(x=xval,y=yval)) + geom_point())
p <- ggplot(df, ase(x=xval,y=yval)) + geom_point()
p <- ggplot(df, aes(x=xval,y=yval)) + geom_point()
print(p)
ggsave("sample.gg",p)
ggsave("sample",p)
ggsave("sample.jpeg",p)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
<<<<<<< Updated upstream
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
# Read quantile normalized data#
# quantile_norm_data retrieved#
load("R_data/saved_quantile_norm_data")#
#
# Read content table w/ sequence data for miRNA & precursor#
miRNA_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_miRNA.txt")#
prec_seq_df <- read.delim("Preliminary_Steps/sequence_content/content_table_precursor.txt")#
#
# Create lists for gc proportion and lengths for miRNA & precursor#
miRNA_gc_prop <- miRNA_seq_df$gc_prop#
prec_gc_prop <- prec_seq_df$gc_prop#
miRNA_length <- miRNA_seq_df$length#
prec_length <- prec_seq_df$length#
#
# Do PCA Analysis for all variables#
pca_analysis <- dget("Preliminary_Steps/PCA/analyze_PCs_miRNA_precursor.r")#
pca_analysis(quantile_norm_data, miRNA_length, miRNA_gc_prop,#
		prec_length, prec_gc_prop, 3)
=======
head(quantile_norm_data)
quantile_norm_data
>>>>>>> Stashed changes
=======
x <- 1:100
x <- x / 100
x <- 1:100
x <- (x - 1) / 100
pbinom(q, 100, 1/6)
pbinom(x, 100, 1/6)
x <- 1:100
pbinom(x,100,1/6)
prob_dist <- pbinom(x,100,1/6)
expected <- 12/38 * 100
(expected - x) ^2
y <- (expected - x) ^2
prob_dist * y
var <- prob_dist[1:38] * y[1:38]
var <- sum(var)
se <- var ^ (1/2)
se
>>>>>>> Stashed changes
