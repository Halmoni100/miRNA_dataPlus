setwd("~/Desktop/Data+/miRNA_dataPlus")
# load normalized data#
# loading quantile_norm_data#
load("R_Data/saved_quantile_norm_data")#
#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1:21,43:52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
#
# t-test function#
do_t_test <- function(s1, s2, is_paired) {#
	result <- t.test(s1, s2, alternative="two.sided", paired=is_paired)#
	return(result$p.value)#
}#
#
# make an output matrix for the pvalues of all the tests#
p_vals <- matrix(, nrow=nrow(quantile_norm_data), ncol=11)#
#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
	output_vector <- vector(length=11)#
	output_vector[1] <- do_t_test(allviral[k,], bacterial[k,], FALSE)#
	output_vector[2] <- do_t_test(allviral[k,], baseline[k,], TRUE)#
	output_vector[3] <- do_t_test(viral_symptomatic[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[4] <- do_t_test(bacterial[k,], baseline[k,], FALSE)#
	output_vector[5] <- do_t_test(bacterial[k,], viral_symptomatic[k,], FALSE)#
	output_vector[6] <- do_t_test(bacterial[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[7] <- do_t_test(baseline[k,], viral_symptomatic[k,], FALSE)#
	output_vector[8] <- do_t_test(baseline[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[9] <- do_t_test(combined_bacterial_baseline[k,], allviral[k,], FALSE)#
	output_vector[10] <- do_t_test(combined_bacterial_allviral[k,], baseline[k,], FALSE)#
	output_vector[11] <- do_t_test(combined_baseline_allviral[k,], bacterial[k,], FALSE)#
	p_vals[k,] <- output_vector#
}#
#
# save p_vals matrix#
save(p_vals, file="R_Data/saved_p_vals")
# loading quantile_norm_data#
load("R_Data/saved_quantile_norm_data.R")
# Retrieve Data#
# processed_data retreived#
load("R_Data/saved_raw_data")#
#
# UQ normalization function#
UQNorm <- function(v) {#
    nonzero_data <- subset(v, v > 0)#
    quartiles <- quantile(nonzero_data)#
    uq <- quartiles[4]#
    return(uq)#
} #
#
# vector of Us needed to normalize data#
Us <- apply(raw_data, 2, UQNorm)#
#
# finding mean of the of the uq samples#
U <- mean(Us)#
#
# load processed data#
load("R_Data/saved_processed_data")#
#
uqnorm <- matrix(, nrow=nrow(processed_data), ncol=ncol(processed_data))#
#
# doing a for loop to normalize on each sample#
for (i in 1:ncol(processed_data)) {#
	colneeded <- processed_data[,i]#
	uqnorm[,i] <- colneeded/Us[i]*U#
}#
#
#create a function to normalize data#
#order the data set according to rank#
quantile_normalize <- function(v) {#
	v_order <- rank(v,ties.method="average")#
	#set the quantiles based on the order#
	quantiles <- v_order/53#
	quantile_norm_vec <- qnorm(quantiles,mean=0,sd=1)#
	return(quantile_norm_vec)	#
}#
#
output_matrix <- matrix(, nrow=m, ncol=n)#
# create quantile normalization function for each miRNA#
quantile_norm_data <- apply(uqnorm, 1, quantile_normalize)#
quantile_norm_data <- t(quantile_norm_data)#
str(quantile_norm_data)#
#
# save final normalized data#
save(quantile_norm_data, file="R_Data/saved_quantile_norm_data")
load("/Users/kelseysumner/Desktop/Data+/miRNA_dataPlus/Data/R_Data-selected/saved_processed_data.r")
# load normalized data#
# loading quantile_norm_data#
load("R_Data/saved_quantile_norm_data")#
#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1:21,43:52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
#
# t-test function#
do_t_test <- function(s1, s2, is_paired) {#
	result <- t.test(s1, s2, alternative="two.sided", paired=is_paired)#
	return(result$p.value)#
}#
#
# make an output matrix for the pvalues of all the tests#
p_vals <- matrix(, nrow=nrow(quantile_norm_data), ncol=11)#
#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
	output_vector <- vector(length=11)#
	output_vector[1] <- do_t_test(allviral[k,], bacterial[k,], FALSE)#
	output_vector[2] <- do_t_test(allviral[k,], baseline[k,], TRUE)#
	output_vector[3] <- do_t_test(viral_symptomatic[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[4] <- do_t_test(bacterial[k,], baseline[k,], FALSE)#
	output_vector[5] <- do_t_test(bacterial[k,], viral_symptomatic[k,], FALSE)#
	output_vector[6] <- do_t_test(bacterial[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[7] <- do_t_test(baseline[k,], viral_symptomatic[k,], FALSE)#
	output_vector[8] <- do_t_test(baseline[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[9] <- do_t_test(combined_bacterial_baseline[k,], allviral[k,], FALSE)#
	output_vector[10] <- do_t_test(combined_bacterial_allviral[k,], baseline[k,], FALSE)#
	output_vector[11] <- do_t_test(combined_baseline_allviral[k,], bacterial[k,], FALSE)#
	p_vals[k,] <- output_vector#
}#
#
# save p_vals matrix#
save(p_vals, file="R_Data/saved_p_vals")
# load normalized data#
# loading quantile_norm_data#
load("Data/saved_quantile_norm_data")#
#
# subset viral, bacterial, baseline, asymptomatic/symptomatic miRNA expression#
allviral <- quantile_norm_data[,1:21]#
baseline <- quantile_norm_data[,22:42]#
bacterial <- quantile_norm_data[,43:52]#
viral_symptomatic <- quantile_norm_data[,c(1,2,5,9,11,13,15,16,17,18,19,20,21)]#
viral_asymptomatic <- quantile_norm_data[,c(3,4,6,7,8,10,12,14)]#
combined_bacterial_baseline <- quantile_norm_data[,22:52]#
combined_bacterial_allviral <- quantile_norm_data[,c(1:21,43:52)]#
combined_baseline_allviral <- quantile_norm_data[,1:42]#
#
# t-test function#
do_t_test <- function(s1, s2, is_paired) {#
	result <- t.test(s1, s2, alternative="two.sided", paired=is_paired)#
	return(result$p.value)#
}#
#
# make an output matrix for the pvalues of all the tests#
p_vals <- matrix(, nrow=nrow(quantile_norm_data), ncol=11)#
#
# conducting a Welch Two Sample t-test on every variable (not assuming equal standard deviation) using a for loop#
for (k in 1:nrow(quantile_norm_data)) {#
	output_vector <- vector(length=11)#
	output_vector[1] <- do_t_test(allviral[k,], bacterial[k,], FALSE)#
	output_vector[2] <- do_t_test(allviral[k,], baseline[k,], TRUE)#
	output_vector[3] <- do_t_test(viral_symptomatic[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[4] <- do_t_test(bacterial[k,], baseline[k,], FALSE)#
	output_vector[5] <- do_t_test(bacterial[k,], viral_symptomatic[k,], FALSE)#
	output_vector[6] <- do_t_test(bacterial[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[7] <- do_t_test(baseline[k,], viral_symptomatic[k,], FALSE)#
	output_vector[8] <- do_t_test(baseline[k,], viral_asymptomatic[k,], FALSE)#
	output_vector[9] <- do_t_test(combined_bacterial_baseline[k,], allviral[k,], FALSE)#
	output_vector[10] <- do_t_test(combined_bacterial_allviral[k,], baseline[k,], FALSE)#
	output_vector[11] <- do_t_test(combined_baseline_allviral[k,], bacterial[k,], FALSE)#
	p_vals[k,] <- output_vector#
}#
#
# save p_vals matrix#
save(p_vals, file="Data/saved_p_vals")
# Retrieve Data#
# processed_data retreived#
load("Data/saved_raw_data")
pvals
setwd(~/Box Sync/Sharing/Data_Plus/R_Data)
setwd(~Box Sync/Sharing/Data_Plus/R_Data)
setwd(~/Box Sync/Sharing/Data_Plus)
setwd(~/Box Sync/Sharing/Data_Plus)
load("/Users/kelseysumner/Box Sync/Sharing/Data_Plus/R_Data/saved_raw_data.r")
load("/Users/kelseysumner/Box Sync/Sharing/Data_Plus/R_Data/saved_p_vals.r")
p_vals
fdr_vector_test1 <- c(p_vals[,1])#
fdr_vector_test2 <- c(p_vals[,2])#
fdr_vector_test3 <- c(p_vals[,3])#
fdr_vector_test4 <- c(p_vals[,4])#
fdr_vector_test5 <- c(p_vals[,5])#
fdr_vector_test6 <- c(p_vals[,6])#
fdr_vector_test7 <- c(p_vals[,7])#
fdr_vector_test8 <- c(p_vals[,8])#
fdr_vector_test9 <- c(p_vals[,9])#
fdr_vector_test10 <- c(p_vals[,10])#
fdr_vector_test11 <- c(p_vals[,11])
fdr_adjustment1 <- p.adjust(fdr_vector_test1, method = "fdr")#
fdr_adjustment2 <- p.adjust(fdr_vector_test2, method = "fdr")#
fdr_adjustment3 <- p.adjust(fdr_vector_test3, method = "fdr")#
fdr_adjustment4 <- p.adjust(fdr_vector_test4, method = "fdr")#
fdr_adjustment5 <- p.adjust(fdr_vector_test5, method = "fdr")#
fdr_adjustment6 <- p.adjust(fdr_vector_test6, method = "fdr")#
fdr_adjustment7 <- p.adjust(fdr_vector_test7, method = "fdr")#
fdr_adjustment8 <- p.adjust(fdr_vector_test8, method = "fdr")#
fdr_adjustment9 <- p.adjust(fdr_vector_test9, method = "fdr")#
fdr_adjustment10 <- p.adjust(fdr_vector_test10, method = "fdr")#
fdr_adjustment11 <- p.adjust(fdr_vector_test11, method = "fdr")#
fdr_combined <- c(fdr_adjustment1, fdr_adjustment2, fdr_adjustment3, fdr_adjustment4, fdr_adjustment5, fdr_adjustment6, fdr_adjustment7, fdr_adjustment8, fdr_adjustment9, fdr_adjustment10, fdr_adjustment11)#
fdr_matrix <- matrix(fdr_combined, nrow=333, ncol=11)
fdr_matrix
b_vector_test1 <- c(p_vals[,1])#
b_vector_test2 <- c(p_vals[,2])#
b_vector_test3 <- c(p_vals[,3])#
b_vector_test4 <- c(p_vals[,4])#
b_vector_test5 <- c(p_vals[,5])#
b_vector_test6 <- c(p_vals[,6])#
b_vector_test7 <- c(p_vals[,7])#
b_vector_test8 <- c(p_vals[,8])#
b_vector_test9 <- c(p_vals[,9])#
b_vector_test10 <- c(p_vals[,10])#
b_vector_test11 <- c(p_vals[,11])#
b_adjustment1 <- p.adjust(b_vector_test1, method = "bonferroni")#
b_adjustment2 <- p.adjust(b_vector_test2, method = "bonferroni")#
b_adjustment3 <- p.adjust(b_vector_test3, method = "bonferroni")#
b_adjustment4 <- p.adjust(b_vector_test4, method = "bonferroni")#
b_adjustment5 <- p.adjust(b_vector_test5, method = "bonferroni")#
b_adjustment6 <- p.adjust(b_vector_test6, method = "bonferroni")#
b_adjustment7 <- p.adjust(b_vector_test7, method = "bonferroni")#
b_adjustment8 <- p.adjust(b_vector_test8, method = "bonferroni")#
b_adjustment9 <- p.adjust(b_vector_test9, method = "bonferroni")#
b_adjustment10 <- p.adjust(b_vector_test10, method = "bonferroni")#
b_adjustment11 <- p.adjust(b_vector_test11, method = "bonferroni")#
b_combined <- c(b_adjustment1, b_adjustment2, b_adjustment3, b_adjustment4, b_adjustment5, b_adjustment6, b_adjustment7, b_adjustment8, b_adjustment9, b_adjustment10, b_adjustment11)#
b_matrix <- matrix(b_combined, nrow=333, ncol=11)
b_matrix
significant_b_p_vals <- b_matrix <= .05
significant_b_p_vals
significant_fdr_p_vals <- fdr_matrix <= .05
signifiant_fdr_p_vals
significant_fdr_p_vals
b_matrix
significant_b_p_vals <- b_matrix <= .05
significant_b_p_vals
subset(significant_b_p_vals, subset=TRUE)
significant_b_p_vals[TRUE]
significant_b_p_vals(FALSE, drop = TRUE)
significant_b_p_vals <- b_matrix <= .05
significant_b_p_vals(FALSE, drop = TRUE)
?subset
subset(significant_b_p_vals, FALSE, drop = TRUE)
subset(significant_b_p_vals, TRUE, drop = TRUE)
apply(significant_b_p_vals, 2, subset(significant_b_p_vals, FALSE, drop = TRUE))
?which
apply(significant_b_p_vals, 2, significant_b_p_vals[TRUE])
significant_b_p_vals[TRUE]
takeout <- x==TRUE
takeout <- significant_b_p_vals==TRUE
takeout
takingout <- function(significant_b_p_vals) {#
	takeout <- significant_b_p_vals==TRUE#
	return(takeout)#
}
apply(significant_b_p_vals, 2, takingout)
takeout <- c(significant_b_p_vals==FALSE)
takeout
takingout <- function(significant_b_p_vals) {#
#
	takeout <- which(significant_b_p_vals == TRUE)#
	return(takeout)#
}
apply(significant_b_p_vals, 2, takingout)
takingout <- function(significant_b_p_vals) {#
	takeout <- which(significant_b_p_vals == TRUE)#
	return(takeout)#
}
apply(significant_b_p_vals, 2, takingout)
?hclust
clustergram <- hclust(dist(b_matrix))
clustergram
plot(clustergram)
clustergram <- hclust(dist(b_matrix), "ave")
plot(clustergram)
clustergram <- hclust(dist(b_matrix), "complete")
plot(clustergram)
clustergram <- hclust(dist(b_matrix), "complete")#
plot(clustergram)
load("/Users/kelseysumner/Box Sync/Sharing/Data_Plus/R_Data/saved_raw_data.r")
saved_raw_data
raw_data
processed_data
head(processed_data)
str(processed_data)
?wilcoxin
